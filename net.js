
    window.MODEL_BASE_URL= "https://huggingface.co/wpmed/stable-diffusion-f16-new/resolve/main";
    const getTensorMetadata = (safetensorBuffer) => {
      const metadataLength = Number(new DataView(safetensorBuffer.buffer).getBigUint64(0, true));
      const metadata = JSON.parse(new TextDecoder("utf8").decode(safetensorBuffer.subarray(8, 8 + metadataLength)));
      return Object.fromEntries(Object.entries(metadata).filter(([k, v]) => k !== "__metadata__").map(([k, v]) => [k, {...v, data_offsets: v.data_offsets.map(x => 8 + metadataLength + x)}]));
    };

  const getTensorBuffer = (safetensorParts, tensorMetadata, key) => {
    let selectedPart = 0;
    let counter = 0;
    let partStartOffsets = [1131408336, 2227518416, 3308987856, 4265298864];
    let correctedOffsets = tensorMetadata.data_offsets;
    let prev_offset = 0;

    for (let start of partStartOffsets) {
      prev_offset = (counter == 0) ? 0 : partStartOffsets[counter-1];

      if (tensorMetadata.data_offsets[0] < start) {
        selectedPart = counter;
        correctedOffsets = [correctedOffsets[0]-prev_offset, correctedOffsets[1]-prev_offset];
        break;
      }

      counter++;
    }

    return safetensorParts[selectedPart].subarray(...correctedOffsets);
  }

  const getWeight = (safetensors, key) => {
    let uint8Data = getTensorBuffer(safetensors, getTensorMetadata(safetensors[0])[key], key);
    return new Float32Array(uint8Data.buffer, uint8Data.byteOffset, uint8Data.byteLength / Float32Array.BYTES_PER_ELEMENT);
  }

  const createEmptyBuf = (device, size) => {
      return device.createBuffer({size, usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST });
  };

  const createWeightBuf = (device, size, data) => {
    const buf = device.createBuffer({ mappedAtCreation: true, size, usage: GPUBufferUsage.STORAGE });
    new Uint8Array(buf.getMappedRange()).set(data);
    buf.unmap();
    return buf;
  };

  const addComputePass = (device, commandEncoder, pipeline, bufs, workgroup) => {
    const bindGroup = device.createBindGroup({layout: pipeline.getBindGroupLayout(0), entries: bufs.map((buffer, index) => ({ binding: index, resource: { buffer } }))});
    const passEncoder = commandEncoder.beginComputePass();
    passEncoder.setPipeline(pipeline);
    passEncoder.setBindGroup(0, bindGroup);
    passEncoder.dispatchWorkgroups(...workgroup);
    passEncoder.end();
  };
    var textModel = function() {

    const r_386_32_12352_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 386 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = (lidx0+(gidx0<<5));
  var alu1 = (alu0+alu0+(gidx0<<6)+(lidx0<<1));
  var alu2 = ((gidx0<<7)+(lidx0<<2));
  data0[(alu2+1)] = (f32((alu1+1)));
  data0[(alu2+2)] = (f32((alu1+2)));
  data0[(alu2+3)] = (f32((alu1+3)));
  data0[alu2] = (f32(alu1));
}`;

const r_77_77n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<i32>;
@compute @workgroup_size(1) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  data0[gidx0] = gidx0;
}`;

const E_77_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@compute @workgroup_size(1) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var gidx1 = i32(gindex.y); /* 77 */
  data0[(gidx0+(gidx1*77))] = select(0.0f,(f32(-inf(1.0))),(((gidx0+(gidx1*305)+305)%306)<153));
}`;

const r_77_32_4_8_16_193_3_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 32 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var gidx2 = i32(gindex.z); /* 77 */
  var alu0 = (lidx1+(gidx1*1536)+(gidx2*49152)+(gidx0<<4)+(lidx0*192));
  var val0 = data2[gidx2];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  for (var ridx0 = 0; ridx0 < 193; ridx0++) {
    var alu1 = ((gidx0*9486336)+(gidx1*24)+(lidx0*3)+(lidx1*592896)+(ridx0*3072));
    var alu2 = ((gidx0*12352)+(lidx1*772)+(ridx0<<2));
    var val1 = data1[(alu2+1)];
    var cast0 = (f32(((val1!=val0)!=true)));
    var val2 = data1[(alu2+2)];
    var cast1 = (f32(((val2!=val0)!=true)));
    var val3 = data1[(alu2+3)];
    var cast2 = (f32(((val3!=val0)!=true)));
    var val4 = data1[alu2];
    var cast3 = (f32(((val4!=val0)!=true)));
    var val5 = data3[(alu1+1)];
    var val6 = data3[(alu1+2)];
    var val7 = data3[(alu1+768)];
    var val8 = data3[(alu1+769)];
    var val9 = data3[(alu1+770)];
    var val10 = data3[(alu1+1536)];
    var val11 = data3[(alu1+1537)];
    var val12 = data3[(alu1+1538)];
    var val13 = data3[(alu1+2304)];
    var val14 = data3[(alu1+2305)];
    acc1 = (acc1+(cast0*val8)+(cast3*val5)+(cast1*val11)+(cast2*val14));
    var val15 = data3[(alu1+2306)];
    acc2 = (acc2+(cast0*val9)+(cast3*val6)+(cast1*val12)+(cast2*val15));
    var val16 = data3[alu1];
    acc0 = (acc0+(cast0*val7)+(cast3*val16)+(cast1*val10)+(cast2*val13));
  }
  data0[alu0] = acc0;
  data0[(alu0+64)] = acc1;
  data0[(alu0+128)] = acc2;
}`;

const r_77_16_16_77_3n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<i32>;
@group(0) @binding(2)var<storage,read_write>data2:array<i32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var lidx0 = i32(lindex.x); /* 16 */
  var alu0 = (gidx0*48);
  var alu1 = (lidx0*3);
  var gidx1 = i32(gindex.y); /* 77 */
  var alu2 = (alu0+(gidx1*768)+alu1);
  var val0 = data2[gidx1];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var alu3 = (alu0+alu1+(ridx0*768));
    var val1 = data1[ridx0];
    var cast0 = (f32(((val1!=val0)!=true)));
    var val2 = data3[(alu3+1)];
    acc1 = (acc1+(cast0*val2));
    var val3 = data3[(alu3+2)];
    acc2 = (acc2+(cast0*val3));
    var val4 = data3[alu3];
    acc0 = (acc0+(cast0*val4));
  }
  data0[(alu2+1)] = acc1;
  data0[(alu2+2)] = acc2;
  data0[alu2] = acc0;
}`;

const r_1848_32_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 1848 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = (lidx0+(gidx0<<5));
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 16; ridx0++) {
    var alu1 = ((gidx0<<11)+(lidx0<<6)+(ridx0<<2));
    var val0 = data1[(alu1+1)];
    var val1 = data1[(alu1+2)];
    var val2 = data1[(alu1+3)];
    var val3 = data1[alu1];
    acc0 = (acc0+val2+val1+val0+val3);
  }
  var val4 = data2[alu0];
  data0[alu0] = (val4+acc0);
}`;

const r_77_16_48 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 48; ridx0++) {
    var val0 = data1[((gidx0*768)+(lidx0*48)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*0.0013020833721384406f);
  }
}`;

const r_77_16_48n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var lidx0 = i32(lindex.x); /* 16 */
  var val0 = data2[gidx0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 48; ridx0++) {
    var val1 = data1[((gidx0*768)+(lidx0*48)+ridx0)];
    var alu0 = (val1-val0);
    acc0 = (acc0+(alu0*alu0));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[gidx0] = sqrt((1/((acc1*0.0013020833721384406f)+1e-05f)));
  }
}`;

const E_77_16_16_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 77 */
  var lidx0 = i32(lindex.x); /* 16 */
  var alu0 = (gidx0*48);
  var alu1 = (lidx0*3);
  var alu2 = (alu0+(gidx1*768)+alu1);
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu0+alu1);
  var alu6 = (alu5+1);
  var alu7 = (alu5+2);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu2];
  var val3 = data2[gidx1];
  var val4 = data3[gidx1];
  var val5 = data4[alu6];
  var val6 = data4[alu7];
  var val7 = data4[alu5];
  var val8 = data5[alu6];
  data0[alu3] = (val8+(val5*val4*(val0-val3)));
  var val9 = data5[alu7];
  data0[alu4] = (val9+(val6*val4*(val1-val3)));
  var val10 = data5[alu5];
  data0[alu2] = (val10+(val7*val4*(val2-val3)));
}`;

const r_77_16_16_192_3_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 77 */
  var lidx0 = i32(lindex.x); /* 16 */
  var alu0 = (gidx1*768);
  var alu1 = (gidx0*48);
  var alu2 = (lidx0*3);
  var alu3 = (alu1+alu0+alu2);
  var alu4 = (alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  for (var ridx0 = 0; ridx0 < 192; ridx0++) {
    var alu5 = (ridx0<<2);
    var alu6 = ((gidx0*36864)+(lidx0*2304)+alu5);
    var alu7 = (alu0+alu5);
    var val0 = data1[(alu7+1)];
    var val1 = data1[(alu7+2)];
    var val2 = data1[(alu7+3)];
    var val3 = data1[alu7];
    var val4 = data2[(alu6+1)];
    var val5 = data2[(alu6+2)];
    var val6 = data2[(alu6+3)];
    var val7 = data2[(alu6+768)];
    var val8 = data2[(alu6+769)];
    var val9 = data2[(alu6+770)];
    var val10 = data2[(alu6+771)];
    acc1 = (acc1+(val0*val8)+(val3*val7)+(val1*val9)+(val2*val10));
    var val11 = data2[(alu6+1536)];
    var val12 = data2[(alu6+1537)];
    var val13 = data2[(alu6+1538)];
    var val14 = data2[(alu6+1539)];
    acc2 = (acc2+(val0*val12)+(val3*val11)+(val1*val13)+(val2*val14));
    var val15 = data2[alu6];
    acc0 = (acc0+(val0*val4)+(val3*val15)+(val1*val5)+(val2*val6));
  }
  var val16 = data3[(alu4+1)];
  data0[(alu3+1)] = (val16+acc1);
  var val17 = data3[(alu4+2)];
  data0[(alu3+2)] = (val17+acc2);
  var val18 = data3[alu4];
  data0[alu3] = (val18+acc0);
}`;

const r_77_77_4_16_3_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var gidx1 = i32(gindex.y); /* 77 */
  var lidx0 = i32(lindex.x); /* 4 */
  var alu0 = (lidx0*192);
  var alu1 = (gidx0+(gidx1*77));
  var alu2 = (alu1+(lidx0*17787));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  for (var ridx0 = 0; ridx0 < 16; ridx0++) {
    var alu3 = (ridx0<<2);
    var alu4 = ((gidx0*768)+alu0+alu3);
    var alu5 = ((gidx1*768)+alu0+alu3);
    var val0 = data1[(alu5+1)];
    var val1 = data1[(alu5+2)];
    var val2 = data1[(alu5+3)];
    var val3 = data1[(alu5+64)];
    var val4 = data1[(alu5+65)];
    var val5 = data1[(alu5+66)];
    var val6 = data1[(alu5+67)];
    var val7 = data1[(alu5+128)];
    var val8 = data1[(alu5+129)];
    var val9 = data1[(alu5+130)];
    var val10 = data1[(alu5+131)];
    var val11 = data1[alu5];
    var val12 = data2[(alu4+1)];
    var val13 = data2[(alu4+2)];
    var val14 = data2[(alu4+3)];
    var val15 = data2[(alu4+64)];
    var val16 = data2[(alu4+65)];
    var val17 = data2[(alu4+66)];
    var val18 = data2[(alu4+67)];
    acc1 = (acc1+(val3*val15)+(val4*val16)+(val5*val17)+(val6*val18));
    var val19 = data2[(alu4+128)];
    var val20 = data2[(alu4+129)];
    var val21 = data2[(alu4+130)];
    var val22 = data2[(alu4+131)];
    acc2 = (acc2+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    var val23 = data2[alu4];
    acc0 = (acc0+(val0*val12)+(val11*val23)+(val1*val13)+(val2*val14));
  }
  var val24 = data3[alu1];
  data0[alu2] = (val24+(acc0*0.125f));
  data0[(alu2+5929)] = (val24+(acc1*0.125f));
  data0[(alu2+11858)] = (val24+(acc2*0.125f));
}`;

const r_231_4_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 231 */
  var lidx0 = i32(lindex.x); /* 4 */
  var acc0 = (f32(-inf(1.0)));
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var val0 = data1[((gidx0*308)+(lidx0*77)+ridx0)];
    acc0 = select(acc0,val0,(acc0<val0));
  }
  data0[(lidx0+(gidx0<<2))] = acc0;
}`;

const r_231_4_77n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 231 */
  var lidx0 = i32(lindex.x); /* 4 */
  var alu0 = (lidx0+(gidx0<<2));
  var val0 = data2[alu0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var val1 = data1[((gidx0*308)+(lidx0*77)+ridx0)];
    acc0 = (acc0+exp2(((val1-val0)*1.4426950408889634f)));
  }
  data0[alu0] = acc0;
}`;

const E_77_77_4_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var gidx1 = i32(gindex.y); /* 77 */
  var lidx0 = i32(lindex.x); /* 4 */
  var alu0 = ((gidx1*12)+(lidx0*3));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (gidx0+(gidx1*924)+(lidx0*231));
  var alu4 = (alu3+77);
  var alu5 = (alu3+154);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data2[alu1];
  var val4 = data2[alu2];
  var val5 = data2[alu0];
  var val6 = data3[alu1];
  data0[alu4] = (exp2(((val1-val3)*1.4426950408889634f))*(1/val6));
  var val7 = data3[alu2];
  data0[alu5] = (exp2(((val2-val4)*1.4426950408889634f))*(1/val7));
  var val8 = data3[alu0];
  data0[alu3] = (exp2(((val0-val5)*1.4426950408889634f))*(1/val8));
}`;

const r_3_77_4_16_77_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(4,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var gidx1 = i32(gindex.y); /* 3 */
  var lidx0 = i32(lindex.x); /* 4 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx1<<2);
  var alu1 = ((gidx0<<6)+(gidx1*19712)+(lidx0*4928)+alu0);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var alu2 = ((gidx1<<8)+(lidx0<<6)+alu0+(ridx0*768));
    var val0 = data1[((gidx0*77)+(gidx1*23716)+(lidx0*5929)+ridx0)];
    var val1 = data2[(alu2+1)];
    acc1 = (acc1+(val0*val1));
    var val2 = data2[(alu2+2)];
    acc2 = (acc2+(val0*val2));
    var val3 = data2[(alu2+3)];
    acc3 = (acc3+(val0*val3));
    var val4 = data2[alu2];
    acc0 = (acc0+(val0*val4));
  }
  data0[(alu1+1)] = acc1;
  data0[(alu1+2)] = acc2;
  data0[(alu1+3)] = acc3;
  data0[alu1] = acc0;
}`;

const r_77_16_16_192_3_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 77 */
  var lidx0 = i32(lindex.x); /* 16 */
  var alu0 = (gidx0*48);
  var alu1 = (lidx0*3);
  var alu2 = (alu0+(gidx1*768)+alu1);
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  for (var ridx0 = 0; ridx0 < 192; ridx0++) {
    var alu6 = (ridx0<<2);
    var alu7 = ((gidx0*36864)+(lidx0*2304)+alu6);
    var alu8 = ((gidx1<<6)+((ridx0>>4)*4928));
    var val0 = data2[(alu8+((alu6+1)&63))];
    var val1 = data2[(alu8+((alu6+2)&63))];
    var val2 = data2[(alu8+((alu6+3)&63))];
    var val3 = data2[(alu8+(alu6&63))];
    var val4 = data3[(alu7+1)];
    var val5 = data3[(alu7+2)];
    var val6 = data3[(alu7+3)];
    var val7 = data3[(alu7+768)];
    var val8 = data3[(alu7+769)];
    var val9 = data3[(alu7+770)];
    var val10 = data3[(alu7+771)];
    acc1 = (acc1+(val0*val8)+(val3*val7)+(val1*val9)+(val2*val10));
    var val11 = data3[(alu7+1536)];
    var val12 = data3[(alu7+1537)];
    var val13 = data3[(alu7+1538)];
    var val14 = data3[(alu7+1539)];
    acc2 = (acc2+(val0*val12)+(val3*val11)+(val1*val13)+(val2*val14));
    var val15 = data3[alu7];
    acc0 = (acc0+(val0*val4)+(val3*val15)+(val1*val5)+(val2*val6));
  }
  var val16 = data1[alu3];
  var val17 = data1[alu4];
  var val18 = data1[alu2];
  var val19 = data4[(alu5+1)];
  data0[alu3] = (val16+val19+acc1);
  var val20 = data4[(alu5+2)];
  data0[alu4] = (val17+val20+acc2);
  var val21 = data4[alu5];
  data0[alu2] = (val18+val21+acc0);
}`;

const r_77_64_16_192_3_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 77 */
  var lidx0 = i32(lindex.x); /* 16 */
  var alu0 = (gidx0*48);
  var alu1 = (lidx0*3);
  var alu2 = (alu0+(gidx1*3072)+alu1);
  var alu3 = (alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  for (var ridx0 = 0; ridx0 < 192; ridx0++) {
    var alu4 = (ridx0<<2);
    var alu5 = ((gidx0*36864)+(lidx0*2304)+alu4);
    var alu6 = ((gidx1*768)+alu4);
    var val0 = data1[(alu6+1)];
    var val1 = data1[(alu6+2)];
    var val2 = data1[(alu6+3)];
    var val3 = data1[alu6];
    var val4 = data2[(alu5+1)];
    var val5 = data2[(alu5+2)];
    var val6 = data2[(alu5+3)];
    var val7 = data2[(alu5+768)];
    var val8 = data2[(alu5+769)];
    var val9 = data2[(alu5+770)];
    var val10 = data2[(alu5+771)];
    acc1 = (acc1+(val0*val8)+(val3*val7)+(val1*val9)+(val2*val10));
    var val11 = data2[(alu5+1536)];
    var val12 = data2[(alu5+1537)];
    var val13 = data2[(alu5+1538)];
    var val14 = data2[(alu5+1539)];
    acc2 = (acc2+(val0*val12)+(val3*val11)+(val1*val13)+(val2*val14));
    var val15 = data2[alu5];
    acc0 = (acc0+(val0*val4)+(val3*val15)+(val1*val5)+(val2*val6));
  }
  var val16 = data3[(alu3+1)];
  var alu11 = (val16+acc1);
  data0[(alu2+1)] = ((1/(exp2((alu11*-2.4554669595930156f))+1.0f))*alu11);
  var val17 = data3[(alu3+2)];
  var alu13 = (val17+acc2);
  data0[(alu2+2)] = ((1/(exp2((alu13*-2.4554669595930156f))+1.0f))*alu13);
  var val18 = data3[alu3];
  var alu15 = (val18+acc0);
  data0[alu2] = ((1/(exp2((alu15*-2.4554669595930156f))+1.0f))*alu15);
}`;

const r_77_16_16_768_3_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 77 */
  var lidx0 = i32(lindex.x); /* 16 */
  var alu0 = (gidx0*48);
  var alu1 = (lidx0*3);
  var alu2 = (alu0+(gidx1*768)+alu1);
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  for (var ridx0 = 0; ridx0 < 768; ridx0++) {
    var alu6 = (ridx0<<2);
    var alu7 = ((gidx0*147456)+(lidx0*9216)+alu6);
    var alu8 = ((gidx1*3072)+alu6);
    var val0 = data2[(alu8+1)];
    var val1 = data2[(alu8+2)];
    var val2 = data2[(alu8+3)];
    var val3 = data2[alu8];
    var val4 = data3[(alu7+1)];
    var val5 = data3[(alu7+2)];
    var val6 = data3[(alu7+3)];
    var val7 = data3[(alu7+3072)];
    var val8 = data3[(alu7+3073)];
    var val9 = data3[(alu7+3074)];
    var val10 = data3[(alu7+3075)];
    acc1 = (acc1+(val0*val8)+(val3*val7)+(val1*val9)+(val2*val10));
    var val11 = data3[(alu7+6144)];
    var val12 = data3[(alu7+6145)];
    var val13 = data3[(alu7+6146)];
    var val14 = data3[(alu7+6147)];
    acc2 = (acc2+(val0*val12)+(val3*val11)+(val1*val13)+(val2*val14));
    var val15 = data3[alu7];
    acc0 = (acc0+(val0*val4)+(val3*val15)+(val1*val5)+(val2*val6));
  }
  var val16 = data1[alu3];
  var val17 = data1[alu4];
  var val18 = data1[alu2];
  var val19 = data4[(alu5+1)];
  data0[alu3] = (val16+val19+acc1);
  var val20 = data4[(alu5+2)];
  data0[alu4] = (val17+val20+acc2);
  var val21 = data4[alu5];
  data0[alu2] = (val18+val21+acc0);
}`;

    return {
      "setup": async (device, safetensor) => {
        const metadata = getTensorMetadata(safetensor[0]);

        const buf_0 = createEmptyBuf(device, 197632);;
    const buf_1 = createEmptyBuf(device, 308);;
    const buf_2 = createEmptyBuf(device, 23716);;
    const buf_3 = createEmptyBuf(device, 15138816);;
    const input0 = createEmptyBuf(device, 308);;
    const buf_4 = createWeightBuf(device, 151781376, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.embeddings.token_embedding.weight'], 'cond_stage_model.transformer.text_model.embeddings.token_embedding.weight'));
    const buf_5 = createEmptyBuf(device, 236544);;
    const buf_6 = createWeightBuf(device, 308, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.embeddings.position_embedding.arange'], 'cond_stage_model.transformer.text_model.embeddings.position_embedding.arange'));
    const buf_7 = createWeightBuf(device, 236544, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.embeddings.position_embedding.weight'], 'cond_stage_model.transformer.text_model.embeddings.position_embedding.weight'));
    const buf_8 = createEmptyBuf(device, 236544);;
    const buf_9 = createEmptyBuf(device, 308);;
    const buf_10 = createEmptyBuf(device, 308);;
    const buf_11 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm1.weight'));
    const buf_12 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm1.bias'));
    const buf_13 = createEmptyBuf(device, 236544);;
    const buf_14 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.q_proj.weight'));
    const buf_15 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.q_proj.bias'));
    const buf_16 = createEmptyBuf(device, 236544);;
    const buf_17 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.k_proj.weight'));
    const buf_18 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.k_proj.bias'));
    const buf_19 = createEmptyBuf(device, 236544);;
    const buf_20 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.v_proj.weight'));
    const buf_21 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.v_proj.bias'));
    const buf_22 = createEmptyBuf(device, 284592);;
    const buf_23 = createEmptyBuf(device, 3696);;
    const buf_24 = createEmptyBuf(device, 3696);;
    const buf_25 = createEmptyBuf(device, 284592);;
    const buf_26 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.out_proj.weight'));
    const buf_27 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.out_proj.bias'));
    const buf_28 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm2.weight'));
    const buf_29 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm2.bias'));
    const buf_30 = createEmptyBuf(device, 946176);;
    const buf_31 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc1.weight'));
    const buf_32 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc1.bias'));
    const buf_33 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc2.weight'));
    const buf_34 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc2.bias'));
    const buf_35 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm1.weight'));
    const buf_36 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm1.bias'));
    const buf_37 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.q_proj.weight'));
    const buf_38 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.q_proj.bias'));
    const buf_39 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.k_proj.weight'));
    const buf_40 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.k_proj.bias'));
    const buf_41 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.v_proj.weight'));
    const buf_42 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.v_proj.bias'));
    const buf_43 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.out_proj.weight'));
    const buf_44 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.out_proj.bias'));
    const buf_45 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm2.weight'));
    const buf_46 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm2.bias'));
    const buf_47 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc1.weight'));
    const buf_48 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc1.bias'));
    const buf_49 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc2.weight'));
    const buf_50 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc2.bias'));
    const buf_51 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm1.weight'));
    const buf_52 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm1.bias'));
    const buf_53 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.q_proj.weight'));
    const buf_54 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.q_proj.bias'));
    const buf_55 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.k_proj.weight'));
    const buf_56 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.k_proj.bias'));
    const buf_57 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.v_proj.weight'));
    const buf_58 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.v_proj.bias'));
    const buf_59 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.out_proj.weight'));
    const buf_60 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.out_proj.bias'));
    const buf_61 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm2.weight'));
    const buf_62 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm2.bias'));
    const buf_63 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc1.weight'));
    const buf_64 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc1.bias'));
    const buf_65 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc2.weight'));
    const buf_66 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc2.bias'));
    const buf_67 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm1.weight'));
    const buf_68 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm1.bias'));
    const buf_69 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.q_proj.weight'));
    const buf_70 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.q_proj.bias'));
    const buf_71 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.k_proj.weight'));
    const buf_72 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.k_proj.bias'));
    const buf_73 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.v_proj.weight'));
    const buf_74 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.v_proj.bias'));
    const buf_75 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.out_proj.weight'));
    const buf_76 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.out_proj.bias'));
    const buf_77 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm2.weight'));
    const buf_78 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm2.bias'));
    const buf_79 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc1.weight'));
    const buf_80 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc1.bias'));
    const buf_81 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc2.weight'));
    const buf_82 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc2.bias'));
    const buf_83 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm1.weight'));
    const buf_84 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm1.bias'));
    const buf_85 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.q_proj.weight'));
    const buf_86 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.q_proj.bias'));
    const buf_87 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.k_proj.weight'));
    const buf_88 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.k_proj.bias'));
    const buf_89 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.v_proj.weight'));
    const buf_90 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.v_proj.bias'));
    const buf_91 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.out_proj.weight'));
    const buf_92 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.out_proj.bias'));
    const buf_93 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm2.weight'));
    const buf_94 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm2.bias'));
    const buf_95 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc1.weight'));
    const buf_96 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc1.bias'));
    const buf_97 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc2.weight'));
    const buf_98 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc2.bias'));
    const buf_99 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm1.weight'));
    const buf_100 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm1.bias'));
    const buf_101 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.q_proj.weight'));
    const buf_102 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.q_proj.bias'));
    const buf_103 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.k_proj.weight'));
    const buf_104 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.k_proj.bias'));
    const buf_105 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.v_proj.weight'));
    const buf_106 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.v_proj.bias'));
    const buf_107 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.out_proj.weight'));
    const buf_108 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.out_proj.bias'));
    const buf_109 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm2.weight'));
    const buf_110 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm2.bias'));
    const buf_111 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc1.weight'));
    const buf_112 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc1.bias'));
    const buf_113 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc2.weight'));
    const buf_114 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc2.bias'));
    const buf_115 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm1.weight'));
    const buf_116 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm1.bias'));
    const buf_117 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.q_proj.weight'));
    const buf_118 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.q_proj.bias'));
    const buf_119 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.k_proj.weight'));
    const buf_120 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.k_proj.bias'));
    const buf_121 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.v_proj.weight'));
    const buf_122 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.v_proj.bias'));
    const buf_123 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.out_proj.weight'));
    const buf_124 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.out_proj.bias'));
    const buf_125 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm2.weight'));
    const buf_126 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm2.bias'));
    const buf_127 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc1.weight'));
    const buf_128 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc1.bias'));
    const buf_129 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc2.weight'));
    const buf_130 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc2.bias'));
    const buf_131 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm1.weight'));
    const buf_132 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm1.bias'));
    const buf_133 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.q_proj.weight'));
    const buf_134 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.q_proj.bias'));
    const buf_135 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.k_proj.weight'));
    const buf_136 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.k_proj.bias'));
    const buf_137 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.v_proj.weight'));
    const buf_138 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.v_proj.bias'));
    const buf_139 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.out_proj.weight'));
    const buf_140 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.out_proj.bias'));
    const buf_141 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm2.weight'));
    const buf_142 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm2.bias'));
    const buf_143 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc1.weight'));
    const buf_144 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc1.bias'));
    const buf_145 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc2.weight'));
    const buf_146 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc2.bias'));
    const buf_147 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm1.weight'));
    const buf_148 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm1.bias'));
    const buf_149 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.q_proj.weight'));
    const buf_150 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.q_proj.bias'));
    const buf_151 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.k_proj.weight'));
    const buf_152 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.k_proj.bias'));
    const buf_153 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.v_proj.weight'));
    const buf_154 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.v_proj.bias'));
    const buf_155 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.out_proj.weight'));
    const buf_156 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.out_proj.bias'));
    const buf_157 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm2.weight'));
    const buf_158 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm2.bias'));
    const buf_159 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc1.weight'));
    const buf_160 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc1.bias'));
    const buf_161 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc2.weight'));
    const buf_162 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc2.bias'));
    const buf_163 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm1.weight'));
    const buf_164 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm1.bias'));
    const buf_165 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.q_proj.weight'));
    const buf_166 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.q_proj.bias'));
    const buf_167 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.k_proj.weight'));
    const buf_168 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.k_proj.bias'));
    const buf_169 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.v_proj.weight'));
    const buf_170 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.v_proj.bias'));
    const buf_171 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.out_proj.weight'));
    const buf_172 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.out_proj.bias'));
    const buf_173 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm2.weight'));
    const buf_174 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm2.bias'));
    const buf_175 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc1.weight'));
    const buf_176 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc1.bias'));
    const buf_177 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc2.weight'));
    const buf_178 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc2.bias'));
    const buf_179 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm1.weight'));
    const buf_180 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm1.bias'));
    const buf_181 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.q_proj.weight'));
    const buf_182 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.q_proj.bias'));
    const buf_183 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.k_proj.weight'));
    const buf_184 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.k_proj.bias'));
    const buf_185 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.v_proj.weight'));
    const buf_186 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.v_proj.bias'));
    const buf_187 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.out_proj.weight'));
    const buf_188 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.out_proj.bias'));
    const buf_189 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm2.weight'));
    const buf_190 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm2.bias'));
    const buf_191 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc1.weight'));
    const buf_192 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc1.bias'));
    const buf_193 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc2.weight'));
    const buf_194 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc2.bias'));
    const buf_195 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm1.weight'));
    const buf_196 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm1.bias'));
    const buf_197 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.q_proj.weight'));
    const buf_198 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.q_proj.bias'));
    const buf_199 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.k_proj.weight'));
    const buf_200 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.k_proj.bias'));
    const buf_201 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.v_proj.weight'));
    const buf_202 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.v_proj.bias'));
    const buf_203 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.out_proj.weight'));
    const buf_204 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.out_proj.bias'));
    const buf_205 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm2.weight'));
    const buf_206 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm2.bias'));
    const buf_207 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc1.weight'));
    const buf_208 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc1.bias'));
    const buf_209 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc2.weight'));
    const buf_210 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc2.bias'));
    const output0 = createEmptyBuf(device, 236544);;
    const buf_211 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.final_layer_norm.weight'], 'cond_stage_model.transformer.text_model.final_layer_norm.weight'));
    const buf_212 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.final_layer_norm.bias'], 'cond_stage_model.transformer.text_model.final_layer_norm.bias'));

        const gpuWriteBuffer0 = device.createBuffer({size:input0.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
        const gpuReadBuffer = device.createBuffer({ size: output0.size, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ });

        const kernels = [r_386_32_12352_4_4, r_77_77n1, E_77_77, r_77_32_4_8_16_193_3_4, r_77_16_16_77_3n1, r_1848_32_16_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_77_4_16_3_4, r_231_4_77, r_231_4_77n1, E_77_77_4_3, r_3_77_4_16_77_4, r_77_16_16_192_3_4n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_3_4, r_77_16_16_768_3_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_77_4_16_3_4, r_231_4_77, r_231_4_77n1, E_77_77_4_3, r_3_77_4_16_77_4, r_77_16_16_192_3_4n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_3_4, r_77_16_16_768_3_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_77_4_16_3_4, r_231_4_77, r_231_4_77n1, E_77_77_4_3, r_3_77_4_16_77_4, r_77_16_16_192_3_4n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_3_4, r_77_16_16_768_3_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_77_4_16_3_4, r_231_4_77, r_231_4_77n1, E_77_77_4_3, r_3_77_4_16_77_4, r_77_16_16_192_3_4n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_3_4, r_77_16_16_768_3_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_77_4_16_3_4, r_231_4_77, r_231_4_77n1, E_77_77_4_3, r_3_77_4_16_77_4, r_77_16_16_192_3_4n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_3_4, r_77_16_16_768_3_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_77_4_16_3_4, r_231_4_77, r_231_4_77n1, E_77_77_4_3, r_3_77_4_16_77_4, r_77_16_16_192_3_4n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_3_4, r_77_16_16_768_3_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_77_4_16_3_4, r_231_4_77, r_231_4_77n1, E_77_77_4_3, r_3_77_4_16_77_4, r_77_16_16_192_3_4n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_3_4, r_77_16_16_768_3_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_77_4_16_3_4, r_231_4_77, r_231_4_77n1, E_77_77_4_3, r_3_77_4_16_77_4, r_77_16_16_192_3_4n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_3_4, r_77_16_16_768_3_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_77_4_16_3_4, r_231_4_77, r_231_4_77n1, E_77_77_4_3, r_3_77_4_16_77_4, r_77_16_16_192_3_4n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_3_4, r_77_16_16_768_3_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_77_4_16_3_4, r_231_4_77, r_231_4_77n1, E_77_77_4_3, r_3_77_4_16_77_4, r_77_16_16_192_3_4n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_3_4, r_77_16_16_768_3_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_77_4_16_3_4, r_231_4_77, r_231_4_77n1, E_77_77_4_3, r_3_77_4_16_77_4, r_77_16_16_192_3_4n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_3_4, r_77_16_16_768_3_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_16_16_192_3_4, r_77_77_4_16_3_4, r_231_4_77, r_231_4_77n1, E_77_77_4_3, r_3_77_4_16_77_4, r_77_16_16_192_3_4n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_3_4, r_77_16_16_768_3_4, r_77_16_48, r_77_16_48n1, E_77_16_16_3];
        const piplines = await Promise.all(kernels.map(name => device.createComputePipelineAsync({layout: "auto", compute: { module: device.createShaderModule({ code: name }), entryPoint: "main" }})));

        return async (data0) => {
            const commandEncoder = device.createCommandEncoder();

            await gpuWriteBuffer0.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer0.getMappedRange()).set(data0);
    gpuWriteBuffer0.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer0, 0, input0, 0, gpuWriteBuffer0.size);

            addComputePass(device, commandEncoder, piplines[0], [buf_0], [386, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1], [buf_1], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[2], [buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[3], [buf_3, buf_0, input0, buf_4], [4, 32, 77]);
        addComputePass(device, commandEncoder, piplines[4], [buf_5, buf_6, buf_1, buf_7], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[5], [buf_8, buf_3, buf_5], [1848, 1, 1]);
        addComputePass(device, commandEncoder, piplines[6], [buf_9, buf_8], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[7], [buf_10, buf_8, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[8], [buf_5, buf_8, buf_9, buf_10, buf_11, buf_12], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[9], [buf_13, buf_5, buf_14, buf_15], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[10], [buf_16, buf_5, buf_17, buf_18], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[11], [buf_19, buf_5, buf_20, buf_21], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[12], [buf_22, buf_13, buf_16, buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[13], [buf_23, buf_22], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[14], [buf_24, buf_22, buf_23], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[15], [buf_25, buf_22, buf_23, buf_24], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[16], [buf_5, buf_25, buf_19], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[17], [buf_13, buf_8, buf_5, buf_26, buf_27], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[18], [buf_9, buf_13], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[19], [buf_10, buf_13, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[20], [buf_8, buf_13, buf_9, buf_10, buf_28, buf_29], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[21], [buf_30, buf_8, buf_31, buf_32], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[22], [buf_16, buf_13, buf_30, buf_33, buf_34], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[23], [buf_9, buf_16], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[24], [buf_10, buf_16, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[25], [buf_19, buf_16, buf_9, buf_10, buf_35, buf_36], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[26], [buf_5, buf_19, buf_37, buf_38], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[27], [buf_13, buf_19, buf_39, buf_40], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[28], [buf_8, buf_19, buf_41, buf_42], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[29], [buf_22, buf_5, buf_13, buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[30], [buf_23, buf_22], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[31], [buf_24, buf_22, buf_23], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[32], [buf_25, buf_22, buf_23, buf_24], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[33], [buf_19, buf_25, buf_8], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[34], [buf_5, buf_16, buf_19, buf_43, buf_44], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[35], [buf_9, buf_5], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[36], [buf_10, buf_5, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[37], [buf_16, buf_5, buf_9, buf_10, buf_45, buf_46], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[38], [buf_30, buf_16, buf_47, buf_48], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[39], [buf_13, buf_5, buf_30, buf_49, buf_50], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[40], [buf_9, buf_13], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[41], [buf_10, buf_13, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[42], [buf_8, buf_13, buf_9, buf_10, buf_51, buf_52], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[43], [buf_19, buf_8, buf_53, buf_54], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[44], [buf_5, buf_8, buf_55, buf_56], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[45], [buf_16, buf_8, buf_57, buf_58], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[46], [buf_22, buf_19, buf_5, buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[47], [buf_23, buf_22], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[48], [buf_24, buf_22, buf_23], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[49], [buf_25, buf_22, buf_23, buf_24], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[50], [buf_8, buf_25, buf_16], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[51], [buf_19, buf_13, buf_8, buf_59, buf_60], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[52], [buf_9, buf_19], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[53], [buf_10, buf_19, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[54], [buf_13, buf_19, buf_9, buf_10, buf_61, buf_62], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[55], [buf_30, buf_13, buf_63, buf_64], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[56], [buf_5, buf_19, buf_30, buf_65, buf_66], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[57], [buf_9, buf_5], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[58], [buf_10, buf_5, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[59], [buf_16, buf_5, buf_9, buf_10, buf_67, buf_68], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[60], [buf_8, buf_16, buf_69, buf_70], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[61], [buf_19, buf_16, buf_71, buf_72], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[62], [buf_13, buf_16, buf_73, buf_74], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[63], [buf_22, buf_8, buf_19, buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[64], [buf_23, buf_22], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[65], [buf_24, buf_22, buf_23], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[66], [buf_25, buf_22, buf_23, buf_24], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[67], [buf_16, buf_25, buf_13], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[68], [buf_8, buf_5, buf_16, buf_75, buf_76], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[69], [buf_9, buf_8], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[70], [buf_10, buf_8, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[71], [buf_5, buf_8, buf_9, buf_10, buf_77, buf_78], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[72], [buf_30, buf_5, buf_79, buf_80], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[73], [buf_19, buf_8, buf_30, buf_81, buf_82], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[74], [buf_9, buf_19], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[75], [buf_10, buf_19, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[76], [buf_13, buf_19, buf_9, buf_10, buf_83, buf_84], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[77], [buf_16, buf_13, buf_85, buf_86], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[78], [buf_8, buf_13, buf_87, buf_88], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[79], [buf_5, buf_13, buf_89, buf_90], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[80], [buf_22, buf_16, buf_8, buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[81], [buf_23, buf_22], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[82], [buf_24, buf_22, buf_23], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[83], [buf_25, buf_22, buf_23, buf_24], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[84], [buf_13, buf_25, buf_5], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[85], [buf_16, buf_19, buf_13, buf_91, buf_92], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[86], [buf_9, buf_16], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[87], [buf_10, buf_16, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[88], [buf_19, buf_16, buf_9, buf_10, buf_93, buf_94], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[89], [buf_30, buf_19, buf_95, buf_96], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[90], [buf_8, buf_16, buf_30, buf_97, buf_98], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[91], [buf_9, buf_8], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[92], [buf_10, buf_8, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[93], [buf_5, buf_8, buf_9, buf_10, buf_99, buf_100], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[94], [buf_13, buf_5, buf_101, buf_102], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[95], [buf_16, buf_5, buf_103, buf_104], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[96], [buf_19, buf_5, buf_105, buf_106], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[97], [buf_22, buf_13, buf_16, buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[98], [buf_23, buf_22], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[99], [buf_24, buf_22, buf_23], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[100], [buf_25, buf_22, buf_23, buf_24], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[101], [buf_5, buf_25, buf_19], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[102], [buf_13, buf_8, buf_5, buf_107, buf_108], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[103], [buf_9, buf_13], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[104], [buf_10, buf_13, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[105], [buf_8, buf_13, buf_9, buf_10, buf_109, buf_110], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[106], [buf_30, buf_8, buf_111, buf_112], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[107], [buf_16, buf_13, buf_30, buf_113, buf_114], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[108], [buf_9, buf_16], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[109], [buf_10, buf_16, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[110], [buf_19, buf_16, buf_9, buf_10, buf_115, buf_116], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[111], [buf_5, buf_19, buf_117, buf_118], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[112], [buf_13, buf_19, buf_119, buf_120], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[113], [buf_8, buf_19, buf_121, buf_122], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[114], [buf_22, buf_5, buf_13, buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[115], [buf_23, buf_22], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[116], [buf_24, buf_22, buf_23], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[117], [buf_25, buf_22, buf_23, buf_24], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[118], [buf_19, buf_25, buf_8], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[119], [buf_5, buf_16, buf_19, buf_123, buf_124], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[120], [buf_9, buf_5], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[121], [buf_10, buf_5, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[122], [buf_16, buf_5, buf_9, buf_10, buf_125, buf_126], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[123], [buf_30, buf_16, buf_127, buf_128], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[124], [buf_13, buf_5, buf_30, buf_129, buf_130], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[125], [buf_9, buf_13], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[126], [buf_10, buf_13, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[127], [buf_8, buf_13, buf_9, buf_10, buf_131, buf_132], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[128], [buf_19, buf_8, buf_133, buf_134], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[129], [buf_5, buf_8, buf_135, buf_136], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[130], [buf_16, buf_8, buf_137, buf_138], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[131], [buf_22, buf_19, buf_5, buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[132], [buf_23, buf_22], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[133], [buf_24, buf_22, buf_23], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[134], [buf_25, buf_22, buf_23, buf_24], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[135], [buf_8, buf_25, buf_16], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[136], [buf_19, buf_13, buf_8, buf_139, buf_140], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[137], [buf_9, buf_19], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[138], [buf_10, buf_19, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[139], [buf_13, buf_19, buf_9, buf_10, buf_141, buf_142], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[140], [buf_30, buf_13, buf_143, buf_144], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[141], [buf_5, buf_19, buf_30, buf_145, buf_146], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[142], [buf_9, buf_5], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[143], [buf_10, buf_5, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[144], [buf_16, buf_5, buf_9, buf_10, buf_147, buf_148], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[145], [buf_8, buf_16, buf_149, buf_150], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[146], [buf_19, buf_16, buf_151, buf_152], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[147], [buf_13, buf_16, buf_153, buf_154], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[148], [buf_22, buf_8, buf_19, buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[149], [buf_23, buf_22], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[150], [buf_24, buf_22, buf_23], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[151], [buf_25, buf_22, buf_23, buf_24], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[152], [buf_16, buf_25, buf_13], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[153], [buf_8, buf_5, buf_16, buf_155, buf_156], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[154], [buf_9, buf_8], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[155], [buf_10, buf_8, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[156], [buf_5, buf_8, buf_9, buf_10, buf_157, buf_158], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[157], [buf_30, buf_5, buf_159, buf_160], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[158], [buf_19, buf_8, buf_30, buf_161, buf_162], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[159], [buf_9, buf_19], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[160], [buf_10, buf_19, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[161], [buf_13, buf_19, buf_9, buf_10, buf_163, buf_164], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[162], [buf_16, buf_13, buf_165, buf_166], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[163], [buf_8, buf_13, buf_167, buf_168], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[164], [buf_5, buf_13, buf_169, buf_170], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[165], [buf_22, buf_16, buf_8, buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[166], [buf_23, buf_22], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[167], [buf_24, buf_22, buf_23], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[168], [buf_25, buf_22, buf_23, buf_24], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[169], [buf_13, buf_25, buf_5], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[170], [buf_16, buf_19, buf_13, buf_171, buf_172], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[171], [buf_9, buf_16], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[172], [buf_10, buf_16, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[173], [buf_19, buf_16, buf_9, buf_10, buf_173, buf_174], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[174], [buf_30, buf_19, buf_175, buf_176], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[175], [buf_8, buf_16, buf_30, buf_177, buf_178], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[176], [buf_9, buf_8], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[177], [buf_10, buf_8, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[178], [buf_5, buf_8, buf_9, buf_10, buf_179, buf_180], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[179], [buf_13, buf_5, buf_181, buf_182], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[180], [buf_16, buf_5, buf_183, buf_184], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[181], [buf_19, buf_5, buf_185, buf_186], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[182], [buf_22, buf_13, buf_16, buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[183], [buf_23, buf_22], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[184], [buf_24, buf_22, buf_23], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[185], [buf_25, buf_22, buf_23, buf_24], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[186], [buf_5, buf_25, buf_19], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[187], [buf_13, buf_8, buf_5, buf_187, buf_188], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[188], [buf_9, buf_13], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[189], [buf_10, buf_13, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[190], [buf_8, buf_13, buf_9, buf_10, buf_189, buf_190], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[191], [buf_30, buf_8, buf_191, buf_192], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[192], [buf_16, buf_13, buf_30, buf_193, buf_194], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[193], [buf_9, buf_16], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[194], [buf_10, buf_16, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[195], [buf_19, buf_16, buf_9, buf_10, buf_195, buf_196], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[196], [buf_5, buf_19, buf_197, buf_198], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[197], [buf_13, buf_19, buf_199, buf_200], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[198], [buf_8, buf_19, buf_201, buf_202], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[199], [buf_22, buf_5, buf_13, buf_2], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[200], [buf_23, buf_22], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[201], [buf_24, buf_22, buf_23], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[202], [buf_25, buf_22, buf_23, buf_24], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[203], [buf_19, buf_25, buf_8], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[204], [buf_5, buf_16, buf_19, buf_203, buf_204], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[205], [buf_9, buf_5], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[206], [buf_10, buf_5, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[207], [buf_16, buf_5, buf_9, buf_10, buf_205, buf_206], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[208], [buf_30, buf_16, buf_207, buf_208], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[209], [buf_13, buf_5, buf_30, buf_209, buf_210], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[210], [buf_9, buf_13], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[211], [buf_10, buf_13, buf_9], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[212], [output0, buf_13, buf_9, buf_10, buf_211, buf_212], [16, 77, 1]);
            commandEncoder.copyBufferToBuffer(output0, 0, gpuReadBuffer, 0, output0.size);
            const gpuCommands = commandEncoder.finish();
            device.queue.submit([gpuCommands]);

            await gpuReadBuffer.mapAsync(GPUMapMode.READ);
            const resultBuffer = new Float32Array(gpuReadBuffer.size/4);
            resultBuffer.set(new Float32Array(gpuReadBuffer.getMappedRange()));
            gpuReadBuffer.unmap();
            return resultBuffer;
        }
      }
    }
  }
  
    var diffusor = function() {

    const E_n63 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(1) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var val0 = data1[0];
  data0[0] = sqrt(val0);
}`;

const E_n64 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(1) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var val0 = data1[0];
  data0[0] = sqrt((1.0f-val0));
}`;

const r2_160_16_10 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<i32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 160 */
  var lidx0 = i32(lindex.x); /* 16 */
  var alu0 = (gidx0+(lidx0*10)+-149);
  var alu1 = -select(alu0,0,(alu0<0));
  temp0[lidx0] = -select(alu1,-10,(alu1<-10));
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var val0 = data1[0];
    var acc0 = 0;
    for (var ridx0 = 0; ridx0 < 16; ridx0++) {
      var val1 = temp0[ridx0];
      acc0 = (acc0+val1);
    }
    var alu7 = (exp2(((f32((acc0+-1)))*-0.08304820360969871f))*val0);
    data0[gidx0] = sin((1.5707963267948966f-alu7));
    data2[gidx0] = sin(alu7);
  }
}`;

const E_1848_32_2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 1848 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = (lidx0+(gidx0<<5));
  var val0 = data1[alu0];
  data0[alu0] = val0;
  var val1 = data2[alu0];
  data0[(alu0+59136)] = val1;
}`;

const r_2_80_8_8_16_4_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 80 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<9);
  var alu1 = (lidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = (lidx1<15);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = (((gidx0+lidx0)<1)!=true);
  var alu6 = ((lidx0+(gidx0<<3))<63);
  var gidx2 = i32(gindex.z); /* 2 */
  var alu7 = (gidx1<<2);
  var alu8 = ((gidx1<<14)+(gidx2*1310720)+alu0+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 4; ridx0++) {
    var alu9 = ((gidx1*144)+(ridx0*9));
    var alu10 = (alu0+alu1+(ridx0<<12)+alu2);
    var val0 = select(0.0f, data1[(alu10+-65)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu10+-64)], alu5);
    var val2 = select(0.0f, data1[(alu10+-63)], alu5);
    var val3 = select(0.0f, data1[(alu10+-62)], alu5);
    var val4 = select(0.0f, data1[(alu10+-61)], alu5);
    var val5 = select(0.0f, data1[(alu10+-60)], (alu3&alu5));
    var val6 = select(0.0f, data1[(alu10+-1)], alu4);
    var val7 = data1[(alu10+1)];
    var val8 = data1[(alu10+2)];
    var val9 = data1[(alu10+3)];
    var val10 = select(0.0f, data1[(alu10+4)], alu3);
    var val11 = select(0.0f, data1[(alu10+63)], (alu6&alu4));
    var val12 = select(0.0f, data1[(alu10+64)], alu6);
    var val13 = select(0.0f, data1[(alu10+65)], alu6);
    var val14 = select(0.0f, data1[(alu10+66)], alu6);
    var val15 = select(0.0f, data1[(alu10+67)], alu6);
    var val16 = select(0.0f, data1[(alu10+68)], (alu3&alu6));
    var val17 = data1[alu10];
    var val18 = data2[(alu9+1)];
    var val19 = data2[(alu9+2)];
    var val20 = data2[(alu9+3)];
    var val21 = data2[(alu9+4)];
    var val22 = data2[(alu9+5)];
    var val23 = data2[(alu9+6)];
    var val24 = data2[(alu9+7)];
    var val25 = data2[(alu9+8)];
    var val26 = data2[(alu9+36)];
    var val27 = data2[(alu9+37)];
    var val28 = data2[(alu9+38)];
    var val29 = data2[(alu9+39)];
    var val30 = data2[(alu9+40)];
    var val31 = data2[(alu9+41)];
    var val32 = data2[(alu9+42)];
    var val33 = data2[(alu9+43)];
    var val34 = data2[(alu9+44)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu9+72)];
    var val36 = data2[(alu9+73)];
    var val37 = data2[(alu9+74)];
    var val38 = data2[(alu9+75)];
    var val39 = data2[(alu9+76)];
    var val40 = data2[(alu9+77)];
    var val41 = data2[(alu9+78)];
    var val42 = data2[(alu9+79)];
    var val43 = data2[(alu9+80)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu9+108)];
    var val45 = data2[(alu9+109)];
    var val46 = data2[(alu9+110)];
    var val47 = data2[(alu9+111)];
    var val48 = data2[(alu9+112)];
    var val49 = data2[(alu9+113)];
    var val50 = data2[(alu9+114)];
    var val51 = data2[(alu9+115)];
    var val52 = data2[(alu9+116)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu9];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[(alu7+1)];
  data0[(alu8+4096)] = (val54+acc1);
  data0[(alu8+4097)] = (val54+acc5);
  data0[(alu8+4098)] = (val54+acc9);
  data0[(alu8+4099)] = (val54+acc13);
  var val55 = data3[(alu7+2)];
  data0[(alu8+8192)] = (val55+acc2);
  data0[(alu8+8193)] = (val55+acc6);
  data0[(alu8+8194)] = (val55+acc10);
  data0[(alu8+8195)] = (val55+acc14);
  var val56 = data3[(alu7+3)];
  data0[(alu8+12288)] = (val56+acc3);
  data0[(alu8+12289)] = (val56+acc7);
  data0[(alu8+12290)] = (val56+acc11);
  data0[(alu8+12291)] = (val56+acc15);
  var val57 = data3[alu7];
  data0[(alu8+1)] = (val57+acc4);
  data0[(alu8+2)] = (val57+acc8);
  data0[(alu8+3)] = (val57+acc12);
  data0[alu8] = (val57+acc0);
}`;

const E_5_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 5 */
  var lidx0 = i32(lindex.x); /* 16 */
  var alu0 = ((lidx0+(gidx0<<4))<40);
  var alu1 = (alu0!=true);
  var alu2 = ((gidx0<<6)+(lidx0<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = select(0.0f, data1[alu3], alu0);
  var val1 = select(0.0f, data1[alu4], alu0);
  var val2 = select(0.0f, data1[alu5], alu0);
  var val3 = select(0.0f, data1[alu2], alu0);
  var val4 = select(0.0f, data2[(alu2+-160)], alu1);
  data0[alu2] = (val3+val4);
  var val5 = select(0.0f, data2[(alu2+-159)], alu1);
  data0[alu3] = (val0+val5);
  var val6 = select(0.0f, data2[(alu2+-158)], alu1);
  data0[alu4] = (val1+val6);
  var val7 = select(0.0f, data2[(alu2+-157)], alu1);
  data0[alu5] = (val2+val7);
}`;

const r_77_5_2_16_192_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(2,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 5 */
  var gidx1 = i32(gindex.y); /* 77 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1*640)+(lidx0*320)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 192; ridx0++) {
    var alu1 = (ridx0<<2);
    var alu2 = ((gidx0*49152)+(lidx1*3072)+alu1);
    var alu3 = ((gidx1*1536)+(lidx0*768)+alu1);
    var val0 = data1[(alu3+1)];
    var val1 = data1[(alu3+2)];
    var val2 = data1[(alu3+3)];
    var val3 = data1[alu3];
    var val4 = data2[(alu2+1)];
    var val5 = data2[(alu2+2)];
    var val6 = data2[(alu2+3)];
    var val7 = data2[(alu2+768)];
    var val8 = data2[(alu2+769)];
    var val9 = data2[(alu2+770)];
    var val10 = data2[(alu2+771)];
    acc1 = (acc1+(val0*val8)+(val3*val7)+(val1*val9)+(val2*val10));
    var val11 = data2[(alu2+1536)];
    var val12 = data2[(alu2+1537)];
    var val13 = data2[(alu2+1538)];
    var val14 = data2[(alu2+1539)];
    acc2 = (acc2+(val0*val12)+(val3*val11)+(val1*val13)+(val2*val14));
    var val15 = data2[(alu2+2304)];
    var val16 = data2[(alu2+2305)];
    var val17 = data2[(alu2+2306)];
    var val18 = data2[(alu2+2307)];
    acc3 = (acc3+(val0*val16)+(val3*val15)+(val1*val17)+(val2*val18));
    var val19 = data2[alu2];
    acc0 = (acc0+(val0*val4)+(val3*val19)+(val1*val5)+(val2*val6));
  }
  data0[(alu0+1)] = acc1;
  data0[(alu0+2)] = acc2;
  data0[(alu0+3)] = acc3;
  data0[alu0] = acc0;
}`;

const r_77_10_2_16_192_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(2,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 10 */
  var gidx1 = i32(gindex.y); /* 77 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1*1280)+(lidx0*640)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 192; ridx0++) {
    var alu1 = (ridx0<<2);
    var alu2 = ((gidx0*49152)+(lidx1*3072)+alu1);
    var alu3 = ((gidx1*1536)+(lidx0*768)+alu1);
    var val0 = data1[(alu3+1)];
    var val1 = data1[(alu3+2)];
    var val2 = data1[(alu3+3)];
    var val3 = data1[alu3];
    var val4 = data2[(alu2+1)];
    var val5 = data2[(alu2+2)];
    var val6 = data2[(alu2+3)];
    var val7 = data2[(alu2+768)];
    var val8 = data2[(alu2+769)];
    var val9 = data2[(alu2+770)];
    var val10 = data2[(alu2+771)];
    acc1 = (acc1+(val0*val8)+(val3*val7)+(val1*val9)+(val2*val10));
    var val11 = data2[(alu2+1536)];
    var val12 = data2[(alu2+1537)];
    var val13 = data2[(alu2+1538)];
    var val14 = data2[(alu2+1539)];
    acc2 = (acc2+(val0*val12)+(val3*val11)+(val1*val13)+(val2*val14));
    var val15 = data2[(alu2+2304)];
    var val16 = data2[(alu2+2305)];
    var val17 = data2[(alu2+2306)];
    var val18 = data2[(alu2+2307)];
    acc3 = (acc3+(val0*val16)+(val3*val15)+(val1*val17)+(val2*val18));
    var val19 = data2[alu2];
    acc0 = (acc0+(val0*val4)+(val3*val19)+(val1*val5)+(val2*val6));
  }
  data0[(alu0+1)] = acc1;
  data0[(alu0+2)] = acc2;
  data0[(alu0+3)] = acc3;
  data0[alu0] = acc0;
}`;

const r_77_20_2_16_192_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(2,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 77 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1*2560)+(lidx0*1280)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 192; ridx0++) {
    var alu1 = (ridx0<<2);
    var alu2 = ((gidx0*49152)+(lidx1*3072)+alu1);
    var alu3 = ((gidx1*1536)+(lidx0*768)+alu1);
    var val0 = data1[(alu3+1)];
    var val1 = data1[(alu3+2)];
    var val2 = data1[(alu3+3)];
    var val3 = data1[alu3];
    var val4 = data2[(alu2+1)];
    var val5 = data2[(alu2+2)];
    var val6 = data2[(alu2+3)];
    var val7 = data2[(alu2+768)];
    var val8 = data2[(alu2+769)];
    var val9 = data2[(alu2+770)];
    var val10 = data2[(alu2+771)];
    acc1 = (acc1+(val0*val8)+(val3*val7)+(val1*val9)+(val2*val10));
    var val11 = data2[(alu2+1536)];
    var val12 = data2[(alu2+1537)];
    var val13 = data2[(alu2+1538)];
    var val14 = data2[(alu2+1539)];
    acc2 = (acc2+(val0*val12)+(val3*val11)+(val1*val13)+(val2*val14));
    var val15 = data2[(alu2+2304)];
    var val16 = data2[(alu2+2305)];
    var val17 = data2[(alu2+2306)];
    var val18 = data2[(alu2+2307)];
    acc3 = (acc3+(val0*val16)+(val3*val15)+(val1*val17)+(val2*val18));
    var val19 = data2[alu2];
    acc0 = (acc0+(val0*val4)+(val3*val19)+(val1*val5)+(val2*val6));
  }
  data0[(alu0+1)] = acc1;
  data0[(alu0+2)] = acc2;
  data0[(alu0+3)] = acc3;
  data0[alu0] = acc0;
}`;

const r_512_32_40_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 512 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 40; ridx0++) {
    var alu0 = ((gidx0*5120)+(lidx0*160)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    acc0 = (acc0+val2+val1+val0+val3);
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_80_4_8_40_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 128>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(4,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var lidx0 = i32(lindex.x); /* 4 */
  var alu0 = (lidx0<<5);
  var gidx0 = i32(gindex.x); /* 80 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu1 = (lidx0+(gidx0<<4));
  var alu2 = (alu1+4);
  var alu3 = (alu1+8);
  var alu4 = (alu1+12);
  var alu5 = (alu0+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 40; ridx0++) {
    var alu6 = (ridx0<<3);
    var alu7 = (lidx1+(gidx0*5120)+(lidx0*320)+alu6);
    var val0 = data1[(lidx1+alu6)];
    var val1 = data2[alu7];
    acc0 = (acc0+(val0*val1));
    var val2 = data2[(alu7+1280)];
    acc1 = (acc1+(val0*val2));
    var val3 = data2[(alu7+2560)];
    acc2 = (acc2+(val0*val3));
    var val4 = data2[(alu7+3840)];
    acc3 = (acc3+(val0*val4));
  }
  temp0[(alu5+1)] = acc1;
  temp0[(alu5+2)] = acc2;
  temp0[(alu5+3)] = acc3;
  temp0[alu5] = acc0;
  workgroupBarrier();
  if (((bool(lidx1))!=true)) {
    var val5 = data3[alu1];
    var val6 = data3[alu2];
    var val7 = data3[alu3];
    var val8 = data3[alu4];
    var acc4 = 0.0f;
    var acc5 = 0.0f;
    var acc6 = 0.0f;
    var acc7 = 0.0f;
    for (var ridx1 = 0; ridx1 < 8; ridx1++) {
      var alu19 = (alu0+(ridx1<<2));
      var val9 = temp0[(alu19+1)];
      acc5 = (acc5+val9);
      var val10 = temp0[(alu19+2)];
      acc6 = (acc6+val10);
      var val11 = temp0[(alu19+3)];
      acc7 = (acc7+val11);
      var val12 = temp0[alu19];
      acc4 = (acc4+val12);
    }
    var alu25 = (val5+acc4);
    var alu26 = (val6+acc5);
    var alu27 = (val7+acc6);
    var alu28 = (val8+acc7);
    data0[alu1] = ((1/(exp2((alu25*-1.4426950408889634f))+1.0f))*alu25);
    data0[alu2] = ((1/(exp2((alu26*-1.4426950408889634f))+1.0f))*alu26);
    data0[alu3] = ((1/(exp2((alu27*-1.4426950408889634f))+1.0f))*alu27);
    data0[alu4] = ((1/(exp2((alu28*-1.4426950408889634f))+1.0f))*alu28);
  }
}`;

const r_64_16_16 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 16; ridx0++) {
    var val0 = data1[((gidx0<<8)+(lidx0<<4)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*2.441406286379788e-05f);
  }
}`;

const r_80_4_8_160_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 128>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(4,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var lidx0 = i32(lindex.x); /* 4 */
  var alu0 = (lidx0<<5);
  var gidx0 = i32(gindex.x); /* 80 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu1 = (lidx0+(gidx0<<4));
  var alu2 = (alu1+4);
  var alu3 = (alu1+8);
  var alu4 = (alu1+12);
  var alu5 = (alu0+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var alu6 = (ridx0<<3);
    var alu7 = (lidx1+(gidx0*20480)+(lidx0*1280)+alu6);
    var val0 = data1[(lidx1+alu6)];
    var val1 = data2[alu7];
    acc0 = (acc0+(val0*val1));
    var val2 = data2[(alu7+5120)];
    acc1 = (acc1+(val0*val2));
    var val3 = data2[(alu7+10240)];
    acc2 = (acc2+(val0*val3));
    var val4 = data2[(alu7+15360)];
    acc3 = (acc3+(val0*val4));
  }
  temp0[(alu5+1)] = acc1;
  temp0[(alu5+2)] = acc2;
  temp0[(alu5+3)] = acc3;
  temp0[alu5] = acc0;
  workgroupBarrier();
  if (((bool(lidx1))!=true)) {
    var val5 = data3[alu1];
    var val6 = data3[alu2];
    var val7 = data3[alu3];
    var val8 = data3[alu4];
    var acc4 = 0.0f;
    var acc5 = 0.0f;
    var acc6 = 0.0f;
    var acc7 = 0.0f;
    for (var ridx1 = 0; ridx1 < 8; ridx1++) {
      var alu19 = (alu0+(ridx1<<2));
      var val9 = temp0[(alu19+1)];
      acc5 = (acc5+val9);
      var val10 = temp0[(alu19+2)];
      acc6 = (acc6+val10);
      var val11 = temp0[(alu19+3)];
      acc7 = (acc7+val11);
      var val12 = temp0[alu19];
      acc4 = (acc4+val12);
    }
    var alu25 = (val5+acc4);
    var alu26 = (val6+acc5);
    var alu27 = (val7+acc6);
    var alu28 = (val8+acc7);
    data0[alu1] = ((1/(exp2((alu25*-1.4426950408889634f))+1.0f))*alu25);
    data0[alu2] = ((1/(exp2((alu26*-1.4426950408889634f))+1.0f))*alu26);
    data0[alu3] = ((1/(exp2((alu27*-1.4426950408889634f))+1.0f))*alu27);
    data0[alu4] = ((1/(exp2((alu28*-1.4426950408889634f))+1.0f))*alu28);
  }
}`;

const r_8_4_8_16_40_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 8 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1<<11)+(lidx0<<8)+(lidx1<<2));
  var val0 = data2[(lidx0+(gidx1<<3))];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 40; ridx0++) {
    var alu1 = ((gidx0*10240)+(gidx1*327680)+(lidx0*40960)+(lidx1*640)+(ridx0<<2));
    var val1 = data1[(alu1+1)];
    var alu2 = (val1-val0);
    var val2 = data1[(alu1+2)];
    var alu3 = (val2-val0);
    var val3 = data1[(alu1+3)];
    var alu4 = (val3-val0);
    var val4 = data1[(alu1+160)];
    var alu5 = (val4-val0);
    var val5 = data1[(alu1+161)];
    var alu6 = (val5-val0);
    var val6 = data1[(alu1+162)];
    var alu7 = (val6-val0);
    var val7 = data1[(alu1+163)];
    var alu8 = (val7-val0);
    acc1 = (acc1+(alu5*alu5)+(alu6*alu6)+(alu7*alu7)+(alu8*alu8));
    var val8 = data1[(alu1+320)];
    var alu10 = (val8-val0);
    var val9 = data1[(alu1+321)];
    var alu11 = (val9-val0);
    var val10 = data1[(alu1+322)];
    var alu12 = (val10-val0);
    var val11 = data1[(alu1+323)];
    var alu13 = (val11-val0);
    acc2 = (acc2+(alu10*alu10)+(alu11*alu11)+(alu12*alu12)+(alu13*alu13));
    var val12 = data1[(alu1+480)];
    var alu15 = (val12-val0);
    var val13 = data1[(alu1+481)];
    var alu16 = (val13-val0);
    var val14 = data1[(alu1+482)];
    var alu17 = (val14-val0);
    var val15 = data1[(alu1+483)];
    var alu18 = (val15-val0);
    acc3 = (acc3+(alu15*alu15)+(alu16*alu16)+(alu17*alu17)+(alu18*alu18));
    var val16 = data1[alu1];
    var alu20 = (val16-val0);
    acc0 = (acc0+(alu2*alu2)+(alu20*alu20)+(alu3*alu3)+(alu4*alu4));
  }
  data0[(alu0+1)] = acc1;
  data0[(alu0+2)] = acc2;
  data0[(alu0+3)] = acc3;
  data0[alu0] = acc0;
}`;

const r_20_4_8_160_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 128>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(4,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var lidx0 = i32(lindex.x); /* 4 */
  var alu0 = (lidx0<<5);
  var gidx0 = i32(gindex.x); /* 20 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu1 = (lidx0+(gidx0<<4));
  var alu2 = (alu1+4);
  var alu3 = (alu1+8);
  var alu4 = (alu1+12);
  var alu5 = (alu0+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var alu6 = (ridx0<<3);
    var alu7 = (lidx1+(gidx0*20480)+(lidx0*1280)+alu6);
    var val0 = data1[(lidx1+alu6)];
    var val1 = data2[alu7];
    acc0 = (acc0+(val0*val1));
    var val2 = data2[(alu7+5120)];
    acc1 = (acc1+(val0*val2));
    var val3 = data2[(alu7+10240)];
    acc2 = (acc2+(val0*val3));
    var val4 = data2[(alu7+15360)];
    acc3 = (acc3+(val0*val4));
  }
  temp0[(alu5+1)] = acc1;
  temp0[(alu5+2)] = acc2;
  temp0[(alu5+3)] = acc3;
  temp0[alu5] = acc0;
  workgroupBarrier();
  if (((bool(lidx1))!=true)) {
    var val5 = data3[alu1];
    var val6 = data3[alu2];
    var val7 = data3[alu3];
    var val8 = data3[alu4];
    var acc4 = 0.0f;
    var acc5 = 0.0f;
    var acc6 = 0.0f;
    var acc7 = 0.0f;
    for (var ridx1 = 0; ridx1 < 8; ridx1++) {
      var alu19 = (alu0+(ridx1<<2));
      var val9 = temp0[(alu19+1)];
      acc5 = (acc5+val9);
      var val10 = temp0[(alu19+2)];
      acc6 = (acc6+val10);
      var val11 = temp0[(alu19+3)];
      acc7 = (acc7+val11);
      var val12 = temp0[alu19];
      acc4 = (acc4+val12);
    }
    data0[alu1] = (val5+acc4);
    data0[alu2] = (val6+acc5);
    data0[alu3] = (val7+acc6);
    data0[alu4] = (val8+acc7);
  }
}`;

const r_40_4_8_160_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 128>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(4,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var lidx0 = i32(lindex.x); /* 4 */
  var alu0 = (lidx0<<5);
  var gidx0 = i32(gindex.x); /* 40 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu1 = (lidx0+(gidx0<<4));
  var alu2 = (alu1+4);
  var alu3 = (alu1+8);
  var alu4 = (alu1+12);
  var alu5 = (alu0+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var alu6 = (ridx0<<3);
    var alu7 = (lidx1+(gidx0*20480)+(lidx0*1280)+alu6);
    var val0 = data1[(lidx1+alu6)];
    var val1 = data2[alu7];
    acc0 = (acc0+(val0*val1));
    var val2 = data2[(alu7+5120)];
    acc1 = (acc1+(val0*val2));
    var val3 = data2[(alu7+10240)];
    acc2 = (acc2+(val0*val3));
    var val4 = data2[(alu7+15360)];
    acc3 = (acc3+(val0*val4));
  }
  temp0[(alu5+1)] = acc1;
  temp0[(alu5+2)] = acc2;
  temp0[(alu5+3)] = acc3;
  temp0[alu5] = acc0;
  workgroupBarrier();
  if (((bool(lidx1))!=true)) {
    var val5 = data3[alu1];
    var val6 = data3[alu2];
    var val7 = data3[alu3];
    var val8 = data3[alu4];
    var acc4 = 0.0f;
    var acc5 = 0.0f;
    var acc6 = 0.0f;
    var acc7 = 0.0f;
    for (var ridx1 = 0; ridx1 < 8; ridx1++) {
      var alu19 = (alu0+(ridx1<<2));
      var val9 = temp0[(alu19+1)];
      acc5 = (acc5+val9);
      var val10 = temp0[(alu19+2)];
      acc6 = (acc6+val10);
      var val11 = temp0[(alu19+3)];
      acc7 = (acc7+val11);
      var val12 = temp0[alu19];
      acc4 = (acc4+val12);
    }
    data0[alu1] = (val5+acc4);
    data0[alu2] = (val6+acc5);
    data0[alu3] = (val7+acc6);
    data0[alu4] = (val8+acc7);
  }
}`;

const r_80_4_8_160_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 128>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(4,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var lidx0 = i32(lindex.x); /* 4 */
  var alu0 = (lidx0<<5);
  var gidx0 = i32(gindex.x); /* 80 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu1 = (lidx0+(gidx0<<4));
  var alu2 = (alu1+4);
  var alu3 = (alu1+8);
  var alu4 = (alu1+12);
  var alu5 = (alu0+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var alu6 = (ridx0<<3);
    var alu7 = (lidx1+(gidx0*20480)+(lidx0*1280)+alu6);
    var val0 = data1[(lidx1+alu6)];
    var val1 = data2[alu7];
    acc0 = (acc0+(val0*val1));
    var val2 = data2[(alu7+5120)];
    acc1 = (acc1+(val0*val2));
    var val3 = data2[(alu7+10240)];
    acc2 = (acc2+(val0*val3));
    var val4 = data2[(alu7+15360)];
    acc3 = (acc3+(val0*val4));
  }
  temp0[(alu5+1)] = acc1;
  temp0[(alu5+2)] = acc2;
  temp0[(alu5+3)] = acc3;
  temp0[alu5] = acc0;
  workgroupBarrier();
  if (((bool(lidx1))!=true)) {
    var val5 = data3[alu1];
    var val6 = data3[alu2];
    var val7 = data3[alu3];
    var val8 = data3[alu4];
    var acc4 = 0.0f;
    var acc5 = 0.0f;
    var acc6 = 0.0f;
    var acc7 = 0.0f;
    for (var ridx1 = 0; ridx1 < 8; ridx1++) {
      var alu19 = (alu0+(ridx1<<2));
      var val9 = temp0[(alu19+1)];
      acc5 = (acc5+val9);
      var val10 = temp0[(alu19+2)];
      acc6 = (acc6+val10);
      var val11 = temp0[(alu19+3)];
      acc7 = (acc7+val11);
      var val12 = temp0[alu19];
      acc4 = (acc4+val12);
    }
    data0[alu1] = (val5+acc4);
    data0[alu2] = (val6+acc5);
    data0[alu3] = (val7+acc6);
    data0[alu4] = (val8+acc7);
  }
}`;

const r_64_16_16n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 16; ridx0++) {
    var val0 = data1[((gidx0<<8)+(lidx0<<4)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = sqrt((1/((acc1*2.441406286379788e-05f)+1e-05f)));
  }
}`;

const E_2_40_64_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 40 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(alu0/10));
  var alu2 = ((gidx1<<15)+(gidx2*1310720)+(gidx0<<6)+(lidx0<<12)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_80_8_8_16_320_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 80 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*1310720);
  var alu1 = (gidx0<<9);
  var alu2 = (lidx0<<6);
  var alu3 = (lidx1<<2);
  var alu4 = (lidx1<15);
  var alu5 = ((lidx1<1)!=true);
  var alu6 = (((gidx0+lidx0)<1)!=true);
  var alu7 = ((lidx0+(gidx0<<3))<63);
  var alu8 = (gidx1<<2);
  var alu9 = (alu8+1);
  var alu10 = (alu8+2);
  var alu11 = (alu8+3);
  var alu12 = ((gidx1<<14)+alu0+alu1+alu2+alu3);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu13 = ((gidx1*11520)+(ridx0*9));
    var alu14 = (alu1+alu2+alu0+(ridx0<<12)+alu3);
    var val0 = select(0.0f, data1[(alu14+-65)], (alu5&alu6));
    var val1 = select(0.0f, data1[(alu14+-64)], alu6);
    var val2 = select(0.0f, data1[(alu14+-63)], alu6);
    var val3 = select(0.0f, data1[(alu14+-62)], alu6);
    var val4 = select(0.0f, data1[(alu14+-61)], alu6);
    var val5 = select(0.0f, data1[(alu14+-60)], (alu4&alu6));
    var val6 = select(0.0f, data1[(alu14+-1)], alu5);
    var val7 = data1[(alu14+1)];
    var val8 = data1[(alu14+2)];
    var val9 = data1[(alu14+3)];
    var val10 = select(0.0f, data1[(alu14+4)], alu4);
    var val11 = select(0.0f, data1[(alu14+63)], (alu7&alu5));
    var val12 = select(0.0f, data1[(alu14+64)], alu7);
    var val13 = select(0.0f, data1[(alu14+65)], alu7);
    var val14 = select(0.0f, data1[(alu14+66)], alu7);
    var val15 = select(0.0f, data1[(alu14+67)], alu7);
    var val16 = select(0.0f, data1[(alu14+68)], (alu4&alu7));
    var val17 = data1[alu14];
    var val18 = data2[(alu13+1)];
    var val19 = data2[(alu13+2)];
    var val20 = data2[(alu13+3)];
    var val21 = data2[(alu13+4)];
    var val22 = data2[(alu13+5)];
    var val23 = data2[(alu13+6)];
    var val24 = data2[(alu13+7)];
    var val25 = data2[(alu13+8)];
    var val26 = data2[(alu13+2880)];
    var val27 = data2[(alu13+2881)];
    var val28 = data2[(alu13+2882)];
    var val29 = data2[(alu13+2883)];
    var val30 = data2[(alu13+2884)];
    var val31 = data2[(alu13+2885)];
    var val32 = data2[(alu13+2886)];
    var val33 = data2[(alu13+2887)];
    var val34 = data2[(alu13+2888)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu13+5760)];
    var val36 = data2[(alu13+5761)];
    var val37 = data2[(alu13+5762)];
    var val38 = data2[(alu13+5763)];
    var val39 = data2[(alu13+5764)];
    var val40 = data2[(alu13+5765)];
    var val41 = data2[(alu13+5766)];
    var val42 = data2[(alu13+5767)];
    var val43 = data2[(alu13+5768)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu13+8640)];
    var val45 = data2[(alu13+8641)];
    var val46 = data2[(alu13+8642)];
    var val47 = data2[(alu13+8643)];
    var val48 = data2[(alu13+8644)];
    var val49 = data2[(alu13+8645)];
    var val50 = data2[(alu13+8646)];
    var val51 = data2[(alu13+8647)];
    var val52 = data2[(alu13+8648)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu13];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[alu9];
  var val55 = data3[alu10];
  var val56 = data3[alu11];
  var val57 = data3[alu8];
  var val58 = data4[alu9];
  data0[(alu12+4096)] = (val58+val54+acc1);
  data0[(alu12+4097)] = (val58+val54+acc5);
  data0[(alu12+4098)] = (val58+val54+acc9);
  data0[(alu12+4099)] = (val58+val54+acc13);
  var val59 = data4[alu10];
  data0[(alu12+8192)] = (val59+val55+acc2);
  data0[(alu12+8193)] = (val59+val55+acc6);
  data0[(alu12+8194)] = (val59+val55+acc10);
  data0[(alu12+8195)] = (val59+val55+acc14);
  var val60 = data4[alu11];
  data0[(alu12+12288)] = (val60+val56+acc3);
  data0[(alu12+12289)] = (val60+val56+acc7);
  data0[(alu12+12290)] = (val60+val56+acc11);
  data0[(alu12+12291)] = (val60+val56+acc15);
  var val61 = data4[alu8];
  data0[(alu12+1)] = (val61+val57+acc4);
  data0[(alu12+2)] = (val61+val57+acc8);
  data0[(alu12+3)] = (val61+val57+acc12);
  data0[alu12] = (val61+val57+acc0);
}`;

const r_2_80_8_8_16_320_4_4_3_3n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 80 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*1310720);
  var alu1 = (gidx0<<9);
  var alu2 = (lidx0<<6);
  var alu3 = (lidx1<<2);
  var alu4 = (lidx1<15);
  var alu5 = ((lidx1<1)!=true);
  var alu6 = (((gidx0+lidx0)<1)!=true);
  var alu7 = ((lidx0+(gidx0<<3))<63);
  var alu8 = (gidx1<<2);
  var alu9 = ((gidx1<<14)+alu0+alu1+alu2+alu3);
  var alu10 = (alu9+1);
  var alu11 = (alu9+2);
  var alu12 = (alu9+3);
  var alu13 = (alu9+4096);
  var alu14 = (alu9+4097);
  var alu15 = (alu9+4098);
  var alu16 = (alu9+4099);
  var alu17 = (alu9+8192);
  var alu18 = (alu9+8193);
  var alu19 = (alu9+8194);
  var alu20 = (alu9+8195);
  var alu21 = (alu9+12288);
  var alu22 = (alu9+12289);
  var alu23 = (alu9+12290);
  var alu24 = (alu9+12291);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu25 = ((gidx1*11520)+(ridx0*9));
    var alu26 = (alu1+alu2+alu0+(ridx0<<12)+alu3);
    var val0 = select(0.0f, data2[(alu26+-65)], (alu5&alu6));
    var val1 = select(0.0f, data2[(alu26+-64)], alu6);
    var val2 = select(0.0f, data2[(alu26+-63)], alu6);
    var val3 = select(0.0f, data2[(alu26+-62)], alu6);
    var val4 = select(0.0f, data2[(alu26+-61)], alu6);
    var val5 = select(0.0f, data2[(alu26+-60)], (alu4&alu6));
    var val6 = select(0.0f, data2[(alu26+-1)], alu5);
    var val7 = data2[(alu26+1)];
    var val8 = data2[(alu26+2)];
    var val9 = data2[(alu26+3)];
    var val10 = select(0.0f, data2[(alu26+4)], alu4);
    var val11 = select(0.0f, data2[(alu26+63)], (alu7&alu5));
    var val12 = select(0.0f, data2[(alu26+64)], alu7);
    var val13 = select(0.0f, data2[(alu26+65)], alu7);
    var val14 = select(0.0f, data2[(alu26+66)], alu7);
    var val15 = select(0.0f, data2[(alu26+67)], alu7);
    var val16 = select(0.0f, data2[(alu26+68)], (alu4&alu7));
    var val17 = data2[alu26];
    var val18 = data3[(alu25+1)];
    var val19 = data3[(alu25+2)];
    var val20 = data3[(alu25+3)];
    var val21 = data3[(alu25+4)];
    var val22 = data3[(alu25+5)];
    var val23 = data3[(alu25+6)];
    var val24 = data3[(alu25+7)];
    var val25 = data3[(alu25+8)];
    var val26 = data3[(alu25+2880)];
    var val27 = data3[(alu25+2881)];
    var val28 = data3[(alu25+2882)];
    var val29 = data3[(alu25+2883)];
    var val30 = data3[(alu25+2884)];
    var val31 = data3[(alu25+2885)];
    var val32 = data3[(alu25+2886)];
    var val33 = data3[(alu25+2887)];
    var val34 = data3[(alu25+2888)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data3[(alu25+5760)];
    var val36 = data3[(alu25+5761)];
    var val37 = data3[(alu25+5762)];
    var val38 = data3[(alu25+5763)];
    var val39 = data3[(alu25+5764)];
    var val40 = data3[(alu25+5765)];
    var val41 = data3[(alu25+5766)];
    var val42 = data3[(alu25+5767)];
    var val43 = data3[(alu25+5768)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data3[(alu25+8640)];
    var val45 = data3[(alu25+8641)];
    var val46 = data3[(alu25+8642)];
    var val47 = data3[(alu25+8643)];
    var val48 = data3[(alu25+8644)];
    var val49 = data3[(alu25+8645)];
    var val50 = data3[(alu25+8646)];
    var val51 = data3[(alu25+8647)];
    var val52 = data3[(alu25+8648)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data3[alu25];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data1[alu10];
  var val55 = data1[alu11];
  var val56 = data1[alu12];
  var val57 = data1[alu13];
  var val58 = data1[alu14];
  var val59 = data1[alu15];
  var val60 = data1[alu16];
  var val61 = data1[alu17];
  var val62 = data1[alu18];
  var val63 = data1[alu19];
  var val64 = data1[alu20];
  var val65 = data1[alu21];
  var val66 = data1[alu22];
  var val67 = data1[alu23];
  var val68 = data1[alu24];
  var val69 = data1[alu9];
  var val70 = data4[(alu8+1)];
  data0[alu13] = (val57+val70+acc1);
  data0[alu14] = (val58+val70+acc5);
  data0[alu15] = (val59+val70+acc9);
  data0[alu16] = (val60+val70+acc13);
  var val71 = data4[(alu8+2)];
  data0[alu17] = (val61+val71+acc2);
  data0[alu18] = (val62+val71+acc6);
  data0[alu19] = (val63+val71+acc10);
  data0[alu20] = (val64+val71+acc14);
  var val72 = data4[(alu8+3)];
  data0[alu21] = (val65+val72+acc3);
  data0[alu22] = (val66+val72+acc7);
  data0[alu23] = (val67+val72+acc11);
  data0[alu24] = (val68+val72+acc15);
  var val73 = data4[alu8];
  data0[alu10] = (val54+val73+acc4);
  data0[alu11] = (val55+val73+acc8);
  data0[alu12] = (val56+val73+acc12);
  data0[alu9] = (val69+val73+acc0);
}`;

const E_2_40_64_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 40 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(alu0/10));
  var alu2 = ((gidx1<<15)+(gidx2*1310720)+(gidx0<<6)+(lidx0<<12)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  data0[alu3] = (val7+(val6*val5*(val0-val4)));
  data0[alu4] = (val7+(val6*val5*(val1-val4)));
  data0[alu5] = (val7+(val6*val5*(val2-val4)));
  data0[alu2] = (val7+(val6*val5*(val3-val4)));
}`;

const r_2_10_64_8_16_80_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 10 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*1310720);
  var alu1 = (gidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx1<<5)+(lidx0<<2));
  var alu4 = ((gidx1<<17)+alu0+alu1+(lidx0<<14)+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu5 = ((gidx1*10240)+(lidx0*1280)+(ridx0<<2));
    var alu6 = (alu1+alu0+alu2+(ridx0<<14));
    var val0 = data1[(alu6+1)];
    var val1 = data1[(alu6+2)];
    var val2 = data1[(alu6+3)];
    var val3 = data1[(alu6+4096)];
    var val4 = data1[(alu6+4097)];
    var val5 = data1[(alu6+4098)];
    var val6 = data1[(alu6+4099)];
    var val7 = data1[(alu6+8192)];
    var val8 = data1[(alu6+8193)];
    var val9 = data1[(alu6+8194)];
    var val10 = data1[(alu6+8195)];
    var val11 = data1[(alu6+12288)];
    var val12 = data1[(alu6+12289)];
    var val13 = data1[(alu6+12290)];
    var val14 = data1[(alu6+12291)];
    var val15 = data1[alu6];
    var val16 = data2[(alu5+1)];
    var val17 = data2[(alu5+2)];
    var val18 = data2[(alu5+3)];
    var val19 = data2[(alu5+320)];
    var val20 = data2[(alu5+321)];
    var val21 = data2[(alu5+322)];
    var val22 = data2[(alu5+323)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu5+640)];
    var val24 = data2[(alu5+641)];
    var val25 = data2[(alu5+642)];
    var val26 = data2[(alu5+643)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu5+960)];
    var val28 = data2[(alu5+961)];
    var val29 = data2[(alu5+962)];
    var val30 = data2[(alu5+963)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu5];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[(alu3+1)];
  data0[(alu4+4096)] = (val32+acc1);
  data0[(alu4+4097)] = (val32+acc5);
  data0[(alu4+4098)] = (val32+acc9);
  data0[(alu4+4099)] = (val32+acc13);
  var val33 = data3[(alu3+2)];
  data0[(alu4+8192)] = (val33+acc2);
  data0[(alu4+8193)] = (val33+acc6);
  data0[(alu4+8194)] = (val33+acc10);
  data0[(alu4+8195)] = (val33+acc14);
  var val34 = data3[(alu3+3)];
  data0[(alu4+12288)] = (val34+acc3);
  data0[(alu4+12289)] = (val34+acc7);
  data0[(alu4+12290)] = (val34+acc11);
  data0[(alu4+12291)] = (val34+acc15);
  var val35 = data3[alu3];
  data0[(alu4+1)] = (val35+acc4);
  data0[(alu4+2)] = (val35+acc8);
  data0[(alu4+3)] = (val35+acc12);
  data0[alu4] = (val35+acc0);
}`;

const r_64_2_16_80_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(2,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(lidx0<<12)+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu3 = (alu0+(lidx0*1310720)+alu1+(ridx0<<14));
    var val0 = data1[(alu3+1)];
    var val1 = data1[(alu3+2)];
    var val2 = data1[(alu3+3)];
    var val3 = data1[(alu3+4096)];
    var val4 = data1[(alu3+4097)];
    var val5 = data1[(alu3+4098)];
    var val6 = data1[(alu3+4099)];
    var val7 = data1[(alu3+8192)];
    var val8 = data1[(alu3+8193)];
    var val9 = data1[(alu3+8194)];
    var val10 = data1[(alu3+8195)];
    var val11 = data1[(alu3+12288)];
    var val12 = data1[(alu3+12289)];
    acc1 = (acc1+val12+val8+val0+val4);
    var val13 = data1[(alu3+12290)];
    acc2 = (acc2+val13+val9+val1+val5);
    var val14 = data1[(alu3+12291)];
    acc3 = (acc3+val14+val10+val2+val6);
    var val15 = data1[alu3];
    acc0 = (acc0+val11+val7+val3+val15);
  }
  data0[(alu2+1)] = (acc1*0.0031250000465661287f);
  data0[(alu2+2)] = (acc2*0.0031250000465661287f);
  data0[(alu2+3)] = (acc3*0.0031250000465661287f);
  data0[alu2] = (acc0*0.0031250000465661287f);
}`;

const r_64_2_16_80_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(2,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(lidx0<<12)+alu1);
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data2[alu3];
  var val1 = data2[alu4];
  var val2 = data2[alu5];
  var val3 = data2[alu2];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu6 = (alu0+(lidx0*1310720)+alu1+(ridx0<<14));
    var val4 = data1[(alu6+1)];
    var alu7 = (val4-val0);
    var val5 = data1[(alu6+2)];
    var alu8 = (val5-val1);
    var val6 = data1[(alu6+3)];
    var alu9 = (val6-val2);
    var val7 = data1[(alu6+4096)];
    var alu10 = (val7-val3);
    var val8 = data1[(alu6+4097)];
    var alu11 = (val8-val0);
    var val9 = data1[(alu6+4098)];
    var alu12 = (val9-val1);
    var val10 = data1[(alu6+4099)];
    var alu13 = (val10-val2);
    var val11 = data1[(alu6+8192)];
    var alu14 = (val11-val3);
    var val12 = data1[(alu6+8193)];
    var alu15 = (val12-val0);
    var val13 = data1[(alu6+8194)];
    var alu16 = (val13-val1);
    var val14 = data1[(alu6+8195)];
    var alu17 = (val14-val2);
    var val15 = data1[(alu6+12288)];
    var alu18 = (val15-val3);
    var val16 = data1[(alu6+12289)];
    var alu19 = (val16-val0);
    acc1 = (acc1+(alu7*alu7)+(alu11*alu11)+(alu15*alu15)+(alu19*alu19));
    var val17 = data1[(alu6+12290)];
    var alu21 = (val17-val1);
    acc2 = (acc2+(alu8*alu8)+(alu12*alu12)+(alu16*alu16)+(alu21*alu21));
    var val18 = data1[(alu6+12291)];
    var alu23 = (val18-val2);
    acc3 = (acc3+(alu9*alu9)+(alu13*alu13)+(alu17*alu17)+(alu23*alu23));
    var val19 = data1[alu6];
    var alu25 = (val19-val3);
    acc0 = (acc0+(alu10*alu10)+(alu25*alu25)+(alu14*alu14)+(alu18*alu18));
  }
  data0[alu3] = sqrt((1/((acc1*0.0031250000465661287f)+1e-05f)));
  data0[alu4] = sqrt((1/((acc2*0.0031250000465661287f)+1e-05f)));
  data0[alu5] = sqrt((1/((acc3*0.0031250000465661287f)+1e-05f)));
  data0[alu2] = sqrt((1/((acc0*0.0031250000465661287f)+1e-05f)));
}`;

const E_2_128_5_8_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 5 */
  var gidx1 = i32(gindex.y); /* 128 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*1310720);
  var alu1 = (gidx0<<6);
  var alu2 = (gidx1<<5);
  var alu3 = (lidx0<<2);
  var alu4 = (alu2+(gidx2<<12)+alu3);
  var alu5 = (alu4+1);
  var alu6 = (alu4+2);
  var alu7 = (alu4+3);
  var alu8 = (lidx1<<2);
  var alu9 = ((gidx1*10240)+alu0+alu1+(lidx0*1280)+alu8);
  var alu10 = (alu1+alu8);
  var alu11 = (alu10+1);
  var alu12 = (alu10+2);
  var alu13 = (alu10+3);
  var alu14 = (alu2+alu0+(gidx0<<18)+alu3+(lidx1<<14));
  var val0 = data1[(alu14+1)];
  var val1 = data1[(alu14+2)];
  var val2 = data1[(alu14+3)];
  var val3 = data1[(alu14+4096)];
  var val4 = data1[(alu14+4097)];
  var val5 = data1[(alu14+4098)];
  var val6 = data1[(alu14+4099)];
  var val7 = data1[(alu14+8192)];
  var val8 = data1[(alu14+8193)];
  var val9 = data1[(alu14+8194)];
  var val10 = data1[(alu14+8195)];
  var val11 = data1[(alu14+12288)];
  var val12 = data1[(alu14+12289)];
  var val13 = data1[(alu14+12290)];
  var val14 = data1[(alu14+12291)];
  var val15 = data1[alu14];
  var val16 = data2[alu5];
  var val17 = data2[alu6];
  var val18 = data2[alu7];
  var val19 = data2[alu4];
  var val20 = data3[alu5];
  var val21 = data3[alu6];
  var val22 = data3[alu7];
  var val23 = data3[alu4];
  var val24 = data4[alu11];
  var val25 = data4[alu12];
  var val26 = data4[alu13];
  var val27 = data4[alu10];
  var val28 = data5[alu11];
  data0[(alu9+1)] = (val28+(val24*val23*(val3-val19)));
  data0[(alu9+321)] = (val28+(val24*val20*(val4-val16)));
  data0[(alu9+641)] = (val28+(val24*val21*(val5-val17)));
  data0[(alu9+961)] = (val28+(val24*val22*(val6-val18)));
  var val29 = data5[alu12];
  data0[(alu9+2)] = (val29+(val25*val23*(val7-val19)));
  data0[(alu9+322)] = (val29+(val25*val20*(val8-val16)));
  data0[(alu9+642)] = (val29+(val25*val21*(val9-val17)));
  data0[(alu9+962)] = (val29+(val25*val22*(val10-val18)));
  var val30 = data5[alu13];
  data0[(alu9+3)] = (val30+(val26*val23*(val11-val19)));
  data0[(alu9+323)] = (val30+(val26*val20*(val12-val16)));
  data0[(alu9+643)] = (val30+(val26*val21*(val13-val17)));
  data0[(alu9+963)] = (val30+(val26*val22*(val14-val18)));
  var val31 = data5[alu10];
  data0[(alu9+320)] = (val31+(val27*val20*(val0-val16)));
  data0[(alu9+640)] = (val31+(val27*val21*(val1-val17)));
  data0[(alu9+960)] = (val31+(val27*val22*(val2-val18)));
  data0[alu9] = (val31+(val27*val23*(val15-val19)));
}`;

const r_256_5_8_16_80_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 5 */
  var gidx1 = i32(gindex.y); /* 256 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1*10240);
  var alu1 = (lidx0*1280);
  var alu2 = ((gidx0<<6)+alu0+alu1+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu3 = (ridx0<<2);
    var alu4 = ((gidx0*20480)+(lidx1*1280)+alu3);
    var alu5 = (alu0+alu1+alu3);
    var val0 = data1[(alu5+1)];
    var val1 = data1[(alu5+2)];
    var val2 = data1[(alu5+3)];
    var val3 = data1[(alu5+320)];
    var val4 = data1[(alu5+321)];
    var val5 = data1[(alu5+322)];
    var val6 = data1[(alu5+323)];
    var val7 = data1[(alu5+640)];
    var val8 = data1[(alu5+641)];
    var val9 = data1[(alu5+642)];
    var val10 = data1[(alu5+643)];
    var val11 = data1[(alu5+960)];
    var val12 = data1[(alu5+961)];
    var val13 = data1[(alu5+962)];
    var val14 = data1[(alu5+963)];
    var val15 = data1[alu5];
    var val16 = data2[(alu4+1)];
    var val17 = data2[(alu4+2)];
    var val18 = data2[(alu4+3)];
    var val19 = data2[(alu4+320)];
    var val20 = data2[(alu4+321)];
    var val21 = data2[(alu4+322)];
    var val22 = data2[(alu4+323)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu4+640)];
    var val24 = data2[(alu4+641)];
    var val25 = data2[(alu4+642)];
    var val26 = data2[(alu4+643)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu4+960)];
    var val28 = data2[(alu4+961)];
    var val29 = data2[(alu4+962)];
    var val30 = data2[(alu4+963)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu4];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[(alu2+1)] = acc4;
  data0[(alu2+2)] = acc8;
  data0[(alu2+3)] = acc12;
  data0[(alu2+320)] = acc1;
  data0[(alu2+321)] = acc5;
  data0[(alu2+322)] = acc9;
  data0[(alu2+323)] = acc13;
  data0[(alu2+640)] = acc2;
  data0[(alu2+641)] = acc6;
  data0[(alu2+642)] = acc10;
  data0[(alu2+643)] = acc14;
  data0[(alu2+960)] = acc3;
  data0[(alu2+961)] = acc7;
  data0[(alu2+962)] = acc11;
  data0[(alu2+963)] = acc15;
  data0[alu2] = acc0;
}`;

const r_2_8_128_64_8_16_10_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8192 */
  var gidx1 = i32(gindex.y); /* 8 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx1*40)+(gidx2*1310720));
  var alu1 = (gidx0>>6);
  var alu2 = (gidx0&63);
  var alu3 = ((gidx1<<24)+(gidx2<<27)+(alu1<<17)+(alu2<<6)+(lidx0<<14)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 10; ridx0++) {
    var alu4 = (ridx0<<2);
    var alu5 = (alu0+(alu1*10240)+(lidx0*1280)+alu4);
    var alu6 = (alu0+(alu2*20480)+(lidx1*1280)+alu4);
    var val0 = data1[(alu5+1)];
    var val1 = data1[(alu5+2)];
    var val2 = data1[(alu5+3)];
    var val3 = data1[(alu5+320)];
    var val4 = data1[(alu5+321)];
    var val5 = data1[(alu5+322)];
    var val6 = data1[(alu5+323)];
    var val7 = data1[(alu5+640)];
    var val8 = data1[(alu5+641)];
    var val9 = data1[(alu5+642)];
    var val10 = data1[(alu5+643)];
    var val11 = data1[(alu5+960)];
    var val12 = data1[(alu5+961)];
    var val13 = data1[(alu5+962)];
    var val14 = data1[(alu5+963)];
    var val15 = data1[alu5];
    var val16 = data2[(alu6+1)];
    var val17 = data2[(alu6+2)];
    var val18 = data2[(alu6+3)];
    var val19 = data2[(alu6+320)];
    var val20 = data2[(alu6+321)];
    var val21 = data2[(alu6+322)];
    var val22 = data2[(alu6+323)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu6+640)];
    var val24 = data2[(alu6+641)];
    var val25 = data2[(alu6+642)];
    var val26 = data2[(alu6+643)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu6+960)];
    var val28 = data2[(alu6+961)];
    var val29 = data2[(alu6+962)];
    var val30 = data2[(alu6+963)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu6];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[(alu3+1)] = (acc4*0.15811388194561005f);
  data0[(alu3+2)] = (acc8*0.15811388194561005f);
  data0[(alu3+3)] = (acc12*0.15811388194561005f);
  data0[(alu3+4096)] = (acc1*0.15811388194561005f);
  data0[(alu3+4097)] = (acc5*0.15811388194561005f);
  data0[(alu3+4098)] = (acc9*0.15811388194561005f);
  data0[(alu3+4099)] = (acc13*0.15811388194561005f);
  data0[(alu3+8192)] = (acc2*0.15811388194561005f);
  data0[(alu3+8193)] = (acc6*0.15811388194561005f);
  data0[(alu3+8194)] = (acc10*0.15811388194561005f);
  data0[(alu3+8195)] = (acc14*0.15811388194561005f);
  data0[(alu3+12288)] = (acc3*0.15811388194561005f);
  data0[(alu3+12289)] = (acc7*0.15811388194561005f);
  data0[(alu3+12290)] = (acc11*0.15811388194561005f);
  data0[(alu3+12291)] = (acc15*0.15811388194561005f);
  data0[alu3] = (acc0*0.15811388194561005f);
}`;

const r_2048_32_1024_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2048 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = (f32(-inf(1.0)));
  for (var ridx0 = 0; ridx0 < 1024; ridx0++) {
    var alu0 = ((gidx0<<17)+(lidx0<<12)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    var alu1 = select(val0,val3,(val0<val3));
    var alu2 = select(val1,alu1,(val1<alu1));
    var alu3 = select(val2,alu2,(val2<alu2));
    acc0 = select(acc0,alu3,(acc0<alu3));
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_512_32_1024_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 512 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (alu0+3);
  var val0 = data2[alu1];
  var val1 = data2[alu2];
  var val2 = data2[alu3];
  var val3 = data2[alu0];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1024; ridx0++) {
    var alu4 = ((gidx0<<19)+(lidx0<<14)+(ridx0<<2));
    var val4 = data1[(alu4+1)];
    var val5 = data1[(alu4+2)];
    var val6 = data1[(alu4+3)];
    var val7 = data1[(alu4+4096)];
    var val8 = data1[(alu4+4097)];
    var val9 = data1[(alu4+4098)];
    var val10 = data1[(alu4+4099)];
    acc1 = (acc1+exp2(((val10-val0)*1.4426950408889634f))+exp2(((val9-val0)*1.4426950408889634f))+exp2(((val7-val0)*1.4426950408889634f))+exp2(((val8-val0)*1.4426950408889634f)));
    var val11 = data1[(alu4+8192)];
    var val12 = data1[(alu4+8193)];
    var val13 = data1[(alu4+8194)];
    var val14 = data1[(alu4+8195)];
    acc2 = (acc2+exp2(((val14-val1)*1.4426950408889634f))+exp2(((val13-val1)*1.4426950408889634f))+exp2(((val11-val1)*1.4426950408889634f))+exp2(((val12-val1)*1.4426950408889634f)));
    var val15 = data1[(alu4+12288)];
    var val16 = data1[(alu4+12289)];
    var val17 = data1[(alu4+12290)];
    var val18 = data1[(alu4+12291)];
    acc3 = (acc3+exp2(((val18-val2)*1.4426950408889634f))+exp2(((val17-val2)*1.4426950408889634f))+exp2(((val15-val2)*1.4426950408889634f))+exp2(((val16-val2)*1.4426950408889634f)));
    var val19 = data1[alu4];
    acc0 = (acc0+exp2(((val6-val3)*1.4426950408889634f))+exp2(((val5-val3)*1.4426950408889634f))+exp2(((val4-val3)*1.4426950408889634f))+exp2(((val19-val3)*1.4426950408889634f)));
  }
  data0[alu1] = acc1;
  data0[alu2] = acc2;
  data0[alu3] = acc3;
  data0[alu0] = acc0;
}`;

const E_8192_64_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 8192 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx0<<6)+(gidx1<<15)+(lidx0<<12)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var val0 = data1[alu2];
  var val1 = data1[alu3];
  var val2 = data1[alu4];
  var val3 = data1[alu1];
  var val4 = data2[alu0];
  var val5 = data3[alu0];
  var alu5 = (1/val5);
  data0[alu2] = (exp2(((val0-val4)*1.4426950408889634f))*alu5);
  data0[alu3] = (exp2(((val1-val4)*1.4426950408889634f))*alu5);
  data0[alu4] = (exp2(((val2-val4)*1.4426950408889634f))*alu5);
  data0[alu1] = (exp2(((val3-val4)*1.4426950408889634f))*alu5);
}`;

const r_2_2_64_5_4_16_2_1024_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 320 */
  var gidx1 = i32(gindex.y); /* 2 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 4 */
  var lidx1 = i32(lindex.y); /* 16 */
  var lidx2 = i32(lindex.z); /* 2 */
  var alu0 = (gidx2*1310720);
  var alu1 = (gidx0/5);
  var alu2 = (lidx2<<2);
  var alu3 = ((gidx0%5)<<3);
  var alu4 = ((gidx1*655360)+alu0+(alu1*2560)+alu3+(lidx0*163840)+(lidx1*160)+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1024; ridx0++) {
    var alu5 = ((gidx1*160)+alu0+alu3+(lidx0*40)+alu2+(ridx0*1280));
    var alu6 = ((gidx1<<26)+(gidx2<<27)+(alu1<<18)+(lidx0<<24)+(lidx1<<14)+(ridx0<<2));
    var val0 = data1[(alu6+1)];
    var val1 = data1[(alu6+2)];
    var val2 = data1[(alu6+3)];
    var val3 = data1[(alu6+4096)];
    var val4 = data1[(alu6+4097)];
    var val5 = data1[(alu6+4098)];
    var val6 = data1[(alu6+4099)];
    var val7 = data1[(alu6+8192)];
    var val8 = data1[(alu6+8193)];
    var val9 = data1[(alu6+8194)];
    var val10 = data1[(alu6+8195)];
    var val11 = data1[(alu6+12288)];
    var val12 = data1[(alu6+12289)];
    var val13 = data1[(alu6+12290)];
    var val14 = data1[(alu6+12291)];
    var val15 = data1[alu6];
    var val16 = data2[(alu5+1)];
    var val17 = data2[(alu5+2)];
    var val18 = data2[(alu5+3)];
    var val19 = data2[(alu5+320)];
    var val20 = data2[(alu5+321)];
    var val21 = data2[(alu5+322)];
    var val22 = data2[(alu5+323)];
    var val23 = data2[(alu5+640)];
    var val24 = data2[(alu5+641)];
    var val25 = data2[(alu5+642)];
    var val26 = data2[(alu5+643)];
    var val27 = data2[(alu5+960)];
    var val28 = data2[(alu5+961)];
    acc4 = (acc4+(val0*val20)+(val15*val16)+(val1*val24)+(val2*val28));
    acc5 = (acc5+(val3*val16)+(val4*val20)+(val5*val24)+(val6*val28));
    acc6 = (acc6+(val7*val16)+(val8*val20)+(val9*val24)+(val10*val28));
    acc7 = (acc7+(val11*val16)+(val12*val20)+(val13*val24)+(val14*val28));
    var val29 = data2[(alu5+962)];
    acc8 = (acc8+(val0*val21)+(val15*val17)+(val1*val25)+(val2*val29));
    acc9 = (acc9+(val3*val17)+(val4*val21)+(val5*val25)+(val6*val29));
    acc10 = (acc10+(val7*val17)+(val8*val21)+(val9*val25)+(val10*val29));
    acc11 = (acc11+(val11*val17)+(val12*val21)+(val13*val25)+(val14*val29));
    var val30 = data2[(alu5+963)];
    acc12 = (acc12+(val0*val22)+(val15*val18)+(val1*val26)+(val2*val30));
    acc13 = (acc13+(val3*val18)+(val4*val22)+(val5*val26)+(val6*val30));
    acc14 = (acc14+(val7*val18)+(val8*val22)+(val9*val26)+(val10*val30));
    acc15 = (acc15+(val11*val18)+(val12*val22)+(val13*val26)+(val14*val30));
    var val31 = data2[alu5];
    acc0 = (acc0+(val0*val19)+(val15*val31)+(val1*val23)+(val2*val27));
    acc1 = (acc1+(val3*val31)+(val4*val19)+(val5*val23)+(val6*val27));
    acc2 = (acc2+(val7*val31)+(val8*val19)+(val9*val23)+(val10*val27));
    acc3 = (acc3+(val11*val31)+(val12*val19)+(val13*val23)+(val14*val27));
  }
  data0[(alu4+1)] = acc4;
  data0[(alu4+2)] = acc8;
  data0[(alu4+3)] = acc12;
  data0[(alu4+40)] = acc1;
  data0[(alu4+41)] = acc5;
  data0[(alu4+42)] = acc9;
  data0[(alu4+43)] = acc13;
  data0[(alu4+80)] = acc2;
  data0[(alu4+81)] = acc6;
  data0[(alu4+82)] = acc10;
  data0[(alu4+83)] = acc14;
  data0[(alu4+120)] = acc3;
  data0[(alu4+121)] = acc7;
  data0[(alu4+122)] = acc11;
  data0[(alu4+123)] = acc15;
  data0[alu4] = acc0;
}`;

const r_2_128_5_8_16_80_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 5 */
  var gidx1 = i32(gindex.y); /* 128 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*1310720);
  var alu1 = (gidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx1*10240)+alu0+alu1+(lidx0*1280)+alu2);
  var alu4 = (alu1+alu2);
  var alu5 = ((gidx1<<5)+alu0+(gidx0<<18)+(lidx0<<2)+(lidx1<<14));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu6 = ((gidx1*1280)+(lidx0*160)+alu0+((ridx0/10)*163840));
    var alu7 = (ridx0<<2);
    var alu8 = ((gidx0*20480)+(lidx1*1280)+alu7);
    var alu9 = (alu6+((alu7+1)%40));
    var alu10 = (alu6+((alu7+2)%40));
    var alu11 = (alu6+((alu7+3)%40));
    var alu12 = (alu6+(alu7%40));
    var val0 = data2[(alu9+40)];
    var val1 = data2[(alu9+80)];
    var val2 = data2[(alu9+120)];
    var val3 = data2[(alu10+40)];
    var val4 = data2[(alu10+80)];
    var val5 = data2[(alu10+120)];
    var val6 = data2[(alu11+40)];
    var val7 = data2[(alu11+80)];
    var val8 = data2[(alu11+120)];
    var val9 = data2[(alu12+40)];
    var val10 = data2[(alu12+80)];
    var val11 = data2[(alu12+120)];
    var val12 = data2[alu9];
    var val13 = data2[alu10];
    var val14 = data2[alu11];
    var val15 = data2[alu12];
    var val16 = data3[(alu8+1)];
    var val17 = data3[(alu8+2)];
    var val18 = data3[(alu8+3)];
    var val19 = data3[(alu8+320)];
    var val20 = data3[(alu8+321)];
    var val21 = data3[(alu8+322)];
    var val22 = data3[(alu8+323)];
    acc1 = (acc1+(val12*val20)+(val15*val19)+(val13*val21)+(val14*val22));
    acc5 = (acc5+(val0*val20)+(val9*val19)+(val3*val21)+(val6*val22));
    acc9 = (acc9+(val1*val20)+(val10*val19)+(val4*val21)+(val7*val22));
    acc13 = (acc13+(val2*val20)+(val11*val19)+(val5*val21)+(val8*val22));
    var val23 = data3[(alu8+640)];
    var val24 = data3[(alu8+641)];
    var val25 = data3[(alu8+642)];
    var val26 = data3[(alu8+643)];
    acc2 = (acc2+(val12*val24)+(val15*val23)+(val13*val25)+(val14*val26));
    acc6 = (acc6+(val0*val24)+(val9*val23)+(val3*val25)+(val6*val26));
    acc10 = (acc10+(val1*val24)+(val10*val23)+(val4*val25)+(val7*val26));
    acc14 = (acc14+(val2*val24)+(val11*val23)+(val5*val25)+(val8*val26));
    var val27 = data3[(alu8+960)];
    var val28 = data3[(alu8+961)];
    var val29 = data3[(alu8+962)];
    var val30 = data3[(alu8+963)];
    acc3 = (acc3+(val12*val28)+(val15*val27)+(val13*val29)+(val14*val30));
    acc7 = (acc7+(val0*val28)+(val9*val27)+(val3*val29)+(val6*val30));
    acc11 = (acc11+(val1*val28)+(val10*val27)+(val4*val29)+(val7*val30));
    acc15 = (acc15+(val2*val28)+(val11*val27)+(val5*val29)+(val8*val30));
    var val31 = data3[alu8];
    acc0 = (acc0+(val12*val16)+(val15*val31)+(val13*val17)+(val14*val18));
    acc4 = (acc4+(val0*val16)+(val9*val31)+(val3*val17)+(val6*val18));
    acc8 = (acc8+(val1*val16)+(val10*val31)+(val4*val17)+(val7*val18));
    acc12 = (acc12+(val2*val16)+(val11*val31)+(val5*val17)+(val8*val18));
  }
  var val32 = data1[(alu5+1)];
  var val33 = data1[(alu5+2)];
  var val34 = data1[(alu5+3)];
  var val35 = data1[(alu5+4096)];
  var val36 = data1[(alu5+4097)];
  var val37 = data1[(alu5+4098)];
  var val38 = data1[(alu5+4099)];
  var val39 = data1[(alu5+8192)];
  var val40 = data1[(alu5+8193)];
  var val41 = data1[(alu5+8194)];
  var val42 = data1[(alu5+8195)];
  var val43 = data1[(alu5+12288)];
  var val44 = data1[(alu5+12289)];
  var val45 = data1[(alu5+12290)];
  var val46 = data1[(alu5+12291)];
  var val47 = data1[alu5];
  var val48 = data4[(alu4+1)];
  data0[(alu3+1)] = (val35+val48+acc1);
  data0[(alu3+321)] = (val36+val48+acc5);
  data0[(alu3+641)] = (val37+val48+acc9);
  data0[(alu3+961)] = (val38+val48+acc13);
  var val49 = data4[(alu4+2)];
  data0[(alu3+2)] = (val39+val49+acc2);
  data0[(alu3+322)] = (val40+val49+acc6);
  data0[(alu3+642)] = (val41+val49+acc10);
  data0[(alu3+962)] = (val42+val49+acc14);
  var val50 = data4[(alu4+3)];
  data0[(alu3+3)] = (val43+val50+acc3);
  data0[(alu3+323)] = (val44+val50+acc7);
  data0[(alu3+643)] = (val45+val50+acc11);
  data0[(alu3+963)] = (val46+val50+acc15);
  var val51 = data4[alu4];
  data0[(alu3+320)] = (val32+val51+acc4);
  data0[(alu3+640)] = (val33+val51+acc8);
  data0[(alu3+960)] = (val34+val51+acc12);
  data0[alu3] = (val47+val51+acc0);
}`;

const r_64_32_80_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu1 = ((gidx0*40960)+(lidx0*1280)+(ridx0<<2));
    var val0 = data1[(alu1+1)];
    var val1 = data1[(alu1+2)];
    var val2 = data1[(alu1+3)];
    var val3 = data1[(alu1+320)];
    var val4 = data1[(alu1+321)];
    var val5 = data1[(alu1+322)];
    var val6 = data1[(alu1+323)];
    acc1 = (acc1+val6+val5+val3+val4);
    var val7 = data1[(alu1+640)];
    var val8 = data1[(alu1+641)];
    var val9 = data1[(alu1+642)];
    var val10 = data1[(alu1+643)];
    acc2 = (acc2+val10+val9+val7+val8);
    var val11 = data1[(alu1+960)];
    var val12 = data1[(alu1+961)];
    var val13 = data1[(alu1+962)];
    var val14 = data1[(alu1+963)];
    acc3 = (acc3+val14+val13+val11+val12);
    var val15 = data1[alu1];
    acc0 = (acc0+val2+val1+val0+val15);
  }
  data0[(alu0+1)] = (acc1*0.0031250000465661287f);
  data0[(alu0+2)] = (acc2*0.0031250000465661287f);
  data0[(alu0+3)] = (acc3*0.0031250000465661287f);
  data0[alu0] = (acc0*0.0031250000465661287f);
}`;

const r_64_32_80_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (alu0+3);
  var val0 = data2[alu1];
  var val1 = data2[alu2];
  var val2 = data2[alu3];
  var val3 = data2[alu0];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu4 = ((gidx0*40960)+(lidx0*1280)+(ridx0<<2));
    var val4 = data1[(alu4+1)];
    var alu5 = (val4-val3);
    var val5 = data1[(alu4+2)];
    var alu6 = (val5-val3);
    var val6 = data1[(alu4+3)];
    var alu7 = (val6-val3);
    var val7 = data1[(alu4+320)];
    var alu8 = (val7-val0);
    var val8 = data1[(alu4+321)];
    var alu9 = (val8-val0);
    var val9 = data1[(alu4+322)];
    var alu10 = (val9-val0);
    var val10 = data1[(alu4+323)];
    var alu11 = (val10-val0);
    acc1 = (acc1+(alu8*alu8)+(alu9*alu9)+(alu10*alu10)+(alu11*alu11));
    var val11 = data1[(alu4+640)];
    var alu13 = (val11-val1);
    var val12 = data1[(alu4+641)];
    var alu14 = (val12-val1);
    var val13 = data1[(alu4+642)];
    var alu15 = (val13-val1);
    var val14 = data1[(alu4+643)];
    var alu16 = (val14-val1);
    acc2 = (acc2+(alu13*alu13)+(alu14*alu14)+(alu15*alu15)+(alu16*alu16));
    var val15 = data1[(alu4+960)];
    var alu18 = (val15-val2);
    var val16 = data1[(alu4+961)];
    var alu19 = (val16-val2);
    var val17 = data1[(alu4+962)];
    var alu20 = (val17-val2);
    var val18 = data1[(alu4+963)];
    var alu21 = (val18-val2);
    acc3 = (acc3+(alu18*alu18)+(alu19*alu19)+(alu20*alu20)+(alu21*alu21));
    var val19 = data1[alu4];
    var alu23 = (val19-val3);
    acc0 = (acc0+(alu5*alu5)+(alu23*alu23)+(alu6*alu6)+(alu7*alu7));
  }
  data0[alu1] = sqrt((1/((acc1*0.0031250000465661287f)+1e-05f)));
  data0[alu2] = sqrt((1/((acc2*0.0031250000465661287f)+1e-05f)));
  data0[alu3] = sqrt((1/((acc3*0.0031250000465661287f)+1e-05f)));
  data0[alu0] = sqrt((1/((acc0*0.0031250000465661287f)+1e-05f)));
}`;

const E_256_5_8_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 5 */
  var gidx1 = i32(gindex.y); /* 256 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = ((gidx1<<5)+(lidx0<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var alu5 = (lidx1<<2);
  var alu6 = (alu0+(gidx1*10240)+(lidx0*1280)+alu5);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+320);
  var alu11 = (alu6+321);
  var alu12 = (alu6+322);
  var alu13 = (alu6+323);
  var alu14 = (alu6+640);
  var alu15 = (alu6+641);
  var alu16 = (alu6+642);
  var alu17 = (alu6+643);
  var alu18 = (alu6+960);
  var alu19 = (alu6+961);
  var alu20 = (alu6+962);
  var alu21 = (alu6+963);
  var alu22 = (alu0+alu5);
  var alu23 = (alu22+1);
  var alu24 = (alu22+2);
  var alu25 = (alu22+3);
  var val0 = data1[alu7];
  var val1 = data1[alu8];
  var val2 = data1[alu9];
  var val3 = data1[alu10];
  var val4 = data1[alu11];
  var val5 = data1[alu12];
  var val6 = data1[alu13];
  var val7 = data1[alu14];
  var val8 = data1[alu15];
  var val9 = data1[alu16];
  var val10 = data1[alu17];
  var val11 = data1[alu18];
  var val12 = data1[alu19];
  var val13 = data1[alu20];
  var val14 = data1[alu21];
  var val15 = data1[alu6];
  var val16 = data2[alu2];
  var val17 = data2[alu3];
  var val18 = data2[alu4];
  var val19 = data2[alu1];
  var val20 = data3[alu2];
  var val21 = data3[alu3];
  var val22 = data3[alu4];
  var val23 = data3[alu1];
  var val24 = data4[alu23];
  var val25 = data4[alu24];
  var val26 = data4[alu25];
  var val27 = data4[alu22];
  var val28 = data5[alu23];
  data0[alu7] = (val28+(val24*val23*(val0-val19)));
  data0[alu11] = (val28+(val24*val20*(val4-val16)));
  data0[alu15] = (val28+(val24*val21*(val8-val17)));
  data0[alu19] = (val28+(val24*val22*(val12-val18)));
  var val29 = data5[alu24];
  data0[alu8] = (val29+(val25*val23*(val1-val19)));
  data0[alu12] = (val29+(val25*val20*(val5-val16)));
  data0[alu16] = (val29+(val25*val21*(val9-val17)));
  data0[alu20] = (val29+(val25*val22*(val13-val18)));
  var val30 = data5[alu25];
  data0[alu9] = (val30+(val26*val23*(val2-val19)));
  data0[alu13] = (val30+(val26*val20*(val6-val16)));
  data0[alu17] = (val30+(val26*val21*(val10-val17)));
  data0[alu21] = (val30+(val26*val22*(val14-val18)));
  var val31 = data5[alu22];
  data0[alu10] = (val31+(val27*val20*(val3-val16)));
  data0[alu14] = (val31+(val27*val21*(val7-val17)));
  data0[alu18] = (val31+(val27*val22*(val11-val18)));
  data0[alu6] = (val31+(val27*val23*(val15-val19)));
}`;

const r_2_64_77_8_16_10_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var gidx1 = i32(gindex.y); /* 64 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0*40);
  var alu1 = (gidx0+(gidx1*4928)+(gidx2*2523136)+(lidx0*315392)+(lidx1*308));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 10; ridx0++) {
    var alu2 = (ridx0<<2);
    var alu3 = ((gidx1*20480)+(gidx2*1310720)+alu0+(lidx1*1280)+alu2);
    var alu4 = ((gidx0*320)+(gidx2*24640)+alu0+alu2);
    var val0 = data1[(alu3+1)];
    var val1 = data1[(alu3+2)];
    var val2 = data1[(alu3+3)];
    var val3 = data1[(alu3+320)];
    var val4 = data1[(alu3+321)];
    var val5 = data1[(alu3+322)];
    var val6 = data1[(alu3+323)];
    var val7 = data1[(alu3+640)];
    var val8 = data1[(alu3+641)];
    var val9 = data1[(alu3+642)];
    var val10 = data1[(alu3+643)];
    var val11 = data1[(alu3+960)];
    var val12 = data1[(alu3+961)];
    var val13 = data1[(alu3+962)];
    var val14 = data1[(alu3+963)];
    var val15 = data1[alu3];
    var val16 = data2[(alu4+1)];
    var val17 = data2[(alu4+2)];
    var val18 = data2[(alu4+3)];
    var val19 = data2[alu4];
    acc0 = (acc0+(val0*val16)+(val15*val19)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val19)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val19)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val19)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[alu1] = (acc0*0.15811388194561005f);
  data0[(alu1+77)] = (acc1*0.15811388194561005f);
  data0[(alu1+154)] = (acc2*0.15811388194561005f);
  data0[(alu1+231)] = (acc3*0.15811388194561005f);
}`;

const r_2048_32_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2048 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = (f32(-inf(1.0)));
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var val0 = data1[((gidx0*2464)+(lidx0*77)+ridx0)];
    acc0 = select(acc0,val0,(acc0<val0));
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_512_32_77_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 512 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (alu0+3);
  var val0 = data2[alu1];
  var val1 = data2[alu2];
  var val2 = data2[alu3];
  var val3 = data2[alu0];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var alu4 = ((gidx0*9856)+(lidx0*308)+ridx0);
    var val4 = data1[(alu4+77)];
    acc1 = (acc1+exp2(((val4-val0)*1.4426950408889634f)));
    var val5 = data1[(alu4+154)];
    acc2 = (acc2+exp2(((val5-val1)*1.4426950408889634f)));
    var val6 = data1[(alu4+231)];
    acc3 = (acc3+exp2(((val6-val2)*1.4426950408889634f)));
    var val7 = data1[alu4];
    acc0 = (acc0+exp2(((val7-val3)*1.4426950408889634f)));
  }
  data0[alu1] = acc1;
  data0[alu2] = acc2;
  data0[alu3] = acc3;
  data0[alu0] = acc0;
}`;

const E_512_77_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var gidx1 = i32(gindex.y); /* 512 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = (gidx0+(gidx1*9856)+(lidx0*308));
  var alu1 = (alu0+77);
  var alu2 = (alu0+154);
  var alu3 = (alu0+231);
  var alu4 = ((gidx1<<7)+(lidx0<<2));
  var alu5 = (alu4+1);
  var alu6 = (alu4+2);
  var alu7 = (alu4+3);
  var val0 = data1[alu0];
  var val1 = data1[alu1];
  var val2 = data1[alu2];
  var val3 = data1[alu3];
  var val4 = data2[alu5];
  var val5 = data2[alu6];
  var val6 = data2[alu7];
  var val7 = data2[alu4];
  var val8 = data3[alu5];
  data0[alu1] = (exp2(((val1-val4)*1.4426950408889634f))*(1/val8));
  var val9 = data3[alu6];
  data0[alu2] = (exp2(((val2-val5)*1.4426950408889634f))*(1/val9));
  var val10 = data3[alu7];
  data0[alu3] = (exp2(((val3-val6)*1.4426950408889634f))*(1/val10));
  var val11 = data3[alu4];
  data0[alu0] = (exp2(((val0-val7)*1.4426950408889634f))*(1/val11));
}`;

const r_2_2_64_5_4_16_2_77_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 320 */
  var gidx1 = i32(gindex.y); /* 2 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 4 */
  var lidx1 = i32(lindex.y); /* 16 */
  var lidx2 = i32(lindex.z); /* 2 */
  var alu0 = (gidx0/5);
  var alu1 = (lidx2<<2);
  var alu2 = ((gidx0%5)<<3);
  var alu3 = ((gidx1*655360)+(gidx2*1310720)+(alu0*2560)+alu2+(lidx0*163840)+(lidx1*160)+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var alu4 = ((gidx1*1261568)+(gidx2*2523136)+(alu0*4928)+(lidx0*315392)+(lidx1*308)+ridx0);
    var alu5 = ((gidx1*160)+(gidx2*24640)+alu2+(lidx0*40)+alu1+(ridx0*320));
    var val0 = data1[(alu4+77)];
    var val1 = data1[(alu4+154)];
    var val2 = data1[(alu4+231)];
    var val3 = data1[alu4];
    var val4 = data2[(alu5+1)];
    acc4 = (acc4+(val3*val4));
    acc5 = (acc5+(val0*val4));
    acc6 = (acc6+(val1*val4));
    acc7 = (acc7+(val2*val4));
    var val5 = data2[(alu5+2)];
    acc8 = (acc8+(val3*val5));
    acc9 = (acc9+(val0*val5));
    acc10 = (acc10+(val1*val5));
    acc11 = (acc11+(val2*val5));
    var val6 = data2[(alu5+3)];
    acc12 = (acc12+(val3*val6));
    acc13 = (acc13+(val0*val6));
    acc14 = (acc14+(val1*val6));
    acc15 = (acc15+(val2*val6));
    var val7 = data2[alu5];
    acc0 = (acc0+(val3*val7));
    acc1 = (acc1+(val0*val7));
    acc2 = (acc2+(val1*val7));
    acc3 = (acc3+(val2*val7));
  }
  data0[(alu3+1)] = acc4;
  data0[(alu3+2)] = acc8;
  data0[(alu3+3)] = acc12;
  data0[(alu3+40)] = acc1;
  data0[(alu3+41)] = acc5;
  data0[(alu3+42)] = acc9;
  data0[(alu3+43)] = acc13;
  data0[(alu3+80)] = acc2;
  data0[(alu3+81)] = acc6;
  data0[(alu3+82)] = acc10;
  data0[(alu3+83)] = acc14;
  data0[(alu3+120)] = acc3;
  data0[(alu3+121)] = acc7;
  data0[(alu3+122)] = acc11;
  data0[(alu3+123)] = acc15;
  data0[alu3] = acc0;
}`;

const r_2_128_5_8_16_80_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 5 */
  var gidx1 = i32(gindex.y); /* 128 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*1310720);
  var alu1 = (gidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx1*10240)+alu0+alu1+(lidx0*1280)+alu2);
  var alu4 = (alu3+1);
  var alu5 = (alu3+2);
  var alu6 = (alu3+3);
  var alu7 = (alu3+320);
  var alu8 = (alu3+321);
  var alu9 = (alu3+322);
  var alu10 = (alu3+323);
  var alu11 = (alu3+640);
  var alu12 = (alu3+641);
  var alu13 = (alu3+642);
  var alu14 = (alu3+643);
  var alu15 = (alu3+960);
  var alu16 = (alu3+961);
  var alu17 = (alu3+962);
  var alu18 = (alu3+963);
  var alu19 = (alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu20 = ((gidx1*1280)+(lidx0*160)+alu0+((ridx0/10)*163840));
    var alu21 = (ridx0<<2);
    var alu22 = ((gidx0*20480)+(lidx1*1280)+alu21);
    var alu23 = (alu20+((alu21+1)%40));
    var alu24 = (alu20+((alu21+2)%40));
    var alu25 = (alu20+((alu21+3)%40));
    var alu26 = (alu20+(alu21%40));
    var val0 = data2[(alu23+40)];
    var val1 = data2[(alu23+80)];
    var val2 = data2[(alu23+120)];
    var val3 = data2[(alu24+40)];
    var val4 = data2[(alu24+80)];
    var val5 = data2[(alu24+120)];
    var val6 = data2[(alu25+40)];
    var val7 = data2[(alu25+80)];
    var val8 = data2[(alu25+120)];
    var val9 = data2[(alu26+40)];
    var val10 = data2[(alu26+80)];
    var val11 = data2[(alu26+120)];
    var val12 = data2[alu23];
    var val13 = data2[alu24];
    var val14 = data2[alu25];
    var val15 = data2[alu26];
    var val16 = data3[(alu22+1)];
    var val17 = data3[(alu22+2)];
    var val18 = data3[(alu22+3)];
    var val19 = data3[(alu22+320)];
    var val20 = data3[(alu22+321)];
    var val21 = data3[(alu22+322)];
    var val22 = data3[(alu22+323)];
    acc4 = (acc4+(val12*val20)+(val15*val19)+(val13*val21)+(val14*val22));
    acc5 = (acc5+(val0*val20)+(val9*val19)+(val3*val21)+(val6*val22));
    acc6 = (acc6+(val1*val20)+(val10*val19)+(val4*val21)+(val7*val22));
    acc7 = (acc7+(val2*val20)+(val11*val19)+(val5*val21)+(val8*val22));
    var val23 = data3[(alu22+640)];
    var val24 = data3[(alu22+641)];
    var val25 = data3[(alu22+642)];
    var val26 = data3[(alu22+643)];
    acc8 = (acc8+(val12*val24)+(val15*val23)+(val13*val25)+(val14*val26));
    acc9 = (acc9+(val0*val24)+(val9*val23)+(val3*val25)+(val6*val26));
    acc10 = (acc10+(val1*val24)+(val10*val23)+(val4*val25)+(val7*val26));
    acc11 = (acc11+(val2*val24)+(val11*val23)+(val5*val25)+(val8*val26));
    var val27 = data3[(alu22+960)];
    var val28 = data3[(alu22+961)];
    var val29 = data3[(alu22+962)];
    var val30 = data3[(alu22+963)];
    acc12 = (acc12+(val12*val28)+(val15*val27)+(val13*val29)+(val14*val30));
    acc13 = (acc13+(val0*val28)+(val9*val27)+(val3*val29)+(val6*val30));
    acc14 = (acc14+(val1*val28)+(val10*val27)+(val4*val29)+(val7*val30));
    acc15 = (acc15+(val2*val28)+(val11*val27)+(val5*val29)+(val8*val30));
    var val31 = data3[alu22];
    acc0 = (acc0+(val12*val16)+(val15*val31)+(val13*val17)+(val14*val18));
    acc1 = (acc1+(val0*val16)+(val9*val31)+(val3*val17)+(val6*val18));
    acc2 = (acc2+(val1*val16)+(val10*val31)+(val4*val17)+(val7*val18));
    acc3 = (acc3+(val2*val16)+(val11*val31)+(val5*val17)+(val8*val18));
  }
  var val32 = data1[alu4];
  var val33 = data1[alu5];
  var val34 = data1[alu6];
  var val35 = data1[alu7];
  var val36 = data1[alu8];
  var val37 = data1[alu9];
  var val38 = data1[alu10];
  var val39 = data1[alu11];
  var val40 = data1[alu12];
  var val41 = data1[alu13];
  var val42 = data1[alu14];
  var val43 = data1[alu15];
  var val44 = data1[alu16];
  var val45 = data1[alu17];
  var val46 = data1[alu18];
  var val47 = data1[alu3];
  var val48 = data4[(alu19+1)];
  data0[alu4] = (val32+val48+acc4);
  data0[alu8] = (val36+val48+acc5);
  data0[alu12] = (val40+val48+acc6);
  data0[alu16] = (val44+val48+acc7);
  var val49 = data4[(alu19+2)];
  data0[alu5] = (val33+val49+acc8);
  data0[alu9] = (val37+val49+acc9);
  data0[alu13] = (val41+val49+acc10);
  data0[alu17] = (val45+val49+acc11);
  var val50 = data4[(alu19+3)];
  data0[alu6] = (val34+val50+acc12);
  data0[alu10] = (val38+val50+acc13);
  data0[alu14] = (val42+val50+acc14);
  data0[alu18] = (val46+val50+acc15);
  var val51 = data4[alu19];
  data0[alu7] = (val35+val51+acc1);
  data0[alu11] = (val39+val51+acc2);
  data0[alu15] = (val43+val51+acc3);
  data0[alu3] = (val47+val51+acc0);
}`;

const r_256_40_8_16_80_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 40 */
  var gidx1 = i32(gindex.y); /* 256 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1*81920)+(lidx0*10240)+alu1);
  var alu3 = (alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu4 = (ridx0<<2);
    var alu5 = ((gidx0*20480)+(lidx1*1280)+alu4);
    var alu6 = ((gidx1*10240)+(lidx0*1280)+alu4);
    var val0 = data1[(alu6+1)];
    var val1 = data1[(alu6+2)];
    var val2 = data1[(alu6+3)];
    var val3 = data1[(alu6+320)];
    var val4 = data1[(alu6+321)];
    var val5 = data1[(alu6+322)];
    var val6 = data1[(alu6+323)];
    var val7 = data1[(alu6+640)];
    var val8 = data1[(alu6+641)];
    var val9 = data1[(alu6+642)];
    var val10 = data1[(alu6+643)];
    var val11 = data1[(alu6+960)];
    var val12 = data1[(alu6+961)];
    var val13 = data1[(alu6+962)];
    var val14 = data1[(alu6+963)];
    var val15 = data1[alu6];
    var val16 = data2[(alu5+1)];
    var val17 = data2[(alu5+2)];
    var val18 = data2[(alu5+3)];
    var val19 = data2[(alu5+320)];
    var val20 = data2[(alu5+321)];
    var val21 = data2[(alu5+322)];
    var val22 = data2[(alu5+323)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu5+640)];
    var val24 = data2[(alu5+641)];
    var val25 = data2[(alu5+642)];
    var val26 = data2[(alu5+643)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu5+960)];
    var val28 = data2[(alu5+961)];
    var val29 = data2[(alu5+962)];
    var val30 = data2[(alu5+963)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu5];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data3[(alu3+1)];
  data0[(alu2+1)] = (val32+acc4);
  data0[(alu2+2561)] = (val32+acc5);
  data0[(alu2+5121)] = (val32+acc6);
  data0[(alu2+7681)] = (val32+acc7);
  var val33 = data3[(alu3+2)];
  data0[(alu2+2)] = (val33+acc8);
  data0[(alu2+2562)] = (val33+acc9);
  data0[(alu2+5122)] = (val33+acc10);
  data0[(alu2+7682)] = (val33+acc11);
  var val34 = data3[(alu3+3)];
  data0[(alu2+3)] = (val34+acc12);
  data0[(alu2+2563)] = (val34+acc13);
  data0[(alu2+5123)] = (val34+acc14);
  data0[(alu2+7683)] = (val34+acc15);
  var val35 = data3[alu3];
  data0[(alu2+2560)] = (val35+acc1);
  data0[(alu2+5120)] = (val35+acc2);
  data0[(alu2+7680)] = (val35+acc3);
  data0[alu2] = (val35+acc0);
}`;

const E_1024_20_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 1024 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1*10240)+(lidx0*1280)+alu1);
  var alu3 = (alu0+(gidx1*20480)+(lidx0*2560)+alu1);
  var val0 = data1[(alu3+1)];
  var val1 = data1[(alu3+2)];
  var val2 = data1[(alu3+3)];
  var val3 = data1[(alu3+1280)];
  var val4 = data1[(alu3+1281)];
  data0[(alu2+1)] = (val0*(1/(exp2(((val4+(val4*val4*val4*0.044715f))*-2.302208198144325f))+1.0f))*val4);
  var val5 = data1[(alu3+1282)];
  data0[(alu2+2)] = (val1*(1/(exp2(((val5+(val5*val5*val5*0.044715f))*-2.302208198144325f))+1.0f))*val5);
  var val6 = data1[(alu3+1283)];
  data0[(alu2+3)] = (val2*(1/(exp2(((val6+(val6*val6*val6*0.044715f))*-2.302208198144325f))+1.0f))*val6);
  var val7 = data1[alu3];
  data0[alu2] = (val7*(1/(exp2(((val3+(val3*val3*val3*0.044715f))*-2.302208198144325f))+1.0f))*val3);
}`;

const r_256_5_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 5 */
  var gidx1 = i32(gindex.y); /* 256 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1*10240)+(lidx0*1280)+alu1);
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = (alu2+320);
  var alu7 = (alu2+321);
  var alu8 = (alu2+322);
  var alu9 = (alu2+323);
  var alu10 = (alu2+640);
  var alu11 = (alu2+641);
  var alu12 = (alu2+642);
  var alu13 = (alu2+643);
  var alu14 = (alu2+960);
  var alu15 = (alu2+961);
  var alu16 = (alu2+962);
  var alu17 = (alu2+963);
  var alu18 = (alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu19 = (ridx0<<2);
    var alu20 = ((gidx0*81920)+(lidx1*5120)+alu19);
    var alu21 = ((gidx1*40960)+(lidx0*5120)+alu19);
    var val0 = data2[(alu21+1)];
    var val1 = data2[(alu21+2)];
    var val2 = data2[(alu21+3)];
    var val3 = data2[(alu21+1280)];
    var val4 = data2[(alu21+1281)];
    var val5 = data2[(alu21+1282)];
    var val6 = data2[(alu21+1283)];
    var val7 = data2[(alu21+2560)];
    var val8 = data2[(alu21+2561)];
    var val9 = data2[(alu21+2562)];
    var val10 = data2[(alu21+2563)];
    var val11 = data2[(alu21+3840)];
    var val12 = data2[(alu21+3841)];
    var val13 = data2[(alu21+3842)];
    var val14 = data2[(alu21+3843)];
    var val15 = data2[alu21];
    var val16 = data3[(alu20+1)];
    var val17 = data3[(alu20+2)];
    var val18 = data3[(alu20+3)];
    var val19 = data3[(alu20+1280)];
    var val20 = data3[(alu20+1281)];
    var val21 = data3[(alu20+1282)];
    var val22 = data3[(alu20+1283)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data3[(alu20+2560)];
    var val24 = data3[(alu20+2561)];
    var val25 = data3[(alu20+2562)];
    var val26 = data3[(alu20+2563)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data3[(alu20+3840)];
    var val28 = data3[(alu20+3841)];
    var val29 = data3[(alu20+3842)];
    var val30 = data3[(alu20+3843)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data3[alu20];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data1[alu3];
  var val33 = data1[alu4];
  var val34 = data1[alu5];
  var val35 = data1[alu6];
  var val36 = data1[alu7];
  var val37 = data1[alu8];
  var val38 = data1[alu9];
  var val39 = data1[alu10];
  var val40 = data1[alu11];
  var val41 = data1[alu12];
  var val42 = data1[alu13];
  var val43 = data1[alu14];
  var val44 = data1[alu15];
  var val45 = data1[alu16];
  var val46 = data1[alu17];
  var val47 = data1[alu2];
  var val48 = data4[(alu18+1)];
  data0[alu3] = (val32+val48+acc4);
  data0[alu7] = (val36+val48+acc5);
  data0[alu11] = (val40+val48+acc6);
  data0[alu15] = (val44+val48+acc7);
  var val49 = data4[(alu18+2)];
  data0[alu4] = (val33+val49+acc8);
  data0[alu8] = (val37+val49+acc9);
  data0[alu12] = (val41+val49+acc10);
  data0[alu16] = (val45+val49+acc11);
  var val50 = data4[(alu18+3)];
  data0[alu5] = (val34+val50+acc12);
  data0[alu9] = (val38+val50+acc13);
  data0[alu13] = (val42+val50+acc14);
  data0[alu17] = (val46+val50+acc15);
  var val51 = data4[alu18];
  data0[alu6] = (val35+val51+acc1);
  data0[alu10] = (val39+val51+acc2);
  data0[alu14] = (val43+val51+acc3);
  data0[alu2] = (val47+val51+acc0);
}`;

const r_2_10_64_8_16_80_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 10 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*1310720);
  var alu1 = ((gidx1<<5)+(lidx0<<2));
  var alu2 = ((gidx1<<17)+alu0+(gidx0<<6)+(lidx0<<14)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = (alu2+4096);
  var alu7 = (alu2+4097);
  var alu8 = (alu2+4098);
  var alu9 = (alu2+4099);
  var alu10 = (alu2+8192);
  var alu11 = (alu2+8193);
  var alu12 = (alu2+8194);
  var alu13 = (alu2+8195);
  var alu14 = (alu2+12288);
  var alu15 = (alu2+12289);
  var alu16 = (alu2+12290);
  var alu17 = (alu2+12291);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu18 = (ridx0<<2);
    var alu19 = ((gidx0*20480)+alu0+(lidx1*1280)+alu18);
    var alu20 = ((gidx1*10240)+(lidx0*1280)+alu18);
    var val0 = data1[(alu19+1)];
    var val1 = data1[(alu19+2)];
    var val2 = data1[(alu19+3)];
    var val3 = data1[(alu19+320)];
    var val4 = data1[(alu19+321)];
    var val5 = data1[(alu19+322)];
    var val6 = data1[(alu19+323)];
    var val7 = data1[(alu19+640)];
    var val8 = data1[(alu19+641)];
    var val9 = data1[(alu19+642)];
    var val10 = data1[(alu19+643)];
    var val11 = data1[(alu19+960)];
    var val12 = data1[(alu19+961)];
    var val13 = data1[(alu19+962)];
    var val14 = data1[(alu19+963)];
    var val15 = data1[alu19];
    var val16 = data2[(alu20+1)];
    var val17 = data2[(alu20+2)];
    var val18 = data2[(alu20+3)];
    var val19 = data2[(alu20+320)];
    var val20 = data2[(alu20+321)];
    var val21 = data2[(alu20+322)];
    var val22 = data2[(alu20+323)];
    acc1 = (acc1+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc9 = (acc9+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc13 = (acc13+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu20+640)];
    var val24 = data2[(alu20+641)];
    var val25 = data2[(alu20+642)];
    var val26 = data2[(alu20+643)];
    acc2 = (acc2+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc6 = (acc6+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc14 = (acc14+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu20+960)];
    var val28 = data2[(alu20+961)];
    var val29 = data2[(alu20+962)];
    var val30 = data2[(alu20+963)];
    acc3 = (acc3+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc7 = (acc7+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc11 = (acc11+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu20];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc4 = (acc4+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc8 = (acc8+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc12 = (acc12+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data3[(alu1+1)];
  var val33 = data3[(alu1+2)];
  var val34 = data3[(alu1+3)];
  var val35 = data3[alu1];
  var val36 = data4[alu3];
  data0[alu3] = (val36+val35+acc4);
  var val37 = data4[alu4];
  data0[alu4] = (val37+val35+acc8);
  var val38 = data4[alu5];
  data0[alu5] = (val38+val35+acc12);
  var val39 = data4[alu6];
  data0[alu6] = (val39+val32+acc1);
  var val40 = data4[alu7];
  data0[alu7] = (val40+val32+acc5);
  var val41 = data4[alu8];
  data0[alu8] = (val41+val32+acc9);
  var val42 = data4[alu9];
  data0[alu9] = (val42+val32+acc13);
  var val43 = data4[alu10];
  data0[alu10] = (val43+val33+acc2);
  var val44 = data4[alu11];
  data0[alu11] = (val44+val33+acc6);
  var val45 = data4[alu12];
  data0[alu12] = (val45+val33+acc10);
  var val46 = data4[alu13];
  data0[alu13] = (val46+val33+acc14);
  var val47 = data4[alu14];
  data0[alu14] = (val47+val34+acc3);
  var val48 = data4[alu15];
  data0[alu15] = (val48+val34+acc7);
  var val49 = data4[alu16];
  data0[alu16] = (val49+val34+acc11);
  var val50 = data4[alu17];
  data0[alu17] = (val50+val34+acc15);
  var val51 = data4[alu2];
  data0[alu2] = (val51+val35+acc0);
}`;

const r_2_80_2_16_8_320_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 80 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = ((lidx1<1)!=true);
  var alu1 = (((gidx0+lidx0)<1)!=true);
  var alu2 = (gidx1<<2);
  var alu3 = ((gidx1<<12)+(gidx2*327680)+(gidx0<<9)+(lidx0<<5)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu4 = ((gidx1*11520)+(ridx0*9));
    var alu5 = ((gidx0<<11)+(lidx0<<7)+(gidx2*1310720)+(ridx0<<12)+(lidx1<<3));
    var val0 = select(0.0f, data1[(alu5+-65)], (alu0&alu1));
    var val1 = select(0.0f, data1[(alu5+-64)], alu1);
    var val2 = select(0.0f, data1[(alu5+-63)], alu1);
    var val3 = select(0.0f, data1[(alu5+-62)], alu1);
    var val4 = select(0.0f, data1[(alu5+-61)], alu1);
    var val5 = select(0.0f, data1[(alu5+-60)], alu1);
    var val6 = select(0.0f, data1[(alu5+-59)], alu1);
    var val7 = select(0.0f, data1[(alu5+-58)], alu1);
    var val8 = select(0.0f, data1[(alu5+-57)], alu1);
    var val9 = select(0.0f, data1[(alu5+-1)], alu0);
    var val10 = data1[(alu5+1)];
    var val11 = data1[(alu5+2)];
    var val12 = data1[(alu5+3)];
    var val13 = data1[(alu5+4)];
    var val14 = data1[(alu5+5)];
    var val15 = data1[(alu5+6)];
    var val16 = data1[(alu5+7)];
    var val17 = select(0.0f, data1[(alu5+63)], alu0);
    var val18 = data1[(alu5+64)];
    var val19 = data1[(alu5+65)];
    var val20 = data1[(alu5+66)];
    var val21 = data1[(alu5+67)];
    var val22 = data1[(alu5+68)];
    var val23 = data1[(alu5+69)];
    var val24 = data1[(alu5+70)];
    var val25 = data1[(alu5+71)];
    var val26 = data1[alu5];
    var val27 = data2[(alu4+1)];
    var val28 = data2[(alu4+2)];
    var val29 = data2[(alu4+3)];
    var val30 = data2[(alu4+4)];
    var val31 = data2[(alu4+5)];
    var val32 = data2[(alu4+6)];
    var val33 = data2[(alu4+7)];
    var val34 = data2[(alu4+8)];
    var val35 = data2[(alu4+2880)];
    var val36 = data2[(alu4+2881)];
    var val37 = data2[(alu4+2882)];
    var val38 = data2[(alu4+2883)];
    var val39 = data2[(alu4+2884)];
    var val40 = data2[(alu4+2885)];
    var val41 = data2[(alu4+2886)];
    var val42 = data2[(alu4+2887)];
    var val43 = data2[(alu4+2888)];
    acc1 = (acc1+(val0*val35)+(val9*val38)+(val17*val41)+(val1*val36)+(val26*val39)+(val18*val42)+(val2*val37)+(val10*val40)+(val19*val43));
    acc5 = (acc5+(val2*val35)+(val10*val38)+(val19*val41)+(val3*val36)+(val11*val39)+(val20*val42)+(val4*val37)+(val12*val40)+(val21*val43));
    acc9 = (acc9+(val4*val35)+(val12*val38)+(val21*val41)+(val5*val36)+(val13*val39)+(val22*val42)+(val6*val37)+(val14*val40)+(val23*val43));
    acc13 = (acc13+(val6*val35)+(val14*val38)+(val23*val41)+(val7*val36)+(val15*val39)+(val24*val42)+(val8*val37)+(val16*val40)+(val25*val43));
    var val44 = data2[(alu4+5760)];
    var val45 = data2[(alu4+5761)];
    var val46 = data2[(alu4+5762)];
    var val47 = data2[(alu4+5763)];
    var val48 = data2[(alu4+5764)];
    var val49 = data2[(alu4+5765)];
    var val50 = data2[(alu4+5766)];
    var val51 = data2[(alu4+5767)];
    var val52 = data2[(alu4+5768)];
    acc2 = (acc2+(val0*val44)+(val9*val47)+(val17*val50)+(val1*val45)+(val26*val48)+(val18*val51)+(val2*val46)+(val10*val49)+(val19*val52));
    acc6 = (acc6+(val2*val44)+(val10*val47)+(val19*val50)+(val3*val45)+(val11*val48)+(val20*val51)+(val4*val46)+(val12*val49)+(val21*val52));
    acc10 = (acc10+(val4*val44)+(val12*val47)+(val21*val50)+(val5*val45)+(val13*val48)+(val22*val51)+(val6*val46)+(val14*val49)+(val23*val52));
    acc14 = (acc14+(val6*val44)+(val14*val47)+(val23*val50)+(val7*val45)+(val15*val48)+(val24*val51)+(val8*val46)+(val16*val49)+(val25*val52));
    var val53 = data2[(alu4+8640)];
    var val54 = data2[(alu4+8641)];
    var val55 = data2[(alu4+8642)];
    var val56 = data2[(alu4+8643)];
    var val57 = data2[(alu4+8644)];
    var val58 = data2[(alu4+8645)];
    var val59 = data2[(alu4+8646)];
    var val60 = data2[(alu4+8647)];
    var val61 = data2[(alu4+8648)];
    acc3 = (acc3+(val0*val53)+(val9*val56)+(val17*val59)+(val1*val54)+(val26*val57)+(val18*val60)+(val2*val55)+(val10*val58)+(val19*val61));
    acc7 = (acc7+(val2*val53)+(val10*val56)+(val19*val59)+(val3*val54)+(val11*val57)+(val20*val60)+(val4*val55)+(val12*val58)+(val21*val61));
    acc11 = (acc11+(val4*val53)+(val12*val56)+(val21*val59)+(val5*val54)+(val13*val57)+(val22*val60)+(val6*val55)+(val14*val58)+(val23*val61));
    acc15 = (acc15+(val6*val53)+(val14*val56)+(val23*val59)+(val7*val54)+(val15*val57)+(val24*val60)+(val8*val55)+(val16*val58)+(val25*val61));
    var val62 = data2[alu4];
    acc0 = (acc0+(val0*val62)+(val9*val29)+(val17*val32)+(val1*val27)+(val26*val30)+(val18*val33)+(val2*val28)+(val10*val31)+(val19*val34));
    acc4 = (acc4+(val2*val62)+(val10*val29)+(val19*val32)+(val3*val27)+(val11*val30)+(val20*val33)+(val4*val28)+(val12*val31)+(val21*val34));
    acc8 = (acc8+(val4*val62)+(val12*val29)+(val21*val32)+(val5*val27)+(val13*val30)+(val22*val33)+(val6*val28)+(val14*val31)+(val23*val34));
    acc12 = (acc12+(val6*val62)+(val14*val29)+(val23*val32)+(val7*val27)+(val15*val30)+(val24*val33)+(val8*val28)+(val16*val31)+(val25*val34));
  }
  var val63 = data3[(alu2+1)];
  data0[(alu3+1024)] = (val63+acc1);
  data0[(alu3+1025)] = (val63+acc5);
  data0[(alu3+1026)] = (val63+acc9);
  data0[(alu3+1027)] = (val63+acc13);
  var val64 = data3[(alu2+2)];
  data0[(alu3+2048)] = (val64+acc2);
  data0[(alu3+2049)] = (val64+acc6);
  data0[(alu3+2050)] = (val64+acc10);
  data0[(alu3+2051)] = (val64+acc14);
  var val65 = data3[(alu2+3)];
  data0[(alu3+3072)] = (val65+acc3);
  data0[(alu3+3073)] = (val65+acc7);
  data0[(alu3+3074)] = (val65+acc11);
  data0[(alu3+3075)] = (val65+acc15);
  var val66 = data3[alu2];
  data0[(alu3+1)] = (val66+acc4);
  data0[(alu3+2)] = (val66+acc8);
  data0[(alu3+3)] = (val66+acc12);
  data0[alu3] = (val66+acc0);
}`;

const r_64_16_640 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 640; ridx0++) {
    var val0 = data1[((gidx0*10240)+(lidx0*640)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*9.765625145519152e-05f);
  }
}`;

const r_64_16_640n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var val0 = data2[gidx0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 640; ridx0++) {
    var val1 = data1[((gidx0*10240)+(lidx0*640)+ridx0)];
    var alu0 = (val1-val0);
    acc0 = (acc0+(alu0*alu0));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[gidx0] = sqrt((1/((acc1*9.765625145519152e-05f)+1e-05f)));
  }
}`;

const E_2_40_16_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 40 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(alu0/10));
  var alu2 = ((gidx1<<13)+(gidx2*327680)+(gidx0<<6)+(lidx0<<10)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_160_2_16_8_320_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 160 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = (gidx0<<9);
  var alu1 = (lidx0<<5);
  var alu2 = (lidx1<<2);
  var alu3 = (lidx1<7);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = (((gidx0+lidx0)<1)!=true);
  var alu6 = ((lidx0+(gidx0<<4))<31);
  var alu7 = (gidx1<<2);
  var alu8 = (alu7+1);
  var alu9 = (alu7+2);
  var alu10 = (alu7+3);
  var alu11 = ((gidx1<<12)+(gidx2*655360)+alu0+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu12 = ((gidx1*11520)+(ridx0*9));
    var alu13 = (alu0+alu1+(gidx2*327680)+(ridx0<<10)+alu2);
    var val0 = select(0.0f, data1[(alu13+-33)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu13+-32)], alu5);
    var val2 = select(0.0f, data1[(alu13+-31)], alu5);
    var val3 = select(0.0f, data1[(alu13+-30)], alu5);
    var val4 = select(0.0f, data1[(alu13+-29)], alu5);
    var val5 = select(0.0f, data1[(alu13+-28)], (alu3&alu5));
    var val6 = select(0.0f, data1[(alu13+-1)], alu4);
    var val7 = data1[(alu13+1)];
    var val8 = data1[(alu13+2)];
    var val9 = data1[(alu13+3)];
    var val10 = select(0.0f, data1[(alu13+4)], alu3);
    var val11 = select(0.0f, data1[(alu13+31)], (alu6&alu4));
    var val12 = select(0.0f, data1[(alu13+32)], alu6);
    var val13 = select(0.0f, data1[(alu13+33)], alu6);
    var val14 = select(0.0f, data1[(alu13+34)], alu6);
    var val15 = select(0.0f, data1[(alu13+35)], alu6);
    var val16 = select(0.0f, data1[(alu13+36)], (alu3&alu6));
    var val17 = data1[alu13];
    var val18 = data2[(alu12+1)];
    var val19 = data2[(alu12+2)];
    var val20 = data2[(alu12+3)];
    var val21 = data2[(alu12+4)];
    var val22 = data2[(alu12+5)];
    var val23 = data2[(alu12+6)];
    var val24 = data2[(alu12+7)];
    var val25 = data2[(alu12+8)];
    var val26 = data2[(alu12+2880)];
    var val27 = data2[(alu12+2881)];
    var val28 = data2[(alu12+2882)];
    var val29 = data2[(alu12+2883)];
    var val30 = data2[(alu12+2884)];
    var val31 = data2[(alu12+2885)];
    var val32 = data2[(alu12+2886)];
    var val33 = data2[(alu12+2887)];
    var val34 = data2[(alu12+2888)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu12+5760)];
    var val36 = data2[(alu12+5761)];
    var val37 = data2[(alu12+5762)];
    var val38 = data2[(alu12+5763)];
    var val39 = data2[(alu12+5764)];
    var val40 = data2[(alu12+5765)];
    var val41 = data2[(alu12+5766)];
    var val42 = data2[(alu12+5767)];
    var val43 = data2[(alu12+5768)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu12+8640)];
    var val45 = data2[(alu12+8641)];
    var val46 = data2[(alu12+8642)];
    var val47 = data2[(alu12+8643)];
    var val48 = data2[(alu12+8644)];
    var val49 = data2[(alu12+8645)];
    var val50 = data2[(alu12+8646)];
    var val51 = data2[(alu12+8647)];
    var val52 = data2[(alu12+8648)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu12];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[alu8];
  var val55 = data3[alu9];
  var val56 = data3[alu10];
  var val57 = data3[alu7];
  var val58 = data4[alu8];
  data0[(alu11+1024)] = (val58+val54+acc1);
  data0[(alu11+1025)] = (val58+val54+acc5);
  data0[(alu11+1026)] = (val58+val54+acc9);
  data0[(alu11+1027)] = (val58+val54+acc13);
  var val59 = data4[alu9];
  data0[(alu11+2048)] = (val59+val55+acc2);
  data0[(alu11+2049)] = (val59+val55+acc6);
  data0[(alu11+2050)] = (val59+val55+acc10);
  data0[(alu11+2051)] = (val59+val55+acc14);
  var val60 = data4[alu10];
  data0[(alu11+3072)] = (val60+val56+acc3);
  data0[(alu11+3073)] = (val60+val56+acc7);
  data0[(alu11+3074)] = (val60+val56+acc11);
  data0[(alu11+3075)] = (val60+val56+acc15);
  var val61 = data4[alu7];
  data0[(alu11+1)] = (val61+val57+acc4);
  data0[(alu11+2)] = (val61+val57+acc8);
  data0[(alu11+3)] = (val61+val57+acc12);
  data0[alu11] = (val61+val57+acc0);
}`;

const r_64_16_1280 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var val0 = data1[((gidx0*20480)+(lidx0*1280)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*4.882812572759576e-05f);
  }
}`;

const r_64_16_1280n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var val0 = data2[gidx0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var val1 = data1[((gidx0*20480)+(lidx0*1280)+ridx0)];
    var alu0 = (val1-val0);
    acc0 = (acc0+(alu0*alu0));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[gidx0] = sqrt((1/((acc1*4.882812572759576e-05f)+1e-05f)));
  }
}`;

const E_2_80_16_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 80 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(alu0/20));
  var alu2 = ((gidx1<<13)+(gidx2*655360)+(gidx0<<6)+(lidx0<<10)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_160_2_16_8_640_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 160 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = (gidx2*655360);
  var alu1 = (gidx0<<9);
  var alu2 = (lidx0<<5);
  var alu3 = (lidx1<<2);
  var alu4 = (lidx1<7);
  var alu5 = ((lidx1<1)!=true);
  var alu6 = (((gidx0+lidx0)<1)!=true);
  var alu7 = ((lidx0+(gidx0<<4))<31);
  var alu8 = ((gidx1<<12)+alu0+alu1+alu2+alu3);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 640; ridx0++) {
    var alu9 = ((gidx1*23040)+(ridx0*9));
    var alu10 = (alu1+alu2+alu0+(ridx0<<10)+alu3);
    var val0 = select(0.0f, data1[(alu10+-33)], (alu5&alu6));
    var val1 = select(0.0f, data1[(alu10+-32)], alu6);
    var val2 = select(0.0f, data1[(alu10+-31)], alu6);
    var val3 = select(0.0f, data1[(alu10+-30)], alu6);
    var val4 = select(0.0f, data1[(alu10+-29)], alu6);
    var val5 = select(0.0f, data1[(alu10+-28)], (alu4&alu6));
    var val6 = select(0.0f, data1[(alu10+-1)], alu5);
    var val7 = data1[(alu10+1)];
    var val8 = data1[(alu10+2)];
    var val9 = data1[(alu10+3)];
    var val10 = select(0.0f, data1[(alu10+4)], alu4);
    var val11 = select(0.0f, data1[(alu10+31)], (alu7&alu5));
    var val12 = select(0.0f, data1[(alu10+32)], alu7);
    var val13 = select(0.0f, data1[(alu10+33)], alu7);
    var val14 = select(0.0f, data1[(alu10+34)], alu7);
    var val15 = select(0.0f, data1[(alu10+35)], alu7);
    var val16 = select(0.0f, data1[(alu10+36)], (alu4&alu7));
    var val17 = data1[alu10];
    var val18 = data2[(alu9+1)];
    var val19 = data2[(alu9+2)];
    var val20 = data2[(alu9+3)];
    var val21 = data2[(alu9+4)];
    var val22 = data2[(alu9+5)];
    var val23 = data2[(alu9+6)];
    var val24 = data2[(alu9+7)];
    var val25 = data2[(alu9+8)];
    var val26 = data2[(alu9+5760)];
    var val27 = data2[(alu9+5761)];
    var val28 = data2[(alu9+5762)];
    var val29 = data2[(alu9+5763)];
    var val30 = data2[(alu9+5764)];
    var val31 = data2[(alu9+5765)];
    var val32 = data2[(alu9+5766)];
    var val33 = data2[(alu9+5767)];
    var val34 = data2[(alu9+5768)];
    acc4 = (acc4+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc6 = (acc6+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc7 = (acc7+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu9+11520)];
    var val36 = data2[(alu9+11521)];
    var val37 = data2[(alu9+11522)];
    var val38 = data2[(alu9+11523)];
    var val39 = data2[(alu9+11524)];
    var val40 = data2[(alu9+11525)];
    var val41 = data2[(alu9+11526)];
    var val42 = data2[(alu9+11527)];
    var val43 = data2[(alu9+11528)];
    acc8 = (acc8+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc9 = (acc9+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc11 = (acc11+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu9+17280)];
    var val45 = data2[(alu9+17281)];
    var val46 = data2[(alu9+17282)];
    var val47 = data2[(alu9+17283)];
    var val48 = data2[(alu9+17284)];
    var val49 = data2[(alu9+17285)];
    var val50 = data2[(alu9+17286)];
    var val51 = data2[(alu9+17287)];
    var val52 = data2[(alu9+17288)];
    acc12 = (acc12+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc13 = (acc13+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc14 = (acc14+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu9];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc1 = (acc1+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc2 = (acc2+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc3 = (acc3+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  data0[(alu8+1)] = acc1;
  data0[(alu8+2)] = acc2;
  data0[(alu8+3)] = acc3;
  data0[(alu8+1024)] = acc4;
  data0[(alu8+1025)] = acc5;
  data0[(alu8+1026)] = acc6;
  data0[(alu8+1027)] = acc7;
  data0[(alu8+2048)] = acc8;
  data0[(alu8+2049)] = acc9;
  data0[(alu8+2050)] = acc10;
  data0[(alu8+2051)] = acc11;
  data0[(alu8+3072)] = acc12;
  data0[(alu8+3073)] = acc13;
  data0[(alu8+3074)] = acc14;
  data0[(alu8+3075)] = acc15;
  data0[alu8] = acc0;
}`;

const r_2_20_16_8_16_80_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 20 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1<<5)+(lidx0<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = ((gidx1<<15)+(gidx2*655360)+alu0+(lidx0<<12)+alu1);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+1024);
  var alu11 = (alu6+1025);
  var alu12 = (alu6+1026);
  var alu13 = (alu6+1027);
  var alu14 = (alu6+2048);
  var alu15 = (alu6+2049);
  var alu16 = (alu6+2050);
  var alu17 = (alu6+2051);
  var alu18 = (alu6+3072);
  var alu19 = (alu6+3073);
  var alu20 = (alu6+3074);
  var alu21 = (alu6+3075);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu22 = ((gidx1*10240)+(lidx0*1280)+(ridx0<<2));
    var alu23 = (alu0+(gidx2*327680)+alu1+(ridx0<<12));
    var val0 = data1[(alu23+1)];
    var val1 = data1[(alu23+2)];
    var val2 = data1[(alu23+3)];
    var val3 = data1[(alu23+1024)];
    var val4 = data1[(alu23+1025)];
    var val5 = data1[(alu23+1026)];
    var val6 = data1[(alu23+1027)];
    var val7 = data1[(alu23+2048)];
    var val8 = data1[(alu23+2049)];
    var val9 = data1[(alu23+2050)];
    var val10 = data1[(alu23+2051)];
    var val11 = data1[(alu23+3072)];
    var val12 = data1[(alu23+3073)];
    var val13 = data1[(alu23+3074)];
    var val14 = data1[(alu23+3075)];
    var val15 = data1[alu23];
    var val16 = data2[(alu22+1)];
    var val17 = data2[(alu22+2)];
    var val18 = data2[(alu22+3)];
    var val19 = data2[(alu22+320)];
    var val20 = data2[(alu22+321)];
    var val21 = data2[(alu22+322)];
    var val22 = data2[(alu22+323)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu22+640)];
    var val24 = data2[(alu22+641)];
    var val25 = data2[(alu22+642)];
    var val26 = data2[(alu22+643)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu22+960)];
    var val28 = data2[(alu22+961)];
    var val29 = data2[(alu22+962)];
    var val30 = data2[(alu22+963)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu22];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[alu3];
  var val33 = data3[alu4];
  var val34 = data3[alu5];
  var val35 = data3[alu2];
  var val36 = data4[alu7];
  var val37 = data4[alu8];
  var val38 = data4[alu9];
  var val39 = data4[alu10];
  var val40 = data4[alu11];
  var val41 = data4[alu12];
  var val42 = data4[alu13];
  var val43 = data4[alu14];
  var val44 = data4[alu15];
  var val45 = data4[alu16];
  var val46 = data4[alu17];
  var val47 = data4[alu18];
  var val48 = data4[alu19];
  var val49 = data4[alu20];
  var val50 = data4[alu21];
  var val51 = data4[alu6];
  var val52 = data5[alu3];
  data0[alu10] = (val32+acc1+val39+val52);
  data0[alu11] = (val32+acc5+val40+val52);
  data0[alu12] = (val32+acc9+val41+val52);
  data0[alu13] = (val32+acc13+val42+val52);
  var val53 = data5[alu4];
  data0[alu14] = (val33+acc2+val43+val53);
  data0[alu15] = (val33+acc6+val44+val53);
  data0[alu16] = (val33+acc10+val45+val53);
  data0[alu17] = (val33+acc14+val46+val53);
  var val54 = data5[alu5];
  data0[alu18] = (val34+acc3+val47+val54);
  data0[alu19] = (val34+acc7+val48+val54);
  data0[alu20] = (val34+acc11+val49+val54);
  data0[alu21] = (val34+acc15+val50+val54);
  var val55 = data5[alu2];
  data0[alu7] = (val35+acc4+val36+val55);
  data0[alu8] = (val35+acc8+val37+val55);
  data0[alu9] = (val35+acc12+val38+val55);
  data0[alu6] = (val35+acc0+val51+val55);
}`;

const E_2_80_16_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 80 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(alu0/20));
  var alu2 = ((gidx1<<13)+(gidx2*655360)+(gidx0<<6)+(lidx0<<10)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  data0[alu3] = (val7+(val6*val5*(val0-val4)));
  data0[alu4] = (val7+(val6*val5*(val1-val4)));
  data0[alu5] = (val7+(val6*val5*(val2-val4)));
  data0[alu2] = (val7+(val6*val5*(val3-val4)));
}`;

const r_2_20_16_8_16_160_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 20 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*655360);
  var alu1 = (gidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx1<<5)+(lidx0<<2));
  var alu4 = ((gidx1<<15)+alu0+alu1+(lidx0<<12)+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var alu5 = ((gidx1*20480)+(lidx0*2560)+(ridx0<<2));
    var alu6 = (alu1+alu0+alu2+(ridx0<<12));
    var val0 = data1[(alu6+1)];
    var val1 = data1[(alu6+2)];
    var val2 = data1[(alu6+3)];
    var val3 = data1[(alu6+1024)];
    var val4 = data1[(alu6+1025)];
    var val5 = data1[(alu6+1026)];
    var val6 = data1[(alu6+1027)];
    var val7 = data1[(alu6+2048)];
    var val8 = data1[(alu6+2049)];
    var val9 = data1[(alu6+2050)];
    var val10 = data1[(alu6+2051)];
    var val11 = data1[(alu6+3072)];
    var val12 = data1[(alu6+3073)];
    var val13 = data1[(alu6+3074)];
    var val14 = data1[(alu6+3075)];
    var val15 = data1[alu6];
    var val16 = data2[(alu5+1)];
    var val17 = data2[(alu5+2)];
    var val18 = data2[(alu5+3)];
    var val19 = data2[(alu5+640)];
    var val20 = data2[(alu5+641)];
    var val21 = data2[(alu5+642)];
    var val22 = data2[(alu5+643)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu5+1280)];
    var val24 = data2[(alu5+1281)];
    var val25 = data2[(alu5+1282)];
    var val26 = data2[(alu5+1283)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu5+1920)];
    var val28 = data2[(alu5+1921)];
    var val29 = data2[(alu5+1922)];
    var val30 = data2[(alu5+1923)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu5];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[(alu3+1)];
  data0[(alu4+1024)] = (val32+acc1);
  data0[(alu4+1025)] = (val32+acc5);
  data0[(alu4+1026)] = (val32+acc9);
  data0[(alu4+1027)] = (val32+acc13);
  var val33 = data3[(alu3+2)];
  data0[(alu4+2048)] = (val33+acc2);
  data0[(alu4+2049)] = (val33+acc6);
  data0[(alu4+2050)] = (val33+acc10);
  data0[(alu4+2051)] = (val33+acc14);
  var val34 = data3[(alu3+3)];
  data0[(alu4+3072)] = (val34+acc3);
  data0[(alu4+3073)] = (val34+acc7);
  data0[(alu4+3074)] = (val34+acc11);
  data0[(alu4+3075)] = (val34+acc15);
  var val35 = data3[alu3];
  data0[(alu4+1)] = (val35+acc4);
  data0[(alu4+2)] = (val35+acc8);
  data0[(alu4+3)] = (val35+acc12);
  data0[alu4] = (val35+acc0);
}`;

const r_2_1024_16_40 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 1024 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 40; ridx0++) {
    var val0 = data1[(gidx0+(gidx1*655360)+(lidx0*40960)+(ridx0<<10))];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[(gidx0+(gidx1<<10))] = (acc1*0.0015625000232830644f);
  }
}`;

const r_2_1024_16_40n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 1024 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var alu0 = (gidx0+(gidx1<<10));
  var val0 = data2[alu0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 40; ridx0++) {
    var val1 = data1[(gidx0+(gidx1*655360)+(lidx0*40960)+(ridx0<<10))];
    var alu1 = (val1-val0);
    acc0 = (acc0+(alu1*alu1));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[alu0] = sqrt((1/((acc1*0.0015625000232830644f)+1e-05f)));
  }
}`;

const E_2_32_10_8_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 10 */
  var gidx1 = i32(gindex.y); /* 32 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*655360);
  var alu1 = (gidx0<<6);
  var alu2 = (gidx1<<5);
  var alu3 = (lidx0<<2);
  var alu4 = (alu2+(gidx2<<10)+alu3);
  var alu5 = (alu4+1);
  var alu6 = (alu4+2);
  var alu7 = (alu4+3);
  var alu8 = (lidx1<<2);
  var alu9 = ((gidx1*20480)+alu0+alu1+(lidx0*2560)+alu8);
  var alu10 = (alu1+alu8);
  var alu11 = (alu10+1);
  var alu12 = (alu10+2);
  var alu13 = (alu10+3);
  var alu14 = (alu2+alu0+(gidx0<<16)+alu3+(lidx1<<12));
  var val0 = data1[(alu14+1)];
  var val1 = data1[(alu14+2)];
  var val2 = data1[(alu14+3)];
  var val3 = data1[(alu14+1024)];
  var val4 = data1[(alu14+1025)];
  var val5 = data1[(alu14+1026)];
  var val6 = data1[(alu14+1027)];
  var val7 = data1[(alu14+2048)];
  var val8 = data1[(alu14+2049)];
  var val9 = data1[(alu14+2050)];
  var val10 = data1[(alu14+2051)];
  var val11 = data1[(alu14+3072)];
  var val12 = data1[(alu14+3073)];
  var val13 = data1[(alu14+3074)];
  var val14 = data1[(alu14+3075)];
  var val15 = data1[alu14];
  var val16 = data2[alu5];
  var val17 = data2[alu6];
  var val18 = data2[alu7];
  var val19 = data2[alu4];
  var val20 = data3[alu5];
  var val21 = data3[alu6];
  var val22 = data3[alu7];
  var val23 = data3[alu4];
  var val24 = data4[alu11];
  var val25 = data4[alu12];
  var val26 = data4[alu13];
  var val27 = data4[alu10];
  var val28 = data5[alu11];
  data0[(alu9+1)] = (val28+(val24*val23*(val3-val19)));
  data0[(alu9+641)] = (val28+(val24*val20*(val4-val16)));
  data0[(alu9+1281)] = (val28+(val24*val21*(val5-val17)));
  data0[(alu9+1921)] = (val28+(val24*val22*(val6-val18)));
  var val29 = data5[alu12];
  data0[(alu9+2)] = (val29+(val25*val23*(val7-val19)));
  data0[(alu9+642)] = (val29+(val25*val20*(val8-val16)));
  data0[(alu9+1282)] = (val29+(val25*val21*(val9-val17)));
  data0[(alu9+1922)] = (val29+(val25*val22*(val10-val18)));
  var val30 = data5[alu13];
  data0[(alu9+3)] = (val30+(val26*val23*(val11-val19)));
  data0[(alu9+643)] = (val30+(val26*val20*(val12-val16)));
  data0[(alu9+1283)] = (val30+(val26*val21*(val13-val17)));
  data0[(alu9+1923)] = (val30+(val26*val22*(val14-val18)));
  var val31 = data5[alu10];
  data0[(alu9+640)] = (val31+(val27*val20*(val0-val16)));
  data0[(alu9+1280)] = (val31+(val27*val21*(val1-val17)));
  data0[(alu9+1920)] = (val31+(val27*val22*(val2-val18)));
  data0[alu9] = (val31+(val27*val23*(val15-val19)));
}`;

const r_64_10_8_16_160_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 10 */
  var gidx1 = i32(gindex.y); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1*20480);
  var alu1 = (lidx0*2560);
  var alu2 = ((gidx0<<6)+alu0+alu1+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var alu3 = (ridx0<<2);
    var alu4 = ((gidx0*40960)+(lidx1*2560)+alu3);
    var alu5 = (alu0+alu1+alu3);
    var val0 = data1[(alu5+1)];
    var val1 = data1[(alu5+2)];
    var val2 = data1[(alu5+3)];
    var val3 = data1[(alu5+640)];
    var val4 = data1[(alu5+641)];
    var val5 = data1[(alu5+642)];
    var val6 = data1[(alu5+643)];
    var val7 = data1[(alu5+1280)];
    var val8 = data1[(alu5+1281)];
    var val9 = data1[(alu5+1282)];
    var val10 = data1[(alu5+1283)];
    var val11 = data1[(alu5+1920)];
    var val12 = data1[(alu5+1921)];
    var val13 = data1[(alu5+1922)];
    var val14 = data1[(alu5+1923)];
    var val15 = data1[alu5];
    var val16 = data2[(alu4+1)];
    var val17 = data2[(alu4+2)];
    var val18 = data2[(alu4+3)];
    var val19 = data2[(alu4+640)];
    var val20 = data2[(alu4+641)];
    var val21 = data2[(alu4+642)];
    var val22 = data2[(alu4+643)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu4+1280)];
    var val24 = data2[(alu4+1281)];
    var val25 = data2[(alu4+1282)];
    var val26 = data2[(alu4+1283)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu4+1920)];
    var val28 = data2[(alu4+1921)];
    var val29 = data2[(alu4+1922)];
    var val30 = data2[(alu4+1923)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu4];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[(alu2+1)] = acc4;
  data0[(alu2+2)] = acc8;
  data0[(alu2+3)] = acc12;
  data0[(alu2+640)] = acc1;
  data0[(alu2+641)] = acc5;
  data0[(alu2+642)] = acc9;
  data0[(alu2+643)] = acc13;
  data0[(alu2+1280)] = acc2;
  data0[(alu2+1281)] = acc6;
  data0[(alu2+1282)] = acc10;
  data0[(alu2+1283)] = acc14;
  data0[(alu2+1920)] = acc3;
  data0[(alu2+1921)] = acc7;
  data0[(alu2+1922)] = acc11;
  data0[(alu2+1923)] = acc15;
  data0[alu2] = acc0;
}`;

const r_2_8_32_16_8_16_20_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 512 */
  var gidx1 = i32(gindex.y); /* 8 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx1*80)+(gidx2*655360));
  var alu1 = (gidx0>>4);
  var alu2 = (gidx0&15);
  var alu3 = ((gidx1<<20)+(gidx2<<23)+(alu1<<15)+(alu2<<6)+(lidx0<<12)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 20; ridx0++) {
    var alu4 = (ridx0<<2);
    var alu5 = (alu0+(alu1*20480)+(lidx0*2560)+alu4);
    var alu6 = (alu0+(alu2*40960)+(lidx1*2560)+alu4);
    var val0 = data1[(alu5+1)];
    var val1 = data1[(alu5+2)];
    var val2 = data1[(alu5+3)];
    var val3 = data1[(alu5+640)];
    var val4 = data1[(alu5+641)];
    var val5 = data1[(alu5+642)];
    var val6 = data1[(alu5+643)];
    var val7 = data1[(alu5+1280)];
    var val8 = data1[(alu5+1281)];
    var val9 = data1[(alu5+1282)];
    var val10 = data1[(alu5+1283)];
    var val11 = data1[(alu5+1920)];
    var val12 = data1[(alu5+1921)];
    var val13 = data1[(alu5+1922)];
    var val14 = data1[(alu5+1923)];
    var val15 = data1[alu5];
    var val16 = data2[(alu6+1)];
    var val17 = data2[(alu6+2)];
    var val18 = data2[(alu6+3)];
    var val19 = data2[(alu6+640)];
    var val20 = data2[(alu6+641)];
    var val21 = data2[(alu6+642)];
    var val22 = data2[(alu6+643)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu6+1280)];
    var val24 = data2[(alu6+1281)];
    var val25 = data2[(alu6+1282)];
    var val26 = data2[(alu6+1283)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu6+1920)];
    var val28 = data2[(alu6+1921)];
    var val29 = data2[(alu6+1922)];
    var val30 = data2[(alu6+1923)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu6];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[(alu3+1)] = (acc4*0.11180339753627777f);
  data0[(alu3+2)] = (acc8*0.11180339753627777f);
  data0[(alu3+3)] = (acc12*0.11180339753627777f);
  data0[(alu3+1024)] = (acc1*0.11180339753627777f);
  data0[(alu3+1025)] = (acc5*0.11180339753627777f);
  data0[(alu3+1026)] = (acc9*0.11180339753627777f);
  data0[(alu3+1027)] = (acc13*0.11180339753627777f);
  data0[(alu3+2048)] = (acc2*0.11180339753627777f);
  data0[(alu3+2049)] = (acc6*0.11180339753627777f);
  data0[(alu3+2050)] = (acc10*0.11180339753627777f);
  data0[(alu3+2051)] = (acc14*0.11180339753627777f);
  data0[(alu3+3072)] = (acc3*0.11180339753627777f);
  data0[(alu3+3073)] = (acc7*0.11180339753627777f);
  data0[(alu3+3074)] = (acc11*0.11180339753627777f);
  data0[(alu3+3075)] = (acc15*0.11180339753627777f);
  data0[alu3] = (acc0*0.11180339753627777f);
}`;

const r_512_32_256_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 512 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = (f32(-inf(1.0)));
  for (var ridx0 = 0; ridx0 < 256; ridx0++) {
    var alu0 = ((gidx0<<15)+(lidx0<<10)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    var alu1 = select(val0,val3,(val0<val3));
    var alu2 = select(val1,alu1,(val1<alu1));
    var alu3 = select(val2,alu2,(val2<alu2));
    acc0 = select(acc0,alu3,(acc0<alu3));
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_128_32_256_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 128 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (alu0+3);
  var val0 = data2[alu1];
  var val1 = data2[alu2];
  var val2 = data2[alu3];
  var val3 = data2[alu0];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 256; ridx0++) {
    var alu4 = ((gidx0<<17)+(lidx0<<12)+(ridx0<<2));
    var val4 = data1[(alu4+1)];
    var val5 = data1[(alu4+2)];
    var val6 = data1[(alu4+3)];
    var val7 = data1[(alu4+1024)];
    var val8 = data1[(alu4+1025)];
    var val9 = data1[(alu4+1026)];
    var val10 = data1[(alu4+1027)];
    acc1 = (acc1+exp2(((val10-val0)*1.4426950408889634f))+exp2(((val9-val0)*1.4426950408889634f))+exp2(((val7-val0)*1.4426950408889634f))+exp2(((val8-val0)*1.4426950408889634f)));
    var val11 = data1[(alu4+2048)];
    var val12 = data1[(alu4+2049)];
    var val13 = data1[(alu4+2050)];
    var val14 = data1[(alu4+2051)];
    acc2 = (acc2+exp2(((val14-val1)*1.4426950408889634f))+exp2(((val13-val1)*1.4426950408889634f))+exp2(((val11-val1)*1.4426950408889634f))+exp2(((val12-val1)*1.4426950408889634f)));
    var val15 = data1[(alu4+3072)];
    var val16 = data1[(alu4+3073)];
    var val17 = data1[(alu4+3074)];
    var val18 = data1[(alu4+3075)];
    acc3 = (acc3+exp2(((val18-val2)*1.4426950408889634f))+exp2(((val17-val2)*1.4426950408889634f))+exp2(((val15-val2)*1.4426950408889634f))+exp2(((val16-val2)*1.4426950408889634f)));
    var val19 = data1[alu4];
    acc0 = (acc0+exp2(((val6-val3)*1.4426950408889634f))+exp2(((val5-val3)*1.4426950408889634f))+exp2(((val4-val3)*1.4426950408889634f))+exp2(((val19-val3)*1.4426950408889634f)));
  }
  data0[alu1] = acc1;
  data0[alu2] = acc2;
  data0[alu3] = acc3;
  data0[alu0] = acc0;
}`;

const E_2048_16_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 2048 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx0<<6)+(gidx1<<13)+(lidx0<<10)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var val0 = data1[alu2];
  var val1 = data1[alu3];
  var val2 = data1[alu4];
  var val3 = data1[alu1];
  var val4 = data2[alu0];
  var val5 = data3[alu0];
  var alu5 = (1/val5);
  data0[alu2] = (exp2(((val0-val4)*1.4426950408889634f))*alu5);
  data0[alu3] = (exp2(((val1-val4)*1.4426950408889634f))*alu5);
  data0[alu4] = (exp2(((val2-val4)*1.4426950408889634f))*alu5);
  data0[alu1] = (exp2(((val3-val4)*1.4426950408889634f))*alu5);
}`;

const r_2_4_16_5_2_16_4_256_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(2,16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 80 */
  var gidx1 = i32(gindex.y); /* 4 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var lidx2 = i32(lindex.z); /* 4 */
  var alu0 = (gidx2*655360);
  var alu1 = (gidx0/5);
  var alu2 = (lidx2<<2);
  var alu3 = ((gidx0%5)<<4);
  var alu4 = ((gidx1*163840)+alu0+(alu1*5120)+alu3+(lidx0*81920)+(lidx1*320)+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 256; ridx0++) {
    var alu5 = ((gidx1*160)+alu0+alu3+(lidx0*80)+alu2+(ridx0*2560));
    var alu6 = ((gidx1<<21)+(gidx2<<23)+(alu1<<16)+(lidx0<<20)+(lidx1<<12)+(ridx0<<2));
    var val0 = data1[(alu6+1)];
    var val1 = data1[(alu6+2)];
    var val2 = data1[(alu6+3)];
    var val3 = data1[(alu6+1024)];
    var val4 = data1[(alu6+1025)];
    var val5 = data1[(alu6+1026)];
    var val6 = data1[(alu6+1027)];
    var val7 = data1[(alu6+2048)];
    var val8 = data1[(alu6+2049)];
    var val9 = data1[(alu6+2050)];
    var val10 = data1[(alu6+2051)];
    var val11 = data1[(alu6+3072)];
    var val12 = data1[(alu6+3073)];
    var val13 = data1[(alu6+3074)];
    var val14 = data1[(alu6+3075)];
    var val15 = data1[alu6];
    var val16 = data2[(alu5+1)];
    var val17 = data2[(alu5+2)];
    var val18 = data2[(alu5+3)];
    var val19 = data2[(alu5+640)];
    var val20 = data2[(alu5+641)];
    var val21 = data2[(alu5+642)];
    var val22 = data2[(alu5+643)];
    var val23 = data2[(alu5+1280)];
    var val24 = data2[(alu5+1281)];
    var val25 = data2[(alu5+1282)];
    var val26 = data2[(alu5+1283)];
    var val27 = data2[(alu5+1920)];
    var val28 = data2[(alu5+1921)];
    acc4 = (acc4+(val0*val20)+(val15*val16)+(val1*val24)+(val2*val28));
    acc5 = (acc5+(val3*val16)+(val4*val20)+(val5*val24)+(val6*val28));
    acc6 = (acc6+(val7*val16)+(val8*val20)+(val9*val24)+(val10*val28));
    acc7 = (acc7+(val11*val16)+(val12*val20)+(val13*val24)+(val14*val28));
    var val29 = data2[(alu5+1922)];
    acc8 = (acc8+(val0*val21)+(val15*val17)+(val1*val25)+(val2*val29));
    acc9 = (acc9+(val3*val17)+(val4*val21)+(val5*val25)+(val6*val29));
    acc10 = (acc10+(val7*val17)+(val8*val21)+(val9*val25)+(val10*val29));
    acc11 = (acc11+(val11*val17)+(val12*val21)+(val13*val25)+(val14*val29));
    var val30 = data2[(alu5+1923)];
    acc12 = (acc12+(val0*val22)+(val15*val18)+(val1*val26)+(val2*val30));
    acc13 = (acc13+(val3*val18)+(val4*val22)+(val5*val26)+(val6*val30));
    acc14 = (acc14+(val7*val18)+(val8*val22)+(val9*val26)+(val10*val30));
    acc15 = (acc15+(val11*val18)+(val12*val22)+(val13*val26)+(val14*val30));
    var val31 = data2[alu5];
    acc0 = (acc0+(val0*val19)+(val15*val31)+(val1*val23)+(val2*val27));
    acc1 = (acc1+(val3*val31)+(val4*val19)+(val5*val23)+(val6*val27));
    acc2 = (acc2+(val7*val31)+(val8*val19)+(val9*val23)+(val10*val27));
    acc3 = (acc3+(val11*val31)+(val12*val19)+(val13*val23)+(val14*val27));
  }
  data0[(alu4+1)] = acc4;
  data0[(alu4+2)] = acc8;
  data0[(alu4+3)] = acc12;
  data0[(alu4+80)] = acc1;
  data0[(alu4+81)] = acc5;
  data0[(alu4+82)] = acc9;
  data0[(alu4+83)] = acc13;
  data0[(alu4+160)] = acc2;
  data0[(alu4+161)] = acc6;
  data0[(alu4+162)] = acc10;
  data0[(alu4+163)] = acc14;
  data0[(alu4+240)] = acc3;
  data0[(alu4+241)] = acc7;
  data0[(alu4+242)] = acc11;
  data0[(alu4+243)] = acc15;
  data0[alu4] = acc0;
}`;

const r_2_32_10_8_16_160_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 10 */
  var gidx1 = i32(gindex.y); /* 32 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*655360);
  var alu1 = (gidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx1*20480)+alu0+alu1+(lidx0*2560)+alu2);
  var alu4 = (alu1+alu2);
  var alu5 = ((gidx1<<5)+alu0+(gidx0<<16)+(lidx0<<2)+(lidx1<<12));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var alu6 = ((gidx1*2560)+(lidx0*320)+alu0+((ridx0/20)*81920));
    var alu7 = (ridx0<<2);
    var alu8 = ((gidx0*40960)+(lidx1*2560)+alu7);
    var alu9 = (alu6+((alu7+1)%80));
    var alu10 = (alu6+((alu7+2)%80));
    var alu11 = (alu6+((alu7+3)%80));
    var alu12 = (alu6+(alu7%80));
    var val0 = data2[(alu9+80)];
    var val1 = data2[(alu9+160)];
    var val2 = data2[(alu9+240)];
    var val3 = data2[(alu10+80)];
    var val4 = data2[(alu10+160)];
    var val5 = data2[(alu10+240)];
    var val6 = data2[(alu11+80)];
    var val7 = data2[(alu11+160)];
    var val8 = data2[(alu11+240)];
    var val9 = data2[(alu12+80)];
    var val10 = data2[(alu12+160)];
    var val11 = data2[(alu12+240)];
    var val12 = data2[alu9];
    var val13 = data2[alu10];
    var val14 = data2[alu11];
    var val15 = data2[alu12];
    var val16 = data3[(alu8+1)];
    var val17 = data3[(alu8+2)];
    var val18 = data3[(alu8+3)];
    var val19 = data3[(alu8+640)];
    var val20 = data3[(alu8+641)];
    var val21 = data3[(alu8+642)];
    var val22 = data3[(alu8+643)];
    acc4 = (acc4+(val12*val20)+(val15*val19)+(val13*val21)+(val14*val22));
    acc5 = (acc5+(val0*val20)+(val9*val19)+(val3*val21)+(val6*val22));
    acc6 = (acc6+(val1*val20)+(val10*val19)+(val4*val21)+(val7*val22));
    acc7 = (acc7+(val2*val20)+(val11*val19)+(val5*val21)+(val8*val22));
    var val23 = data3[(alu8+1280)];
    var val24 = data3[(alu8+1281)];
    var val25 = data3[(alu8+1282)];
    var val26 = data3[(alu8+1283)];
    acc8 = (acc8+(val12*val24)+(val15*val23)+(val13*val25)+(val14*val26));
    acc9 = (acc9+(val0*val24)+(val9*val23)+(val3*val25)+(val6*val26));
    acc10 = (acc10+(val1*val24)+(val10*val23)+(val4*val25)+(val7*val26));
    acc11 = (acc11+(val2*val24)+(val11*val23)+(val5*val25)+(val8*val26));
    var val27 = data3[(alu8+1920)];
    var val28 = data3[(alu8+1921)];
    var val29 = data3[(alu8+1922)];
    var val30 = data3[(alu8+1923)];
    acc12 = (acc12+(val12*val28)+(val15*val27)+(val13*val29)+(val14*val30));
    acc13 = (acc13+(val0*val28)+(val9*val27)+(val3*val29)+(val6*val30));
    acc14 = (acc14+(val1*val28)+(val10*val27)+(val4*val29)+(val7*val30));
    acc15 = (acc15+(val2*val28)+(val11*val27)+(val5*val29)+(val8*val30));
    var val31 = data3[alu8];
    acc0 = (acc0+(val12*val16)+(val15*val31)+(val13*val17)+(val14*val18));
    acc1 = (acc1+(val0*val16)+(val9*val31)+(val3*val17)+(val6*val18));
    acc2 = (acc2+(val1*val16)+(val10*val31)+(val4*val17)+(val7*val18));
    acc3 = (acc3+(val2*val16)+(val11*val31)+(val5*val17)+(val8*val18));
  }
  var val32 = data1[(alu5+1)];
  var val33 = data1[(alu5+2)];
  var val34 = data1[(alu5+3)];
  var val35 = data1[(alu5+1024)];
  var val36 = data1[(alu5+1025)];
  var val37 = data1[(alu5+1026)];
  var val38 = data1[(alu5+1027)];
  var val39 = data1[(alu5+2048)];
  var val40 = data1[(alu5+2049)];
  var val41 = data1[(alu5+2050)];
  var val42 = data1[(alu5+2051)];
  var val43 = data1[(alu5+3072)];
  var val44 = data1[(alu5+3073)];
  var val45 = data1[(alu5+3074)];
  var val46 = data1[(alu5+3075)];
  var val47 = data1[alu5];
  var val48 = data4[(alu4+1)];
  data0[(alu3+1)] = (val35+val48+acc4);
  data0[(alu3+641)] = (val36+val48+acc5);
  data0[(alu3+1281)] = (val37+val48+acc6);
  data0[(alu3+1921)] = (val38+val48+acc7);
  var val49 = data4[(alu4+2)];
  data0[(alu3+2)] = (val39+val49+acc8);
  data0[(alu3+642)] = (val40+val49+acc9);
  data0[(alu3+1282)] = (val41+val49+acc10);
  data0[(alu3+1922)] = (val42+val49+acc11);
  var val50 = data4[(alu4+3)];
  data0[(alu3+3)] = (val43+val50+acc12);
  data0[(alu3+643)] = (val44+val50+acc13);
  data0[(alu3+1283)] = (val45+val50+acc14);
  data0[(alu3+1923)] = (val46+val50+acc15);
  var val51 = data4[alu4];
  data0[(alu3+640)] = (val32+val51+acc1);
  data0[(alu3+1280)] = (val33+val51+acc2);
  data0[(alu3+1920)] = (val34+val51+acc3);
  data0[alu3] = (val47+val51+acc0);
}`;

const r_2048_16_40 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2048 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 40; ridx0++) {
    var val0 = data1[((gidx0*640)+(lidx0*40)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*0.0015625000232830644f);
  }
}`;

const r_2048_16_40n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2048 */
  var lidx0 = i32(lindex.x); /* 16 */
  var val0 = data2[gidx0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 40; ridx0++) {
    var val1 = data1[((gidx0*640)+(lidx0*40)+ridx0)];
    var alu0 = (val1-val0);
    acc0 = (acc0+(alu0*alu0));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[gidx0] = sqrt((1/((acc1*0.0015625000232830644f)+1e-05f)));
  }
}`;

const E_64_10_8_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 10 */
  var gidx1 = i32(gindex.y); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = ((gidx1<<5)+(lidx0<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var alu5 = (lidx1<<2);
  var alu6 = (alu0+(gidx1*20480)+(lidx0*2560)+alu5);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+640);
  var alu11 = (alu6+641);
  var alu12 = (alu6+642);
  var alu13 = (alu6+643);
  var alu14 = (alu6+1280);
  var alu15 = (alu6+1281);
  var alu16 = (alu6+1282);
  var alu17 = (alu6+1283);
  var alu18 = (alu6+1920);
  var alu19 = (alu6+1921);
  var alu20 = (alu6+1922);
  var alu21 = (alu6+1923);
  var alu22 = (alu0+alu5);
  var alu23 = (alu22+1);
  var alu24 = (alu22+2);
  var alu25 = (alu22+3);
  var val0 = data1[alu7];
  var val1 = data1[alu8];
  var val2 = data1[alu9];
  var val3 = data1[alu10];
  var val4 = data1[alu11];
  var val5 = data1[alu12];
  var val6 = data1[alu13];
  var val7 = data1[alu14];
  var val8 = data1[alu15];
  var val9 = data1[alu16];
  var val10 = data1[alu17];
  var val11 = data1[alu18];
  var val12 = data1[alu19];
  var val13 = data1[alu20];
  var val14 = data1[alu21];
  var val15 = data1[alu6];
  var val16 = data2[alu2];
  var val17 = data2[alu3];
  var val18 = data2[alu4];
  var val19 = data2[alu1];
  var val20 = data3[alu2];
  var val21 = data3[alu3];
  var val22 = data3[alu4];
  var val23 = data3[alu1];
  var val24 = data4[alu23];
  var val25 = data4[alu24];
  var val26 = data4[alu25];
  var val27 = data4[alu22];
  var val28 = data5[alu23];
  data0[alu7] = (val28+(val24*val23*(val0-val19)));
  data0[alu11] = (val28+(val24*val20*(val4-val16)));
  data0[alu15] = (val28+(val24*val21*(val8-val17)));
  data0[alu19] = (val28+(val24*val22*(val12-val18)));
  var val29 = data5[alu24];
  data0[alu8] = (val29+(val25*val23*(val1-val19)));
  data0[alu12] = (val29+(val25*val20*(val5-val16)));
  data0[alu16] = (val29+(val25*val21*(val9-val17)));
  data0[alu20] = (val29+(val25*val22*(val13-val18)));
  var val30 = data5[alu25];
  data0[alu9] = (val30+(val26*val23*(val2-val19)));
  data0[alu13] = (val30+(val26*val20*(val6-val16)));
  data0[alu17] = (val30+(val26*val21*(val10-val17)));
  data0[alu21] = (val30+(val26*val22*(val14-val18)));
  var val31 = data5[alu22];
  data0[alu10] = (val31+(val27*val20*(val3-val16)));
  data0[alu14] = (val31+(val27*val21*(val7-val17)));
  data0[alu18] = (val31+(val27*val22*(val11-val18)));
  data0[alu6] = (val31+(val27*val23*(val15-val19)));
}`;

const r_2_16_77_8_16_20_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var gidx1 = i32(gindex.y); /* 16 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0*80);
  var alu1 = (gidx0+(gidx1*4928)+(gidx2*630784)+(lidx0*78848)+(lidx1*308));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 20; ridx0++) {
    var alu2 = (ridx0<<2);
    var alu3 = ((gidx1*40960)+(gidx2*655360)+alu0+(lidx1*2560)+alu2);
    var alu4 = ((gidx0*640)+(gidx2*49280)+alu0+alu2);
    var val0 = data1[(alu3+1)];
    var val1 = data1[(alu3+2)];
    var val2 = data1[(alu3+3)];
    var val3 = data1[(alu3+640)];
    var val4 = data1[(alu3+641)];
    var val5 = data1[(alu3+642)];
    var val6 = data1[(alu3+643)];
    var val7 = data1[(alu3+1280)];
    var val8 = data1[(alu3+1281)];
    var val9 = data1[(alu3+1282)];
    var val10 = data1[(alu3+1283)];
    var val11 = data1[(alu3+1920)];
    var val12 = data1[(alu3+1921)];
    var val13 = data1[(alu3+1922)];
    var val14 = data1[(alu3+1923)];
    var val15 = data1[alu3];
    var val16 = data2[(alu4+1)];
    var val17 = data2[(alu4+2)];
    var val18 = data2[(alu4+3)];
    var val19 = data2[alu4];
    acc0 = (acc0+(val0*val16)+(val15*val19)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val19)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val19)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val19)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[alu1] = (acc0*0.11180339753627777f);
  data0[(alu1+77)] = (acc1*0.11180339753627777f);
  data0[(alu1+154)] = (acc2*0.11180339753627777f);
  data0[(alu1+231)] = (acc3*0.11180339753627777f);
}`;

const r_512_32_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 512 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = (f32(-inf(1.0)));
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var val0 = data1[((gidx0*2464)+(lidx0*77)+ridx0)];
    acc0 = select(acc0,val0,(acc0<val0));
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_128_32_77_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 128 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (alu0+3);
  var val0 = data2[alu1];
  var val1 = data2[alu2];
  var val2 = data2[alu3];
  var val3 = data2[alu0];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var alu4 = ((gidx0*9856)+(lidx0*308)+ridx0);
    var val4 = data1[(alu4+77)];
    acc1 = (acc1+exp2(((val4-val0)*1.4426950408889634f)));
    var val5 = data1[(alu4+154)];
    acc2 = (acc2+exp2(((val5-val1)*1.4426950408889634f)));
    var val6 = data1[(alu4+231)];
    acc3 = (acc3+exp2(((val6-val2)*1.4426950408889634f)));
    var val7 = data1[alu4];
    acc0 = (acc0+exp2(((val7-val3)*1.4426950408889634f)));
  }
  data0[alu1] = acc1;
  data0[alu2] = acc2;
  data0[alu3] = acc3;
  data0[alu0] = acc0;
}`;

const E_128_77_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var gidx1 = i32(gindex.y); /* 128 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = (gidx0+(gidx1*9856)+(lidx0*308));
  var alu1 = (alu0+77);
  var alu2 = (alu0+154);
  var alu3 = (alu0+231);
  var alu4 = ((gidx1<<7)+(lidx0<<2));
  var alu5 = (alu4+1);
  var alu6 = (alu4+2);
  var alu7 = (alu4+3);
  var val0 = data1[alu0];
  var val1 = data1[alu1];
  var val2 = data1[alu2];
  var val3 = data1[alu3];
  var val4 = data2[alu5];
  var val5 = data2[alu6];
  var val6 = data2[alu7];
  var val7 = data2[alu4];
  var val8 = data3[alu5];
  data0[alu1] = (exp2(((val1-val4)*1.4426950408889634f))*(1/val8));
  var val9 = data3[alu6];
  data0[alu2] = (exp2(((val2-val5)*1.4426950408889634f))*(1/val9));
  var val10 = data3[alu7];
  data0[alu3] = (exp2(((val3-val6)*1.4426950408889634f))*(1/val10));
  var val11 = data3[alu4];
  data0[alu0] = (exp2(((val0-val7)*1.4426950408889634f))*(1/val11));
}`;

const r_2_4_16_5_2_16_4_77_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(2,16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 80 */
  var gidx1 = i32(gindex.y); /* 4 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var lidx2 = i32(lindex.z); /* 4 */
  var alu0 = (gidx0/5);
  var alu1 = (lidx2<<2);
  var alu2 = ((gidx0%5)<<4);
  var alu3 = ((gidx1*163840)+(gidx2*655360)+(alu0*5120)+alu2+(lidx0*81920)+(lidx1*320)+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var alu4 = ((gidx1*157696)+(gidx2*630784)+(alu0*4928)+(lidx0*78848)+(lidx1*308)+ridx0);
    var alu5 = ((gidx1*160)+(gidx2*49280)+alu2+(lidx0*80)+alu1+(ridx0*640));
    var val0 = data1[(alu4+77)];
    var val1 = data1[(alu4+154)];
    var val2 = data1[(alu4+231)];
    var val3 = data1[alu4];
    var val4 = data2[(alu5+1)];
    acc4 = (acc4+(val3*val4));
    acc5 = (acc5+(val0*val4));
    acc6 = (acc6+(val1*val4));
    acc7 = (acc7+(val2*val4));
    var val5 = data2[(alu5+2)];
    acc8 = (acc8+(val3*val5));
    acc9 = (acc9+(val0*val5));
    acc10 = (acc10+(val1*val5));
    acc11 = (acc11+(val2*val5));
    var val6 = data2[(alu5+3)];
    acc12 = (acc12+(val3*val6));
    acc13 = (acc13+(val0*val6));
    acc14 = (acc14+(val1*val6));
    acc15 = (acc15+(val2*val6));
    var val7 = data2[alu5];
    acc0 = (acc0+(val3*val7));
    acc1 = (acc1+(val0*val7));
    acc2 = (acc2+(val1*val7));
    acc3 = (acc3+(val2*val7));
  }
  data0[(alu3+1)] = acc4;
  data0[(alu3+2)] = acc8;
  data0[(alu3+3)] = acc12;
  data0[(alu3+80)] = acc1;
  data0[(alu3+81)] = acc5;
  data0[(alu3+82)] = acc9;
  data0[(alu3+83)] = acc13;
  data0[(alu3+160)] = acc2;
  data0[(alu3+161)] = acc6;
  data0[(alu3+162)] = acc10;
  data0[(alu3+163)] = acc14;
  data0[(alu3+240)] = acc3;
  data0[(alu3+241)] = acc7;
  data0[(alu3+242)] = acc11;
  data0[(alu3+243)] = acc15;
  data0[alu3] = acc0;
}`;

const r_2_32_10_8_16_160_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 10 */
  var gidx1 = i32(gindex.y); /* 32 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*655360);
  var alu1 = (gidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx1*20480)+alu0+alu1+(lidx0*2560)+alu2);
  var alu4 = (alu3+1);
  var alu5 = (alu3+2);
  var alu6 = (alu3+3);
  var alu7 = (alu3+640);
  var alu8 = (alu3+641);
  var alu9 = (alu3+642);
  var alu10 = (alu3+643);
  var alu11 = (alu3+1280);
  var alu12 = (alu3+1281);
  var alu13 = (alu3+1282);
  var alu14 = (alu3+1283);
  var alu15 = (alu3+1920);
  var alu16 = (alu3+1921);
  var alu17 = (alu3+1922);
  var alu18 = (alu3+1923);
  var alu19 = (alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var alu20 = ((gidx1*2560)+(lidx0*320)+alu0+((ridx0/20)*81920));
    var alu21 = (ridx0<<2);
    var alu22 = ((gidx0*40960)+(lidx1*2560)+alu21);
    var alu23 = (alu20+((alu21+1)%80));
    var alu24 = (alu20+((alu21+2)%80));
    var alu25 = (alu20+((alu21+3)%80));
    var alu26 = (alu20+(alu21%80));
    var val0 = data2[(alu23+80)];
    var val1 = data2[(alu23+160)];
    var val2 = data2[(alu23+240)];
    var val3 = data2[(alu24+80)];
    var val4 = data2[(alu24+160)];
    var val5 = data2[(alu24+240)];
    var val6 = data2[(alu25+80)];
    var val7 = data2[(alu25+160)];
    var val8 = data2[(alu25+240)];
    var val9 = data2[(alu26+80)];
    var val10 = data2[(alu26+160)];
    var val11 = data2[(alu26+240)];
    var val12 = data2[alu23];
    var val13 = data2[alu24];
    var val14 = data2[alu25];
    var val15 = data2[alu26];
    var val16 = data3[(alu22+1)];
    var val17 = data3[(alu22+2)];
    var val18 = data3[(alu22+3)];
    var val19 = data3[(alu22+640)];
    var val20 = data3[(alu22+641)];
    var val21 = data3[(alu22+642)];
    var val22 = data3[(alu22+643)];
    acc4 = (acc4+(val12*val20)+(val15*val19)+(val13*val21)+(val14*val22));
    acc5 = (acc5+(val0*val20)+(val9*val19)+(val3*val21)+(val6*val22));
    acc6 = (acc6+(val1*val20)+(val10*val19)+(val4*val21)+(val7*val22));
    acc7 = (acc7+(val2*val20)+(val11*val19)+(val5*val21)+(val8*val22));
    var val23 = data3[(alu22+1280)];
    var val24 = data3[(alu22+1281)];
    var val25 = data3[(alu22+1282)];
    var val26 = data3[(alu22+1283)];
    acc8 = (acc8+(val12*val24)+(val15*val23)+(val13*val25)+(val14*val26));
    acc9 = (acc9+(val0*val24)+(val9*val23)+(val3*val25)+(val6*val26));
    acc10 = (acc10+(val1*val24)+(val10*val23)+(val4*val25)+(val7*val26));
    acc11 = (acc11+(val2*val24)+(val11*val23)+(val5*val25)+(val8*val26));
    var val27 = data3[(alu22+1920)];
    var val28 = data3[(alu22+1921)];
    var val29 = data3[(alu22+1922)];
    var val30 = data3[(alu22+1923)];
    acc12 = (acc12+(val12*val28)+(val15*val27)+(val13*val29)+(val14*val30));
    acc13 = (acc13+(val0*val28)+(val9*val27)+(val3*val29)+(val6*val30));
    acc14 = (acc14+(val1*val28)+(val10*val27)+(val4*val29)+(val7*val30));
    acc15 = (acc15+(val2*val28)+(val11*val27)+(val5*val29)+(val8*val30));
    var val31 = data3[alu22];
    acc0 = (acc0+(val12*val16)+(val15*val31)+(val13*val17)+(val14*val18));
    acc1 = (acc1+(val0*val16)+(val9*val31)+(val3*val17)+(val6*val18));
    acc2 = (acc2+(val1*val16)+(val10*val31)+(val4*val17)+(val7*val18));
    acc3 = (acc3+(val2*val16)+(val11*val31)+(val5*val17)+(val8*val18));
  }
  var val32 = data1[alu4];
  var val33 = data1[alu5];
  var val34 = data1[alu6];
  var val35 = data1[alu7];
  var val36 = data1[alu8];
  var val37 = data1[alu9];
  var val38 = data1[alu10];
  var val39 = data1[alu11];
  var val40 = data1[alu12];
  var val41 = data1[alu13];
  var val42 = data1[alu14];
  var val43 = data1[alu15];
  var val44 = data1[alu16];
  var val45 = data1[alu17];
  var val46 = data1[alu18];
  var val47 = data1[alu3];
  var val48 = data4[(alu19+1)];
  data0[alu4] = (val32+val48+acc4);
  data0[alu8] = (val36+val48+acc5);
  data0[alu12] = (val40+val48+acc6);
  data0[alu16] = (val44+val48+acc7);
  var val49 = data4[(alu19+2)];
  data0[alu5] = (val33+val49+acc8);
  data0[alu9] = (val37+val49+acc9);
  data0[alu13] = (val41+val49+acc10);
  data0[alu17] = (val45+val49+acc11);
  var val50 = data4[(alu19+3)];
  data0[alu6] = (val34+val50+acc12);
  data0[alu10] = (val38+val50+acc13);
  data0[alu14] = (val42+val50+acc14);
  data0[alu18] = (val46+val50+acc15);
  var val51 = data4[alu19];
  data0[alu7] = (val35+val51+acc1);
  data0[alu11] = (val39+val51+acc2);
  data0[alu15] = (val43+val51+acc3);
  data0[alu3] = (val47+val51+acc0);
}`;

const r_64_80_8_16_160_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 80 */
  var gidx1 = i32(gindex.y); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1*163840)+(lidx0*20480)+alu1);
  var alu3 = (alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var alu4 = (ridx0<<2);
    var alu5 = ((gidx0*40960)+(lidx1*2560)+alu4);
    var alu6 = ((gidx1*20480)+(lidx0*2560)+alu4);
    var val0 = data1[(alu6+1)];
    var val1 = data1[(alu6+2)];
    var val2 = data1[(alu6+3)];
    var val3 = data1[(alu6+640)];
    var val4 = data1[(alu6+641)];
    var val5 = data1[(alu6+642)];
    var val6 = data1[(alu6+643)];
    var val7 = data1[(alu6+1280)];
    var val8 = data1[(alu6+1281)];
    var val9 = data1[(alu6+1282)];
    var val10 = data1[(alu6+1283)];
    var val11 = data1[(alu6+1920)];
    var val12 = data1[(alu6+1921)];
    var val13 = data1[(alu6+1922)];
    var val14 = data1[(alu6+1923)];
    var val15 = data1[alu6];
    var val16 = data2[(alu5+1)];
    var val17 = data2[(alu5+2)];
    var val18 = data2[(alu5+3)];
    var val19 = data2[(alu5+640)];
    var val20 = data2[(alu5+641)];
    var val21 = data2[(alu5+642)];
    var val22 = data2[(alu5+643)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu5+1280)];
    var val24 = data2[(alu5+1281)];
    var val25 = data2[(alu5+1282)];
    var val26 = data2[(alu5+1283)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu5+1920)];
    var val28 = data2[(alu5+1921)];
    var val29 = data2[(alu5+1922)];
    var val30 = data2[(alu5+1923)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu5];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data3[(alu3+1)];
  data0[(alu2+1)] = (val32+acc4);
  data0[(alu2+5121)] = (val32+acc5);
  data0[(alu2+10241)] = (val32+acc6);
  data0[(alu2+15361)] = (val32+acc7);
  var val33 = data3[(alu3+2)];
  data0[(alu2+2)] = (val33+acc8);
  data0[(alu2+5122)] = (val33+acc9);
  data0[(alu2+10242)] = (val33+acc10);
  data0[(alu2+15362)] = (val33+acc11);
  var val34 = data3[(alu3+3)];
  data0[(alu2+3)] = (val34+acc12);
  data0[(alu2+5123)] = (val34+acc13);
  data0[(alu2+10243)] = (val34+acc14);
  data0[(alu2+15363)] = (val34+acc15);
  var val35 = data3[alu3];
  data0[(alu2+5120)] = (val35+acc1);
  data0[(alu2+10240)] = (val35+acc2);
  data0[(alu2+15360)] = (val35+acc3);
  data0[alu2] = (val35+acc0);
}`;

const E_256_40_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 40 */
  var gidx1 = i32(gindex.y); /* 256 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1*20480)+(lidx0*2560)+alu1);
  var alu3 = (alu0+(gidx1*40960)+(lidx0*5120)+alu1);
  var val0 = data1[(alu3+1)];
  var val1 = data1[(alu3+2)];
  var val2 = data1[(alu3+3)];
  var val3 = data1[(alu3+2560)];
  var val4 = data1[(alu3+2561)];
  data0[(alu2+1)] = (val0*(1/(exp2(((val4+(val4*val4*val4*0.044715f))*-2.302208198144325f))+1.0f))*val4);
  var val5 = data1[(alu3+2562)];
  data0[(alu2+2)] = (val1*(1/(exp2(((val5+(val5*val5*val5*0.044715f))*-2.302208198144325f))+1.0f))*val5);
  var val6 = data1[(alu3+2563)];
  data0[(alu2+3)] = (val2*(1/(exp2(((val6+(val6*val6*val6*0.044715f))*-2.302208198144325f))+1.0f))*val6);
  var val7 = data1[alu3];
  data0[alu2] = (val7*(1/(exp2(((val3+(val3*val3*val3*0.044715f))*-2.302208198144325f))+1.0f))*val3);
}`;

const r_64_10_8_16_640_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 10 */
  var gidx1 = i32(gindex.y); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1*20480)+(lidx0*2560)+alu1);
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = (alu2+640);
  var alu7 = (alu2+641);
  var alu8 = (alu2+642);
  var alu9 = (alu2+643);
  var alu10 = (alu2+1280);
  var alu11 = (alu2+1281);
  var alu12 = (alu2+1282);
  var alu13 = (alu2+1283);
  var alu14 = (alu2+1920);
  var alu15 = (alu2+1921);
  var alu16 = (alu2+1922);
  var alu17 = (alu2+1923);
  var alu18 = (alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 640; ridx0++) {
    var alu19 = (ridx0<<2);
    var alu20 = ((gidx0*163840)+(lidx1*10240)+alu19);
    var alu21 = ((gidx1*81920)+(lidx0*10240)+alu19);
    var val0 = data2[(alu21+1)];
    var val1 = data2[(alu21+2)];
    var val2 = data2[(alu21+3)];
    var val3 = data2[(alu21+2560)];
    var val4 = data2[(alu21+2561)];
    var val5 = data2[(alu21+2562)];
    var val6 = data2[(alu21+2563)];
    var val7 = data2[(alu21+5120)];
    var val8 = data2[(alu21+5121)];
    var val9 = data2[(alu21+5122)];
    var val10 = data2[(alu21+5123)];
    var val11 = data2[(alu21+7680)];
    var val12 = data2[(alu21+7681)];
    var val13 = data2[(alu21+7682)];
    var val14 = data2[(alu21+7683)];
    var val15 = data2[alu21];
    var val16 = data3[(alu20+1)];
    var val17 = data3[(alu20+2)];
    var val18 = data3[(alu20+3)];
    var val19 = data3[(alu20+2560)];
    var val20 = data3[(alu20+2561)];
    var val21 = data3[(alu20+2562)];
    var val22 = data3[(alu20+2563)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data3[(alu20+5120)];
    var val24 = data3[(alu20+5121)];
    var val25 = data3[(alu20+5122)];
    var val26 = data3[(alu20+5123)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data3[(alu20+7680)];
    var val28 = data3[(alu20+7681)];
    var val29 = data3[(alu20+7682)];
    var val30 = data3[(alu20+7683)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data3[alu20];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data1[alu3];
  var val33 = data1[alu4];
  var val34 = data1[alu5];
  var val35 = data1[alu6];
  var val36 = data1[alu7];
  var val37 = data1[alu8];
  var val38 = data1[alu9];
  var val39 = data1[alu10];
  var val40 = data1[alu11];
  var val41 = data1[alu12];
  var val42 = data1[alu13];
  var val43 = data1[alu14];
  var val44 = data1[alu15];
  var val45 = data1[alu16];
  var val46 = data1[alu17];
  var val47 = data1[alu2];
  var val48 = data4[(alu18+1)];
  data0[alu3] = (val32+val48+acc4);
  data0[alu7] = (val36+val48+acc5);
  data0[alu11] = (val40+val48+acc6);
  data0[alu15] = (val44+val48+acc7);
  var val49 = data4[(alu18+2)];
  data0[alu4] = (val33+val49+acc8);
  data0[alu8] = (val37+val49+acc9);
  data0[alu12] = (val41+val49+acc10);
  data0[alu16] = (val45+val49+acc11);
  var val50 = data4[(alu18+3)];
  data0[alu5] = (val34+val50+acc12);
  data0[alu9] = (val38+val50+acc13);
  data0[alu13] = (val42+val50+acc14);
  data0[alu17] = (val46+val50+acc15);
  var val51 = data4[alu18];
  data0[alu6] = (val35+val51+acc1);
  data0[alu10] = (val39+val51+acc2);
  data0[alu14] = (val43+val51+acc3);
  data0[alu2] = (val47+val51+acc0);
}`;

const r_2_20_16_8_16_160_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 20 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*655360);
  var alu1 = ((gidx1<<5)+(lidx0<<2));
  var alu2 = ((gidx1<<15)+alu0+(gidx0<<6)+(lidx0<<12)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = (alu2+1024);
  var alu7 = (alu2+1025);
  var alu8 = (alu2+1026);
  var alu9 = (alu2+1027);
  var alu10 = (alu2+2048);
  var alu11 = (alu2+2049);
  var alu12 = (alu2+2050);
  var alu13 = (alu2+2051);
  var alu14 = (alu2+3072);
  var alu15 = (alu2+3073);
  var alu16 = (alu2+3074);
  var alu17 = (alu2+3075);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var alu18 = (ridx0<<2);
    var alu19 = ((gidx0*40960)+alu0+(lidx1*2560)+alu18);
    var alu20 = ((gidx1*20480)+(lidx0*2560)+alu18);
    var val0 = data1[(alu19+1)];
    var val1 = data1[(alu19+2)];
    var val2 = data1[(alu19+3)];
    var val3 = data1[(alu19+640)];
    var val4 = data1[(alu19+641)];
    var val5 = data1[(alu19+642)];
    var val6 = data1[(alu19+643)];
    var val7 = data1[(alu19+1280)];
    var val8 = data1[(alu19+1281)];
    var val9 = data1[(alu19+1282)];
    var val10 = data1[(alu19+1283)];
    var val11 = data1[(alu19+1920)];
    var val12 = data1[(alu19+1921)];
    var val13 = data1[(alu19+1922)];
    var val14 = data1[(alu19+1923)];
    var val15 = data1[alu19];
    var val16 = data2[(alu20+1)];
    var val17 = data2[(alu20+2)];
    var val18 = data2[(alu20+3)];
    var val19 = data2[(alu20+640)];
    var val20 = data2[(alu20+641)];
    var val21 = data2[(alu20+642)];
    var val22 = data2[(alu20+643)];
    acc1 = (acc1+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc9 = (acc9+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc13 = (acc13+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu20+1280)];
    var val24 = data2[(alu20+1281)];
    var val25 = data2[(alu20+1282)];
    var val26 = data2[(alu20+1283)];
    acc2 = (acc2+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc6 = (acc6+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc14 = (acc14+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu20+1920)];
    var val28 = data2[(alu20+1921)];
    var val29 = data2[(alu20+1922)];
    var val30 = data2[(alu20+1923)];
    acc3 = (acc3+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc7 = (acc7+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc11 = (acc11+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu20];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc4 = (acc4+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc8 = (acc8+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc12 = (acc12+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data3[(alu1+1)];
  var val33 = data3[(alu1+2)];
  var val34 = data3[(alu1+3)];
  var val35 = data3[alu1];
  var val36 = data4[alu3];
  data0[alu3] = (val36+val35+acc4);
  var val37 = data4[alu4];
  data0[alu4] = (val37+val35+acc8);
  var val38 = data4[alu5];
  data0[alu5] = (val38+val35+acc12);
  var val39 = data4[alu6];
  data0[alu6] = (val39+val32+acc1);
  var val40 = data4[alu7];
  data0[alu7] = (val40+val32+acc5);
  var val41 = data4[alu8];
  data0[alu8] = (val41+val32+acc9);
  var val42 = data4[alu9];
  data0[alu9] = (val42+val32+acc13);
  var val43 = data4[alu10];
  data0[alu10] = (val43+val33+acc2);
  var val44 = data4[alu11];
  data0[alu11] = (val44+val33+acc6);
  var val45 = data4[alu12];
  data0[alu12] = (val45+val33+acc10);
  var val46 = data4[alu13];
  data0[alu13] = (val46+val33+acc14);
  var val47 = data4[alu14];
  data0[alu14] = (val47+val34+acc3);
  var val48 = data4[alu15];
  data0[alu15] = (val48+val34+acc7);
  var val49 = data4[alu16];
  data0[alu16] = (val49+val34+acc11);
  var val50 = data4[alu17];
  data0[alu17] = (val50+val34+acc15);
  var val51 = data4[alu2];
  data0[alu2] = (val51+val35+acc0);
}`;

const r_2_160_2_16_8_640_4_4_3_3n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 160 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = (gidx2*655360);
  var alu1 = (gidx0<<9);
  var alu2 = (lidx0<<5);
  var alu3 = (lidx1<<2);
  var alu4 = (lidx1<7);
  var alu5 = ((lidx1<1)!=true);
  var alu6 = (((gidx0+lidx0)<1)!=true);
  var alu7 = ((lidx0+(gidx0<<4))<31);
  var alu8 = (gidx1<<2);
  var alu9 = (alu8+1);
  var alu10 = (alu8+2);
  var alu11 = (alu8+3);
  var alu12 = ((gidx1<<12)+alu0+alu1+alu2+alu3);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 640; ridx0++) {
    var alu13 = ((gidx1*23040)+(ridx0*9));
    var alu14 = (alu1+alu2+alu0+(ridx0<<10)+alu3);
    var val0 = select(0.0f, data1[(alu14+-33)], (alu5&alu6));
    var val1 = select(0.0f, data1[(alu14+-32)], alu6);
    var val2 = select(0.0f, data1[(alu14+-31)], alu6);
    var val3 = select(0.0f, data1[(alu14+-30)], alu6);
    var val4 = select(0.0f, data1[(alu14+-29)], alu6);
    var val5 = select(0.0f, data1[(alu14+-28)], (alu4&alu6));
    var val6 = select(0.0f, data1[(alu14+-1)], alu5);
    var val7 = data1[(alu14+1)];
    var val8 = data1[(alu14+2)];
    var val9 = data1[(alu14+3)];
    var val10 = select(0.0f, data1[(alu14+4)], alu4);
    var val11 = select(0.0f, data1[(alu14+31)], (alu7&alu5));
    var val12 = select(0.0f, data1[(alu14+32)], alu7);
    var val13 = select(0.0f, data1[(alu14+33)], alu7);
    var val14 = select(0.0f, data1[(alu14+34)], alu7);
    var val15 = select(0.0f, data1[(alu14+35)], alu7);
    var val16 = select(0.0f, data1[(alu14+36)], (alu4&alu7));
    var val17 = data1[alu14];
    var val18 = data2[(alu13+1)];
    var val19 = data2[(alu13+2)];
    var val20 = data2[(alu13+3)];
    var val21 = data2[(alu13+4)];
    var val22 = data2[(alu13+5)];
    var val23 = data2[(alu13+6)];
    var val24 = data2[(alu13+7)];
    var val25 = data2[(alu13+8)];
    var val26 = data2[(alu13+5760)];
    var val27 = data2[(alu13+5761)];
    var val28 = data2[(alu13+5762)];
    var val29 = data2[(alu13+5763)];
    var val30 = data2[(alu13+5764)];
    var val31 = data2[(alu13+5765)];
    var val32 = data2[(alu13+5766)];
    var val33 = data2[(alu13+5767)];
    var val34 = data2[(alu13+5768)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu13+11520)];
    var val36 = data2[(alu13+11521)];
    var val37 = data2[(alu13+11522)];
    var val38 = data2[(alu13+11523)];
    var val39 = data2[(alu13+11524)];
    var val40 = data2[(alu13+11525)];
    var val41 = data2[(alu13+11526)];
    var val42 = data2[(alu13+11527)];
    var val43 = data2[(alu13+11528)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu13+17280)];
    var val45 = data2[(alu13+17281)];
    var val46 = data2[(alu13+17282)];
    var val47 = data2[(alu13+17283)];
    var val48 = data2[(alu13+17284)];
    var val49 = data2[(alu13+17285)];
    var val50 = data2[(alu13+17286)];
    var val51 = data2[(alu13+17287)];
    var val52 = data2[(alu13+17288)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu13];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[alu9];
  var val55 = data3[alu10];
  var val56 = data3[alu11];
  var val57 = data3[alu8];
  var val58 = data4[alu9];
  data0[(alu12+1024)] = (val58+val54+acc1);
  data0[(alu12+1025)] = (val58+val54+acc5);
  data0[(alu12+1026)] = (val58+val54+acc9);
  data0[(alu12+1027)] = (val58+val54+acc13);
  var val59 = data4[alu10];
  data0[(alu12+2048)] = (val59+val55+acc2);
  data0[(alu12+2049)] = (val59+val55+acc6);
  data0[(alu12+2050)] = (val59+val55+acc10);
  data0[(alu12+2051)] = (val59+val55+acc14);
  var val60 = data4[alu11];
  data0[(alu12+3072)] = (val60+val56+acc3);
  data0[(alu12+3073)] = (val60+val56+acc7);
  data0[(alu12+3074)] = (val60+val56+acc11);
  data0[(alu12+3075)] = (val60+val56+acc15);
  var val61 = data4[alu8];
  data0[(alu12+1)] = (val61+val57+acc4);
  data0[(alu12+2)] = (val61+val57+acc8);
  data0[(alu12+3)] = (val61+val57+acc12);
  data0[alu12] = (val61+val57+acc0);
}`;

const r_2_160_2_16_8_640_4_4_3_3n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 160 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = (gidx2*655360);
  var alu1 = (gidx0<<9);
  var alu2 = (lidx0<<5);
  var alu3 = (lidx1<<2);
  var alu4 = (lidx1<7);
  var alu5 = ((lidx1<1)!=true);
  var alu6 = (((gidx0+lidx0)<1)!=true);
  var alu7 = ((lidx0+(gidx0<<4))<31);
  var alu8 = (gidx1<<2);
  var alu9 = ((gidx1<<12)+alu0+alu1+alu2+alu3);
  var alu10 = (alu9+1);
  var alu11 = (alu9+2);
  var alu12 = (alu9+3);
  var alu13 = (alu9+1024);
  var alu14 = (alu9+1025);
  var alu15 = (alu9+1026);
  var alu16 = (alu9+1027);
  var alu17 = (alu9+2048);
  var alu18 = (alu9+2049);
  var alu19 = (alu9+2050);
  var alu20 = (alu9+2051);
  var alu21 = (alu9+3072);
  var alu22 = (alu9+3073);
  var alu23 = (alu9+3074);
  var alu24 = (alu9+3075);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 640; ridx0++) {
    var alu25 = ((gidx1*23040)+(ridx0*9));
    var alu26 = (alu1+alu2+alu0+(ridx0<<10)+alu3);
    var val0 = select(0.0f, data2[(alu26+-33)], (alu5&alu6));
    var val1 = select(0.0f, data2[(alu26+-32)], alu6);
    var val2 = select(0.0f, data2[(alu26+-31)], alu6);
    var val3 = select(0.0f, data2[(alu26+-30)], alu6);
    var val4 = select(0.0f, data2[(alu26+-29)], alu6);
    var val5 = select(0.0f, data2[(alu26+-28)], (alu4&alu6));
    var val6 = select(0.0f, data2[(alu26+-1)], alu5);
    var val7 = data2[(alu26+1)];
    var val8 = data2[(alu26+2)];
    var val9 = data2[(alu26+3)];
    var val10 = select(0.0f, data2[(alu26+4)], alu4);
    var val11 = select(0.0f, data2[(alu26+31)], (alu7&alu5));
    var val12 = select(0.0f, data2[(alu26+32)], alu7);
    var val13 = select(0.0f, data2[(alu26+33)], alu7);
    var val14 = select(0.0f, data2[(alu26+34)], alu7);
    var val15 = select(0.0f, data2[(alu26+35)], alu7);
    var val16 = select(0.0f, data2[(alu26+36)], (alu4&alu7));
    var val17 = data2[alu26];
    var val18 = data3[(alu25+1)];
    var val19 = data3[(alu25+2)];
    var val20 = data3[(alu25+3)];
    var val21 = data3[(alu25+4)];
    var val22 = data3[(alu25+5)];
    var val23 = data3[(alu25+6)];
    var val24 = data3[(alu25+7)];
    var val25 = data3[(alu25+8)];
    var val26 = data3[(alu25+5760)];
    var val27 = data3[(alu25+5761)];
    var val28 = data3[(alu25+5762)];
    var val29 = data3[(alu25+5763)];
    var val30 = data3[(alu25+5764)];
    var val31 = data3[(alu25+5765)];
    var val32 = data3[(alu25+5766)];
    var val33 = data3[(alu25+5767)];
    var val34 = data3[(alu25+5768)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data3[(alu25+11520)];
    var val36 = data3[(alu25+11521)];
    var val37 = data3[(alu25+11522)];
    var val38 = data3[(alu25+11523)];
    var val39 = data3[(alu25+11524)];
    var val40 = data3[(alu25+11525)];
    var val41 = data3[(alu25+11526)];
    var val42 = data3[(alu25+11527)];
    var val43 = data3[(alu25+11528)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data3[(alu25+17280)];
    var val45 = data3[(alu25+17281)];
    var val46 = data3[(alu25+17282)];
    var val47 = data3[(alu25+17283)];
    var val48 = data3[(alu25+17284)];
    var val49 = data3[(alu25+17285)];
    var val50 = data3[(alu25+17286)];
    var val51 = data3[(alu25+17287)];
    var val52 = data3[(alu25+17288)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data3[alu25];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data1[alu10];
  var val55 = data1[alu11];
  var val56 = data1[alu12];
  var val57 = data1[alu13];
  var val58 = data1[alu14];
  var val59 = data1[alu15];
  var val60 = data1[alu16];
  var val61 = data1[alu17];
  var val62 = data1[alu18];
  var val63 = data1[alu19];
  var val64 = data1[alu20];
  var val65 = data1[alu21];
  var val66 = data1[alu22];
  var val67 = data1[alu23];
  var val68 = data1[alu24];
  var val69 = data1[alu9];
  var val70 = data4[(alu8+1)];
  data0[alu13] = (val57+val70+acc1);
  data0[alu14] = (val58+val70+acc5);
  data0[alu15] = (val59+val70+acc9);
  data0[alu16] = (val60+val70+acc13);
  var val71 = data4[(alu8+2)];
  data0[alu17] = (val61+val71+acc2);
  data0[alu18] = (val62+val71+acc6);
  data0[alu19] = (val63+val71+acc10);
  data0[alu20] = (val64+val71+acc14);
  var val72 = data4[(alu8+3)];
  data0[alu21] = (val65+val72+acc3);
  data0[alu22] = (val66+val72+acc7);
  data0[alu23] = (val67+val72+acc11);
  data0[alu24] = (val68+val72+acc15);
  var val73 = data4[alu8];
  data0[alu10] = (val54+val73+acc4);
  data0[alu11] = (val55+val73+acc8);
  data0[alu12] = (val56+val73+acc12);
  data0[alu9] = (val69+val73+acc0);
}`;

const r_2_80_2_16_4_640_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(2,16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 80 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var lidx2 = i32(lindex.z); /* 4 */
  var alu0 = ((lidx1<1)!=true);
  var alu1 = ((lidx2<1)!=true);
  var alu2 = ((gidx0<<3)+(lidx0<<2));
  var alu3 = ((gidx0<<11)+(gidx1*163840)+(lidx0<<10)+(lidx1<<4)+(lidx2<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 640; ridx0++) {
    var alu4 = ((gidx0*46080)+(lidx0*23040)+(ridx0*9));
    var alu5 = ((gidx1*655360)+(ridx0<<10)+(lidx1<<6)+(lidx2<<3));
    var val0 = select(0.0f, data1[(alu5+-33)], (alu0&alu1));
    var val1 = select(0.0f, data1[(alu5+-32)], alu0);
    var val2 = select(0.0f, data1[(alu5+-31)], alu0);
    var val3 = select(0.0f, data1[(alu5+-30)], alu0);
    var val4 = select(0.0f, data1[(alu5+-29)], alu0);
    var val5 = select(0.0f, data1[(alu5+-28)], alu0);
    var val6 = select(0.0f, data1[(alu5+-27)], alu0);
    var val7 = select(0.0f, data1[(alu5+-26)], alu0);
    var val8 = select(0.0f, data1[(alu5+-25)], alu0);
    var val9 = select(0.0f, data1[(alu5+-1)], alu1);
    var val10 = data1[(alu5+1)];
    var val11 = data1[(alu5+2)];
    var val12 = data1[(alu5+3)];
    var val13 = data1[(alu5+4)];
    var val14 = data1[(alu5+5)];
    var val15 = data1[(alu5+6)];
    var val16 = data1[(alu5+7)];
    var val17 = select(0.0f, data1[(alu5+31)], alu1);
    var val18 = data1[(alu5+32)];
    var val19 = data1[(alu5+33)];
    var val20 = data1[(alu5+34)];
    var val21 = data1[(alu5+35)];
    var val22 = data1[(alu5+36)];
    var val23 = data1[(alu5+37)];
    var val24 = data1[(alu5+38)];
    var val25 = data1[(alu5+39)];
    var val26 = data1[alu5];
    var val27 = data2[(alu4+1)];
    var val28 = data2[(alu4+2)];
    var val29 = data2[(alu4+3)];
    var val30 = data2[(alu4+4)];
    var val31 = data2[(alu4+5)];
    var val32 = data2[(alu4+6)];
    var val33 = data2[(alu4+7)];
    var val34 = data2[(alu4+8)];
    var val35 = data2[(alu4+5760)];
    var val36 = data2[(alu4+5761)];
    var val37 = data2[(alu4+5762)];
    var val38 = data2[(alu4+5763)];
    var val39 = data2[(alu4+5764)];
    var val40 = data2[(alu4+5765)];
    var val41 = data2[(alu4+5766)];
    var val42 = data2[(alu4+5767)];
    var val43 = data2[(alu4+5768)];
    acc1 = (acc1+(val0*val35)+(val9*val38)+(val17*val41)+(val1*val36)+(val26*val39)+(val18*val42)+(val2*val37)+(val10*val40)+(val19*val43));
    acc5 = (acc5+(val2*val35)+(val10*val38)+(val19*val41)+(val3*val36)+(val11*val39)+(val20*val42)+(val4*val37)+(val12*val40)+(val21*val43));
    acc9 = (acc9+(val4*val35)+(val12*val38)+(val21*val41)+(val5*val36)+(val13*val39)+(val22*val42)+(val6*val37)+(val14*val40)+(val23*val43));
    acc13 = (acc13+(val6*val35)+(val14*val38)+(val23*val41)+(val7*val36)+(val15*val39)+(val24*val42)+(val8*val37)+(val16*val40)+(val25*val43));
    var val44 = data2[(alu4+11520)];
    var val45 = data2[(alu4+11521)];
    var val46 = data2[(alu4+11522)];
    var val47 = data2[(alu4+11523)];
    var val48 = data2[(alu4+11524)];
    var val49 = data2[(alu4+11525)];
    var val50 = data2[(alu4+11526)];
    var val51 = data2[(alu4+11527)];
    var val52 = data2[(alu4+11528)];
    acc2 = (acc2+(val0*val44)+(val9*val47)+(val17*val50)+(val1*val45)+(val26*val48)+(val18*val51)+(val2*val46)+(val10*val49)+(val19*val52));
    acc6 = (acc6+(val2*val44)+(val10*val47)+(val19*val50)+(val3*val45)+(val11*val48)+(val20*val51)+(val4*val46)+(val12*val49)+(val21*val52));
    acc10 = (acc10+(val4*val44)+(val12*val47)+(val21*val50)+(val5*val45)+(val13*val48)+(val22*val51)+(val6*val46)+(val14*val49)+(val23*val52));
    acc14 = (acc14+(val6*val44)+(val14*val47)+(val23*val50)+(val7*val45)+(val15*val48)+(val24*val51)+(val8*val46)+(val16*val49)+(val25*val52));
    var val53 = data2[(alu4+17280)];
    var val54 = data2[(alu4+17281)];
    var val55 = data2[(alu4+17282)];
    var val56 = data2[(alu4+17283)];
    var val57 = data2[(alu4+17284)];
    var val58 = data2[(alu4+17285)];
    var val59 = data2[(alu4+17286)];
    var val60 = data2[(alu4+17287)];
    var val61 = data2[(alu4+17288)];
    acc3 = (acc3+(val0*val53)+(val9*val56)+(val17*val59)+(val1*val54)+(val26*val57)+(val18*val60)+(val2*val55)+(val10*val58)+(val19*val61));
    acc7 = (acc7+(val2*val53)+(val10*val56)+(val19*val59)+(val3*val54)+(val11*val57)+(val20*val60)+(val4*val55)+(val12*val58)+(val21*val61));
    acc11 = (acc11+(val4*val53)+(val12*val56)+(val21*val59)+(val5*val54)+(val13*val57)+(val22*val60)+(val6*val55)+(val14*val58)+(val23*val61));
    acc15 = (acc15+(val6*val53)+(val14*val56)+(val23*val59)+(val7*val54)+(val15*val57)+(val24*val60)+(val8*val55)+(val16*val58)+(val25*val61));
    var val62 = data2[alu4];
    acc0 = (acc0+(val0*val62)+(val9*val29)+(val17*val32)+(val1*val27)+(val26*val30)+(val18*val33)+(val2*val28)+(val10*val31)+(val19*val34));
    acc4 = (acc4+(val2*val62)+(val10*val29)+(val19*val32)+(val3*val27)+(val11*val30)+(val20*val33)+(val4*val28)+(val12*val31)+(val21*val34));
    acc8 = (acc8+(val4*val62)+(val12*val29)+(val21*val32)+(val5*val27)+(val13*val30)+(val22*val33)+(val6*val28)+(val14*val31)+(val23*val34));
    acc12 = (acc12+(val6*val62)+(val14*val29)+(val23*val32)+(val7*val27)+(val15*val30)+(val24*val33)+(val8*val28)+(val16*val31)+(val25*val34));
  }
  var val63 = data3[(alu2+1)];
  data0[(alu3+256)] = (val63+acc1);
  data0[(alu3+257)] = (val63+acc5);
  data0[(alu3+258)] = (val63+acc9);
  data0[(alu3+259)] = (val63+acc13);
  var val64 = data3[(alu2+2)];
  data0[(alu3+512)] = (val64+acc2);
  data0[(alu3+513)] = (val64+acc6);
  data0[(alu3+514)] = (val64+acc10);
  data0[(alu3+515)] = (val64+acc14);
  var val65 = data3[(alu2+3)];
  data0[(alu3+768)] = (val65+acc3);
  data0[(alu3+769)] = (val65+acc7);
  data0[(alu3+770)] = (val65+acc11);
  data0[(alu3+771)] = (val65+acc15);
  var val66 = data3[alu2];
  data0[(alu3+1)] = (val66+acc4);
  data0[(alu3+2)] = (val66+acc8);
  data0[(alu3+3)] = (val66+acc12);
  data0[alu3] = (val66+acc0);
}`;

const r_64_16_320 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var val0 = data1[((gidx0*5120)+(lidx0*320)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*0.00019531250291038305f);
  }
}`;

const r_64_16_320n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var val0 = data2[gidx0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var val1 = data1[((gidx0*5120)+(lidx0*320)+ridx0)];
    var alu0 = (val1-val0);
    acc0 = (acc0+(alu0*alu0));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[gidx0] = sqrt((1/((acc1*0.00019531250291038305f)+1e-05f)));
  }
}`;

const E_2_80_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 80 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(alu0/20));
  var alu2 = ((gidx1<<11)+(gidx2*163840)+(gidx0<<6)+(lidx0<<8)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_160_2_16_4_640_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(2,16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 160 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var lidx2 = i32(lindex.z); /* 4 */
  var alu0 = (lidx1<<4);
  var alu1 = (lidx2<<2);
  var alu2 = (lidx1<15);
  var alu3 = (lidx2<3);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = ((lidx2<1)!=true);
  var alu6 = ((gidx0<<3)+(lidx0<<2));
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = ((gidx0<<11)+(gidx1*327680)+(lidx0<<10)+alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 640; ridx0++) {
    var alu11 = ((gidx0*46080)+(lidx0*23040)+(ridx0*9));
    var alu12 = ((gidx1*163840)+(ridx0<<8)+alu0+alu1);
    var val0 = select(0.0f, data1[(alu12+-17)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu12+-16)], alu4);
    var val2 = select(0.0f, data1[(alu12+-15)], alu4);
    var val3 = select(0.0f, data1[(alu12+-14)], alu4);
    var val4 = select(0.0f, data1[(alu12+-13)], alu4);
    var val5 = select(0.0f, data1[(alu12+-12)], (alu3&alu4));
    var val6 = select(0.0f, data1[(alu12+-1)], alu5);
    var val7 = data1[(alu12+1)];
    var val8 = data1[(alu12+2)];
    var val9 = data1[(alu12+3)];
    var val10 = select(0.0f, data1[(alu12+4)], alu3);
    var val11 = select(0.0f, data1[(alu12+15)], (alu2&alu5));
    var val12 = select(0.0f, data1[(alu12+16)], alu2);
    var val13 = select(0.0f, data1[(alu12+17)], alu2);
    var val14 = select(0.0f, data1[(alu12+18)], alu2);
    var val15 = select(0.0f, data1[(alu12+19)], alu2);
    var val16 = select(0.0f, data1[(alu12+20)], (alu2&alu3));
    var val17 = data1[alu12];
    var val18 = data2[(alu11+1)];
    var val19 = data2[(alu11+2)];
    var val20 = data2[(alu11+3)];
    var val21 = data2[(alu11+4)];
    var val22 = data2[(alu11+5)];
    var val23 = data2[(alu11+6)];
    var val24 = data2[(alu11+7)];
    var val25 = data2[(alu11+8)];
    var val26 = data2[(alu11+5760)];
    var val27 = data2[(alu11+5761)];
    var val28 = data2[(alu11+5762)];
    var val29 = data2[(alu11+5763)];
    var val30 = data2[(alu11+5764)];
    var val31 = data2[(alu11+5765)];
    var val32 = data2[(alu11+5766)];
    var val33 = data2[(alu11+5767)];
    var val34 = data2[(alu11+5768)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu11+11520)];
    var val36 = data2[(alu11+11521)];
    var val37 = data2[(alu11+11522)];
    var val38 = data2[(alu11+11523)];
    var val39 = data2[(alu11+11524)];
    var val40 = data2[(alu11+11525)];
    var val41 = data2[(alu11+11526)];
    var val42 = data2[(alu11+11527)];
    var val43 = data2[(alu11+11528)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu11+17280)];
    var val45 = data2[(alu11+17281)];
    var val46 = data2[(alu11+17282)];
    var val47 = data2[(alu11+17283)];
    var val48 = data2[(alu11+17284)];
    var val49 = data2[(alu11+17285)];
    var val50 = data2[(alu11+17286)];
    var val51 = data2[(alu11+17287)];
    var val52 = data2[(alu11+17288)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu11];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[alu7];
  var val55 = data3[alu8];
  var val56 = data3[alu9];
  var val57 = data3[alu6];
  var val58 = data4[alu7];
  data0[(alu10+256)] = (val58+val54+acc1);
  data0[(alu10+257)] = (val58+val54+acc5);
  data0[(alu10+258)] = (val58+val54+acc9);
  data0[(alu10+259)] = (val58+val54+acc13);
  var val59 = data4[alu8];
  data0[(alu10+512)] = (val59+val55+acc2);
  data0[(alu10+513)] = (val59+val55+acc6);
  data0[(alu10+514)] = (val59+val55+acc10);
  data0[(alu10+515)] = (val59+val55+acc14);
  var val60 = data4[alu9];
  data0[(alu10+768)] = (val60+val56+acc3);
  data0[(alu10+769)] = (val60+val56+acc7);
  data0[(alu10+770)] = (val60+val56+acc11);
  data0[(alu10+771)] = (val60+val56+acc15);
  var val61 = data4[alu6];
  data0[(alu10+1)] = (val61+val57+acc4);
  data0[(alu10+2)] = (val61+val57+acc8);
  data0[(alu10+3)] = (val61+val57+acc12);
  data0[alu10] = (val61+val57+acc0);
}`;

const E_2_160_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 160 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(gidx1/5));
  var alu2 = ((gidx1<<11)+(gidx2*327680)+(gidx0<<6)+(lidx0<<8)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_160_2_16_4_1280_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(2,16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 160 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var lidx2 = i32(lindex.z); /* 4 */
  var alu0 = (gidx1*327680);
  var alu1 = (lidx1<<4);
  var alu2 = (lidx2<<2);
  var alu3 = (lidx1<15);
  var alu4 = (lidx2<3);
  var alu5 = ((lidx1<1)!=true);
  var alu6 = ((lidx2<1)!=true);
  var alu7 = ((gidx0<<11)+alu0+(lidx0<<10)+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var alu8 = ((gidx0*92160)+(lidx0*46080)+(ridx0*9));
    var alu9 = (alu0+(ridx0<<8)+alu1+alu2);
    var val0 = select(0.0f, data1[(alu9+-17)], (alu5&alu6));
    var val1 = select(0.0f, data1[(alu9+-16)], alu5);
    var val2 = select(0.0f, data1[(alu9+-15)], alu5);
    var val3 = select(0.0f, data1[(alu9+-14)], alu5);
    var val4 = select(0.0f, data1[(alu9+-13)], alu5);
    var val5 = select(0.0f, data1[(alu9+-12)], (alu4&alu5));
    var val6 = select(0.0f, data1[(alu9+-1)], alu6);
    var val7 = data1[(alu9+1)];
    var val8 = data1[(alu9+2)];
    var val9 = data1[(alu9+3)];
    var val10 = select(0.0f, data1[(alu9+4)], alu4);
    var val11 = select(0.0f, data1[(alu9+15)], (alu3&alu6));
    var val12 = select(0.0f, data1[(alu9+16)], alu3);
    var val13 = select(0.0f, data1[(alu9+17)], alu3);
    var val14 = select(0.0f, data1[(alu9+18)], alu3);
    var val15 = select(0.0f, data1[(alu9+19)], alu3);
    var val16 = select(0.0f, data1[(alu9+20)], (alu3&alu4));
    var val17 = data1[alu9];
    var val18 = data2[(alu8+1)];
    var val19 = data2[(alu8+2)];
    var val20 = data2[(alu8+3)];
    var val21 = data2[(alu8+4)];
    var val22 = data2[(alu8+5)];
    var val23 = data2[(alu8+6)];
    var val24 = data2[(alu8+7)];
    var val25 = data2[(alu8+8)];
    var val26 = data2[(alu8+11520)];
    var val27 = data2[(alu8+11521)];
    var val28 = data2[(alu8+11522)];
    var val29 = data2[(alu8+11523)];
    var val30 = data2[(alu8+11524)];
    var val31 = data2[(alu8+11525)];
    var val32 = data2[(alu8+11526)];
    var val33 = data2[(alu8+11527)];
    var val34 = data2[(alu8+11528)];
    acc4 = (acc4+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc6 = (acc6+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc7 = (acc7+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu8+23040)];
    var val36 = data2[(alu8+23041)];
    var val37 = data2[(alu8+23042)];
    var val38 = data2[(alu8+23043)];
    var val39 = data2[(alu8+23044)];
    var val40 = data2[(alu8+23045)];
    var val41 = data2[(alu8+23046)];
    var val42 = data2[(alu8+23047)];
    var val43 = data2[(alu8+23048)];
    acc8 = (acc8+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc9 = (acc9+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc11 = (acc11+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu8+34560)];
    var val45 = data2[(alu8+34561)];
    var val46 = data2[(alu8+34562)];
    var val47 = data2[(alu8+34563)];
    var val48 = data2[(alu8+34564)];
    var val49 = data2[(alu8+34565)];
    var val50 = data2[(alu8+34566)];
    var val51 = data2[(alu8+34567)];
    var val52 = data2[(alu8+34568)];
    acc12 = (acc12+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc13 = (acc13+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc14 = (acc14+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu8];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc1 = (acc1+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc2 = (acc2+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc3 = (acc3+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  data0[(alu7+1)] = acc1;
  data0[(alu7+2)] = acc2;
  data0[(alu7+3)] = acc3;
  data0[(alu7+256)] = acc4;
  data0[(alu7+257)] = acc5;
  data0[(alu7+258)] = acc6;
  data0[(alu7+259)] = acc7;
  data0[(alu7+512)] = acc8;
  data0[(alu7+513)] = acc9;
  data0[(alu7+514)] = acc10;
  data0[(alu7+515)] = acc11;
  data0[(alu7+768)] = acc12;
  data0[(alu7+769)] = acc13;
  data0[(alu7+770)] = acc14;
  data0[(alu7+771)] = acc15;
  data0[alu7] = acc0;
}`;

const r_2_40_4_8_16_160_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 40 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1<<5)+(lidx0<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = ((gidx1<<13)+(gidx2*327680)+alu0+(lidx0<<10)+alu1);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+256);
  var alu11 = (alu6+257);
  var alu12 = (alu6+258);
  var alu13 = (alu6+259);
  var alu14 = (alu6+512);
  var alu15 = (alu6+513);
  var alu16 = (alu6+514);
  var alu17 = (alu6+515);
  var alu18 = (alu6+768);
  var alu19 = (alu6+769);
  var alu20 = (alu6+770);
  var alu21 = (alu6+771);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var alu22 = ((gidx1*20480)+(lidx0*2560)+(ridx0<<2));
    var alu23 = (alu0+(gidx2*163840)+alu1+(ridx0<<10));
    var val0 = data1[(alu23+1)];
    var val1 = data1[(alu23+2)];
    var val2 = data1[(alu23+3)];
    var val3 = data1[(alu23+256)];
    var val4 = data1[(alu23+257)];
    var val5 = data1[(alu23+258)];
    var val6 = data1[(alu23+259)];
    var val7 = data1[(alu23+512)];
    var val8 = data1[(alu23+513)];
    var val9 = data1[(alu23+514)];
    var val10 = data1[(alu23+515)];
    var val11 = data1[(alu23+768)];
    var val12 = data1[(alu23+769)];
    var val13 = data1[(alu23+770)];
    var val14 = data1[(alu23+771)];
    var val15 = data1[alu23];
    var val16 = data2[(alu22+1)];
    var val17 = data2[(alu22+2)];
    var val18 = data2[(alu22+3)];
    var val19 = data2[(alu22+640)];
    var val20 = data2[(alu22+641)];
    var val21 = data2[(alu22+642)];
    var val22 = data2[(alu22+643)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu22+1280)];
    var val24 = data2[(alu22+1281)];
    var val25 = data2[(alu22+1282)];
    var val26 = data2[(alu22+1283)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu22+1920)];
    var val28 = data2[(alu22+1921)];
    var val29 = data2[(alu22+1922)];
    var val30 = data2[(alu22+1923)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu22];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[alu3];
  var val33 = data3[alu4];
  var val34 = data3[alu5];
  var val35 = data3[alu2];
  var val36 = data4[alu7];
  var val37 = data4[alu8];
  var val38 = data4[alu9];
  var val39 = data4[alu10];
  var val40 = data4[alu11];
  var val41 = data4[alu12];
  var val42 = data4[alu13];
  var val43 = data4[alu14];
  var val44 = data4[alu15];
  var val45 = data4[alu16];
  var val46 = data4[alu17];
  var val47 = data4[alu18];
  var val48 = data4[alu19];
  var val49 = data4[alu20];
  var val50 = data4[alu21];
  var val51 = data4[alu6];
  var val52 = data5[alu3];
  data0[alu10] = (val32+acc1+val39+val52);
  data0[alu11] = (val32+acc5+val40+val52);
  data0[alu12] = (val32+acc9+val41+val52);
  data0[alu13] = (val32+acc13+val42+val52);
  var val53 = data5[alu4];
  data0[alu14] = (val33+acc2+val43+val53);
  data0[alu15] = (val33+acc6+val44+val53);
  data0[alu16] = (val33+acc10+val45+val53);
  data0[alu17] = (val33+acc14+val46+val53);
  var val54 = data5[alu5];
  data0[alu18] = (val34+acc3+val47+val54);
  data0[alu19] = (val34+acc7+val48+val54);
  data0[alu20] = (val34+acc11+val49+val54);
  data0[alu21] = (val34+acc15+val50+val54);
  var val55 = data5[alu2];
  data0[alu7] = (val35+acc4+val36+val55);
  data0[alu8] = (val35+acc8+val37+val55);
  data0[alu9] = (val35+acc12+val38+val55);
  data0[alu6] = (val35+acc0+val51+val55);
}`;

const E_2_160_4_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 160 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(gidx1/5));
  var alu2 = ((gidx1<<11)+(gidx2*327680)+(gidx0<<6)+(lidx0<<8)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  data0[alu3] = (val7+(val6*val5*(val0-val4)));
  data0[alu4] = (val7+(val6*val5*(val1-val4)));
  data0[alu5] = (val7+(val6*val5*(val2-val4)));
  data0[alu2] = (val7+(val6*val5*(val3-val4)));
}`;

const r_2_40_4_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 40 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*327680);
  var alu1 = (gidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx1<<5)+(lidx0<<2));
  var alu4 = ((gidx1<<13)+alu0+alu1+(lidx0<<10)+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu5 = ((gidx1*40960)+(lidx0*5120)+(ridx0<<2));
    var alu6 = (alu1+alu0+alu2+(ridx0<<10));
    var val0 = data1[(alu6+1)];
    var val1 = data1[(alu6+2)];
    var val2 = data1[(alu6+3)];
    var val3 = data1[(alu6+256)];
    var val4 = data1[(alu6+257)];
    var val5 = data1[(alu6+258)];
    var val6 = data1[(alu6+259)];
    var val7 = data1[(alu6+512)];
    var val8 = data1[(alu6+513)];
    var val9 = data1[(alu6+514)];
    var val10 = data1[(alu6+515)];
    var val11 = data1[(alu6+768)];
    var val12 = data1[(alu6+769)];
    var val13 = data1[(alu6+770)];
    var val14 = data1[(alu6+771)];
    var val15 = data1[alu6];
    var val16 = data2[(alu5+1)];
    var val17 = data2[(alu5+2)];
    var val18 = data2[(alu5+3)];
    var val19 = data2[(alu5+1280)];
    var val20 = data2[(alu5+1281)];
    var val21 = data2[(alu5+1282)];
    var val22 = data2[(alu5+1283)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu5+2560)];
    var val24 = data2[(alu5+2561)];
    var val25 = data2[(alu5+2562)];
    var val26 = data2[(alu5+2563)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu5+3840)];
    var val28 = data2[(alu5+3841)];
    var val29 = data2[(alu5+3842)];
    var val30 = data2[(alu5+3843)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu5];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[(alu3+1)];
  data0[(alu4+256)] = (val32+acc1);
  data0[(alu4+257)] = (val32+acc5);
  data0[(alu4+258)] = (val32+acc9);
  data0[(alu4+259)] = (val32+acc13);
  var val33 = data3[(alu3+2)];
  data0[(alu4+512)] = (val33+acc2);
  data0[(alu4+513)] = (val33+acc6);
  data0[(alu4+514)] = (val33+acc10);
  data0[(alu4+515)] = (val33+acc14);
  var val34 = data3[(alu3+3)];
  data0[(alu4+768)] = (val34+acc3);
  data0[(alu4+769)] = (val34+acc7);
  data0[(alu4+770)] = (val34+acc11);
  data0[(alu4+771)] = (val34+acc15);
  var val35 = data3[alu3];
  data0[(alu4+1)] = (val35+acc4);
  data0[(alu4+2)] = (val35+acc8);
  data0[(alu4+3)] = (val35+acc12);
  data0[alu4] = (val35+acc0);
}`;

const r_2_256_16_80 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 256 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var val0 = data1[(gidx0+(gidx1*327680)+(lidx0*20480)+(ridx0<<8))];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[(gidx0+(gidx1<<8))] = (acc1*0.0007812500116415322f);
  }
}`;

const r_2_256_16_80n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 256 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var alu0 = (gidx0+(gidx1<<8));
  var val0 = data2[alu0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var val1 = data1[(gidx0+(gidx1*327680)+(lidx0*20480)+(ridx0<<8))];
    var alu1 = (val1-val0);
    acc0 = (acc0+(alu1*alu1));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[alu0] = sqrt((1/((acc1*0.0007812500116415322f)+1e-05f)));
  }
}`;

const E_2_8_20_8_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 8 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*327680);
  var alu1 = (gidx0<<6);
  var alu2 = (gidx1<<5);
  var alu3 = (lidx0<<2);
  var alu4 = (alu2+(gidx2<<8)+alu3);
  var alu5 = (alu4+1);
  var alu6 = (alu4+2);
  var alu7 = (alu4+3);
  var alu8 = (lidx1<<2);
  var alu9 = ((gidx1*40960)+alu0+alu1+(lidx0*5120)+alu8);
  var alu10 = (alu1+alu8);
  var alu11 = (alu10+1);
  var alu12 = (alu10+2);
  var alu13 = (alu10+3);
  var alu14 = (alu2+alu0+(gidx0<<14)+alu3+(lidx1<<10));
  var val0 = data1[(alu14+1)];
  var val1 = data1[(alu14+2)];
  var val2 = data1[(alu14+3)];
  var val3 = data1[(alu14+256)];
  var val4 = data1[(alu14+257)];
  var val5 = data1[(alu14+258)];
  var val6 = data1[(alu14+259)];
  var val7 = data1[(alu14+512)];
  var val8 = data1[(alu14+513)];
  var val9 = data1[(alu14+514)];
  var val10 = data1[(alu14+515)];
  var val11 = data1[(alu14+768)];
  var val12 = data1[(alu14+769)];
  var val13 = data1[(alu14+770)];
  var val14 = data1[(alu14+771)];
  var val15 = data1[alu14];
  var val16 = data2[alu5];
  var val17 = data2[alu6];
  var val18 = data2[alu7];
  var val19 = data2[alu4];
  var val20 = data3[alu5];
  var val21 = data3[alu6];
  var val22 = data3[alu7];
  var val23 = data3[alu4];
  var val24 = data4[alu11];
  var val25 = data4[alu12];
  var val26 = data4[alu13];
  var val27 = data4[alu10];
  var val28 = data5[alu11];
  data0[(alu9+1)] = (val28+(val24*val23*(val3-val19)));
  data0[(alu9+1281)] = (val28+(val24*val20*(val4-val16)));
  data0[(alu9+2561)] = (val28+(val24*val21*(val5-val17)));
  data0[(alu9+3841)] = (val28+(val24*val22*(val6-val18)));
  var val29 = data5[alu12];
  data0[(alu9+2)] = (val29+(val25*val23*(val7-val19)));
  data0[(alu9+1282)] = (val29+(val25*val20*(val8-val16)));
  data0[(alu9+2562)] = (val29+(val25*val21*(val9-val17)));
  data0[(alu9+3842)] = (val29+(val25*val22*(val10-val18)));
  var val30 = data5[alu13];
  data0[(alu9+3)] = (val30+(val26*val23*(val11-val19)));
  data0[(alu9+1283)] = (val30+(val26*val20*(val12-val16)));
  data0[(alu9+2563)] = (val30+(val26*val21*(val13-val17)));
  data0[(alu9+3843)] = (val30+(val26*val22*(val14-val18)));
  var val31 = data5[alu10];
  data0[(alu9+1280)] = (val31+(val27*val20*(val0-val16)));
  data0[(alu9+2560)] = (val31+(val27*val21*(val1-val17)));
  data0[(alu9+3840)] = (val31+(val27*val22*(val2-val18)));
  data0[alu9] = (val31+(val27*val23*(val15-val19)));
}`;

const r_16_20_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 16 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1*40960);
  var alu1 = (lidx0*5120);
  var alu2 = ((gidx0<<6)+alu0+alu1+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu3 = (ridx0<<2);
    var alu4 = ((gidx0*81920)+(lidx1*5120)+alu3);
    var alu5 = (alu0+alu1+alu3);
    var val0 = data1[(alu5+1)];
    var val1 = data1[(alu5+2)];
    var val2 = data1[(alu5+3)];
    var val3 = data1[(alu5+1280)];
    var val4 = data1[(alu5+1281)];
    var val5 = data1[(alu5+1282)];
    var val6 = data1[(alu5+1283)];
    var val7 = data1[(alu5+2560)];
    var val8 = data1[(alu5+2561)];
    var val9 = data1[(alu5+2562)];
    var val10 = data1[(alu5+2563)];
    var val11 = data1[(alu5+3840)];
    var val12 = data1[(alu5+3841)];
    var val13 = data1[(alu5+3842)];
    var val14 = data1[(alu5+3843)];
    var val15 = data1[alu5];
    var val16 = data2[(alu4+1)];
    var val17 = data2[(alu4+2)];
    var val18 = data2[(alu4+3)];
    var val19 = data2[(alu4+1280)];
    var val20 = data2[(alu4+1281)];
    var val21 = data2[(alu4+1282)];
    var val22 = data2[(alu4+1283)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu4+2560)];
    var val24 = data2[(alu4+2561)];
    var val25 = data2[(alu4+2562)];
    var val26 = data2[(alu4+2563)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu4+3840)];
    var val28 = data2[(alu4+3841)];
    var val29 = data2[(alu4+3842)];
    var val30 = data2[(alu4+3843)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu4];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[(alu2+1)] = acc4;
  data0[(alu2+2)] = acc8;
  data0[(alu2+3)] = acc12;
  data0[(alu2+1280)] = acc1;
  data0[(alu2+1281)] = acc5;
  data0[(alu2+1282)] = acc9;
  data0[(alu2+1283)] = acc13;
  data0[(alu2+2560)] = acc2;
  data0[(alu2+2561)] = acc6;
  data0[(alu2+2562)] = acc10;
  data0[(alu2+2563)] = acc14;
  data0[(alu2+3840)] = acc3;
  data0[(alu2+3841)] = acc7;
  data0[(alu2+3842)] = acc11;
  data0[(alu2+3843)] = acc15;
  data0[alu2] = acc0;
}`;

const r_2_8_8_4_8_16_40_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var gidx1 = i32(gindex.y); /* 8 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx1*160)+(gidx2*327680));
  var alu1 = (gidx0>>2);
  var alu2 = (gidx0&3);
  var alu3 = ((gidx1<<16)+(gidx2<<19)+(alu1<<13)+(alu2<<6)+(lidx0<<10)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 40; ridx0++) {
    var alu4 = (ridx0<<2);
    var alu5 = (alu0+(alu1*40960)+(lidx0*5120)+alu4);
    var alu6 = (alu0+(alu2*81920)+(lidx1*5120)+alu4);
    var val0 = data1[(alu5+1)];
    var val1 = data1[(alu5+2)];
    var val2 = data1[(alu5+3)];
    var val3 = data1[(alu5+1280)];
    var val4 = data1[(alu5+1281)];
    var val5 = data1[(alu5+1282)];
    var val6 = data1[(alu5+1283)];
    var val7 = data1[(alu5+2560)];
    var val8 = data1[(alu5+2561)];
    var val9 = data1[(alu5+2562)];
    var val10 = data1[(alu5+2563)];
    var val11 = data1[(alu5+3840)];
    var val12 = data1[(alu5+3841)];
    var val13 = data1[(alu5+3842)];
    var val14 = data1[(alu5+3843)];
    var val15 = data1[alu5];
    var val16 = data2[(alu6+1)];
    var val17 = data2[(alu6+2)];
    var val18 = data2[(alu6+3)];
    var val19 = data2[(alu6+1280)];
    var val20 = data2[(alu6+1281)];
    var val21 = data2[(alu6+1282)];
    var val22 = data2[(alu6+1283)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu6+2560)];
    var val24 = data2[(alu6+2561)];
    var val25 = data2[(alu6+2562)];
    var val26 = data2[(alu6+2563)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu6+3840)];
    var val28 = data2[(alu6+3841)];
    var val29 = data2[(alu6+3842)];
    var val30 = data2[(alu6+3843)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu6];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[(alu3+1)] = (acc4*0.07905694097280502f);
  data0[(alu3+2)] = (acc8*0.07905694097280502f);
  data0[(alu3+3)] = (acc12*0.07905694097280502f);
  data0[(alu3+256)] = (acc1*0.07905694097280502f);
  data0[(alu3+257)] = (acc5*0.07905694097280502f);
  data0[(alu3+258)] = (acc9*0.07905694097280502f);
  data0[(alu3+259)] = (acc13*0.07905694097280502f);
  data0[(alu3+512)] = (acc2*0.07905694097280502f);
  data0[(alu3+513)] = (acc6*0.07905694097280502f);
  data0[(alu3+514)] = (acc10*0.07905694097280502f);
  data0[(alu3+515)] = (acc14*0.07905694097280502f);
  data0[(alu3+768)] = (acc3*0.07905694097280502f);
  data0[(alu3+769)] = (acc7*0.07905694097280502f);
  data0[(alu3+770)] = (acc11*0.07905694097280502f);
  data0[(alu3+771)] = (acc15*0.07905694097280502f);
  data0[alu3] = (acc0*0.07905694097280502f);
}`;

const r_128_32_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 128 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = (f32(-inf(1.0)));
  for (var ridx0 = 0; ridx0 < 64; ridx0++) {
    var alu0 = ((gidx0<<13)+(lidx0<<8)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    var alu1 = select(val0,val3,(val0<val3));
    var alu2 = select(val1,alu1,(val1<alu1));
    var alu3 = select(val2,alu2,(val2<alu2));
    acc0 = select(acc0,alu3,(acc0<alu3));
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_32_32_64_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (alu0+3);
  var val0 = data2[alu1];
  var val1 = data2[alu2];
  var val2 = data2[alu3];
  var val3 = data2[alu0];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 64; ridx0++) {
    var alu4 = ((gidx0<<15)+(lidx0<<10)+(ridx0<<2));
    var val4 = data1[(alu4+1)];
    var val5 = data1[(alu4+2)];
    var val6 = data1[(alu4+3)];
    var val7 = data1[(alu4+256)];
    var val8 = data1[(alu4+257)];
    var val9 = data1[(alu4+258)];
    var val10 = data1[(alu4+259)];
    acc1 = (acc1+exp2(((val10-val0)*1.4426950408889634f))+exp2(((val9-val0)*1.4426950408889634f))+exp2(((val7-val0)*1.4426950408889634f))+exp2(((val8-val0)*1.4426950408889634f)));
    var val11 = data1[(alu4+512)];
    var val12 = data1[(alu4+513)];
    var val13 = data1[(alu4+514)];
    var val14 = data1[(alu4+515)];
    acc2 = (acc2+exp2(((val14-val1)*1.4426950408889634f))+exp2(((val13-val1)*1.4426950408889634f))+exp2(((val11-val1)*1.4426950408889634f))+exp2(((val12-val1)*1.4426950408889634f)));
    var val15 = data1[(alu4+768)];
    var val16 = data1[(alu4+769)];
    var val17 = data1[(alu4+770)];
    var val18 = data1[(alu4+771)];
    acc3 = (acc3+exp2(((val18-val2)*1.4426950408889634f))+exp2(((val17-val2)*1.4426950408889634f))+exp2(((val15-val2)*1.4426950408889634f))+exp2(((val16-val2)*1.4426950408889634f)));
    var val19 = data1[alu4];
    acc0 = (acc0+exp2(((val6-val3)*1.4426950408889634f))+exp2(((val5-val3)*1.4426950408889634f))+exp2(((val4-val3)*1.4426950408889634f))+exp2(((val19-val3)*1.4426950408889634f)));
  }
  data0[alu1] = acc1;
  data0[alu2] = acc2;
  data0[alu3] = acc3;
  data0[alu0] = acc0;
}`;

const E_512_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 512 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx0<<6)+(gidx1<<11)+(lidx0<<8)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var val0 = data1[alu2];
  var val1 = data1[alu3];
  var val2 = data1[alu4];
  var val3 = data1[alu1];
  var val4 = data2[alu0];
  var val5 = data3[alu0];
  var alu5 = (1/val5);
  data0[alu2] = (exp2(((val0-val4)*1.4426950408889634f))*alu5);
  data0[alu3] = (exp2(((val1-val4)*1.4426950408889634f))*alu5);
  data0[alu4] = (exp2(((val2-val4)*1.4426950408889634f))*alu5);
  data0[alu1] = (exp2(((val3-val4)*1.4426950408889634f))*alu5);
}`;

const r_2_8_4_5_16_8_64_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 8 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = (gidx2*327680);
  var alu1 = (gidx0/5);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx0%5)<<5);
  var alu4 = ((gidx1*40960)+alu0+(alu1*10240)+alu3+(lidx0*640)+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 64; ridx0++) {
    var alu5 = ((gidx1*160)+alu0+alu3+alu2+(ridx0*5120));
    var alu6 = ((gidx1<<16)+(gidx2<<19)+(alu1<<14)+(lidx0<<10)+(ridx0<<2));
    var val0 = data1[(alu6+1)];
    var val1 = data1[(alu6+2)];
    var val2 = data1[(alu6+3)];
    var val3 = data1[(alu6+256)];
    var val4 = data1[(alu6+257)];
    var val5 = data1[(alu6+258)];
    var val6 = data1[(alu6+259)];
    var val7 = data1[(alu6+512)];
    var val8 = data1[(alu6+513)];
    var val9 = data1[(alu6+514)];
    var val10 = data1[(alu6+515)];
    var val11 = data1[(alu6+768)];
    var val12 = data1[(alu6+769)];
    var val13 = data1[(alu6+770)];
    var val14 = data1[(alu6+771)];
    var val15 = data1[alu6];
    var val16 = data2[(alu5+1)];
    var val17 = data2[(alu5+2)];
    var val18 = data2[(alu5+3)];
    var val19 = data2[(alu5+1280)];
    var val20 = data2[(alu5+1281)];
    var val21 = data2[(alu5+1282)];
    var val22 = data2[(alu5+1283)];
    var val23 = data2[(alu5+2560)];
    var val24 = data2[(alu5+2561)];
    var val25 = data2[(alu5+2562)];
    var val26 = data2[(alu5+2563)];
    var val27 = data2[(alu5+3840)];
    var val28 = data2[(alu5+3841)];
    acc4 = (acc4+(val0*val20)+(val15*val16)+(val1*val24)+(val2*val28));
    acc5 = (acc5+(val3*val16)+(val4*val20)+(val5*val24)+(val6*val28));
    acc6 = (acc6+(val7*val16)+(val8*val20)+(val9*val24)+(val10*val28));
    acc7 = (acc7+(val11*val16)+(val12*val20)+(val13*val24)+(val14*val28));
    var val29 = data2[(alu5+3842)];
    acc8 = (acc8+(val0*val21)+(val15*val17)+(val1*val25)+(val2*val29));
    acc9 = (acc9+(val3*val17)+(val4*val21)+(val5*val25)+(val6*val29));
    acc10 = (acc10+(val7*val17)+(val8*val21)+(val9*val25)+(val10*val29));
    acc11 = (acc11+(val11*val17)+(val12*val21)+(val13*val25)+(val14*val29));
    var val30 = data2[(alu5+3843)];
    acc12 = (acc12+(val0*val22)+(val15*val18)+(val1*val26)+(val2*val30));
    acc13 = (acc13+(val3*val18)+(val4*val22)+(val5*val26)+(val6*val30));
    acc14 = (acc14+(val7*val18)+(val8*val22)+(val9*val26)+(val10*val30));
    acc15 = (acc15+(val11*val18)+(val12*val22)+(val13*val26)+(val14*val30));
    var val31 = data2[alu5];
    acc0 = (acc0+(val0*val19)+(val15*val31)+(val1*val23)+(val2*val27));
    acc1 = (acc1+(val3*val31)+(val4*val19)+(val5*val23)+(val6*val27));
    acc2 = (acc2+(val7*val31)+(val8*val19)+(val9*val23)+(val10*val27));
    acc3 = (acc3+(val11*val31)+(val12*val19)+(val13*val23)+(val14*val27));
  }
  data0[(alu4+1)] = acc4;
  data0[(alu4+2)] = acc8;
  data0[(alu4+3)] = acc12;
  data0[(alu4+160)] = acc1;
  data0[(alu4+161)] = acc5;
  data0[(alu4+162)] = acc9;
  data0[(alu4+163)] = acc13;
  data0[(alu4+320)] = acc2;
  data0[(alu4+321)] = acc6;
  data0[(alu4+322)] = acc10;
  data0[(alu4+323)] = acc14;
  data0[(alu4+480)] = acc3;
  data0[(alu4+481)] = acc7;
  data0[(alu4+482)] = acc11;
  data0[(alu4+483)] = acc15;
  data0[alu4] = acc0;
}`;

const r_2_8_20_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 8 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*327680);
  var alu1 = (gidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx1*40960)+alu0+alu1+(lidx0*5120)+alu2);
  var alu4 = (alu1+alu2);
  var alu5 = ((gidx1<<5)+alu0+(gidx0<<14)+(lidx0<<2)+(lidx1<<10));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu6 = ((gidx1*5120)+(lidx0*640)+alu0+((ridx0/40)*40960));
    var alu7 = (ridx0<<2);
    var alu8 = ((gidx0*81920)+(lidx1*5120)+alu7);
    var alu9 = (alu6+((alu7+1)%160));
    var alu10 = (alu6+((alu7+2)%160));
    var alu11 = (alu6+((alu7+3)%160));
    var alu12 = (alu6+(alu7%160));
    var val0 = data2[(alu9+160)];
    var val1 = data2[(alu9+320)];
    var val2 = data2[(alu9+480)];
    var val3 = data2[(alu10+160)];
    var val4 = data2[(alu10+320)];
    var val5 = data2[(alu10+480)];
    var val6 = data2[(alu11+160)];
    var val7 = data2[(alu11+320)];
    var val8 = data2[(alu11+480)];
    var val9 = data2[(alu12+160)];
    var val10 = data2[(alu12+320)];
    var val11 = data2[(alu12+480)];
    var val12 = data2[alu9];
    var val13 = data2[alu10];
    var val14 = data2[alu11];
    var val15 = data2[alu12];
    var val16 = data3[(alu8+1)];
    var val17 = data3[(alu8+2)];
    var val18 = data3[(alu8+3)];
    var val19 = data3[(alu8+1280)];
    var val20 = data3[(alu8+1281)];
    var val21 = data3[(alu8+1282)];
    var val22 = data3[(alu8+1283)];
    acc4 = (acc4+(val12*val20)+(val15*val19)+(val13*val21)+(val14*val22));
    acc5 = (acc5+(val0*val20)+(val9*val19)+(val3*val21)+(val6*val22));
    acc6 = (acc6+(val1*val20)+(val10*val19)+(val4*val21)+(val7*val22));
    acc7 = (acc7+(val2*val20)+(val11*val19)+(val5*val21)+(val8*val22));
    var val23 = data3[(alu8+2560)];
    var val24 = data3[(alu8+2561)];
    var val25 = data3[(alu8+2562)];
    var val26 = data3[(alu8+2563)];
    acc8 = (acc8+(val12*val24)+(val15*val23)+(val13*val25)+(val14*val26));
    acc9 = (acc9+(val0*val24)+(val9*val23)+(val3*val25)+(val6*val26));
    acc10 = (acc10+(val1*val24)+(val10*val23)+(val4*val25)+(val7*val26));
    acc11 = (acc11+(val2*val24)+(val11*val23)+(val5*val25)+(val8*val26));
    var val27 = data3[(alu8+3840)];
    var val28 = data3[(alu8+3841)];
    var val29 = data3[(alu8+3842)];
    var val30 = data3[(alu8+3843)];
    acc12 = (acc12+(val12*val28)+(val15*val27)+(val13*val29)+(val14*val30));
    acc13 = (acc13+(val0*val28)+(val9*val27)+(val3*val29)+(val6*val30));
    acc14 = (acc14+(val1*val28)+(val10*val27)+(val4*val29)+(val7*val30));
    acc15 = (acc15+(val2*val28)+(val11*val27)+(val5*val29)+(val8*val30));
    var val31 = data3[alu8];
    acc0 = (acc0+(val12*val16)+(val15*val31)+(val13*val17)+(val14*val18));
    acc1 = (acc1+(val0*val16)+(val9*val31)+(val3*val17)+(val6*val18));
    acc2 = (acc2+(val1*val16)+(val10*val31)+(val4*val17)+(val7*val18));
    acc3 = (acc3+(val2*val16)+(val11*val31)+(val5*val17)+(val8*val18));
  }
  var val32 = data1[(alu5+1)];
  var val33 = data1[(alu5+2)];
  var val34 = data1[(alu5+3)];
  var val35 = data1[(alu5+256)];
  var val36 = data1[(alu5+257)];
  var val37 = data1[(alu5+258)];
  var val38 = data1[(alu5+259)];
  var val39 = data1[(alu5+512)];
  var val40 = data1[(alu5+513)];
  var val41 = data1[(alu5+514)];
  var val42 = data1[(alu5+515)];
  var val43 = data1[(alu5+768)];
  var val44 = data1[(alu5+769)];
  var val45 = data1[(alu5+770)];
  var val46 = data1[(alu5+771)];
  var val47 = data1[alu5];
  var val48 = data4[(alu4+1)];
  data0[(alu3+1)] = (val35+val48+acc4);
  data0[(alu3+1281)] = (val36+val48+acc5);
  data0[(alu3+2561)] = (val37+val48+acc6);
  data0[(alu3+3841)] = (val38+val48+acc7);
  var val49 = data4[(alu4+2)];
  data0[(alu3+2)] = (val39+val49+acc8);
  data0[(alu3+1282)] = (val40+val49+acc9);
  data0[(alu3+2562)] = (val41+val49+acc10);
  data0[(alu3+3842)] = (val42+val49+acc11);
  var val50 = data4[(alu4+3)];
  data0[(alu3+3)] = (val43+val50+acc12);
  data0[(alu3+1283)] = (val44+val50+acc13);
  data0[(alu3+2563)] = (val45+val50+acc14);
  data0[(alu3+3843)] = (val46+val50+acc15);
  var val51 = data4[alu4];
  data0[(alu3+1280)] = (val32+val51+acc1);
  data0[(alu3+2560)] = (val33+val51+acc2);
  data0[(alu3+3840)] = (val34+val51+acc3);
  data0[alu3] = (val47+val51+acc0);
}`;

const r_512_16_80 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 512 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var val0 = data1[((gidx0*1280)+(lidx0*80)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*0.0007812500116415322f);
  }
}`;

const r_512_16_80n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 512 */
  var lidx0 = i32(lindex.x); /* 16 */
  var val0 = data2[gidx0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var val1 = data1[((gidx0*1280)+(lidx0*80)+ridx0)];
    var alu0 = (val1-val0);
    acc0 = (acc0+(alu0*alu0));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[gidx0] = sqrt((1/((acc1*0.0007812500116415322f)+1e-05f)));
  }
}`;

const E_16_20_8_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 16 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = ((gidx1<<5)+(lidx0<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var alu5 = (lidx1<<2);
  var alu6 = (alu0+(gidx1*40960)+(lidx0*5120)+alu5);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+1280);
  var alu11 = (alu6+1281);
  var alu12 = (alu6+1282);
  var alu13 = (alu6+1283);
  var alu14 = (alu6+2560);
  var alu15 = (alu6+2561);
  var alu16 = (alu6+2562);
  var alu17 = (alu6+2563);
  var alu18 = (alu6+3840);
  var alu19 = (alu6+3841);
  var alu20 = (alu6+3842);
  var alu21 = (alu6+3843);
  var alu22 = (alu0+alu5);
  var alu23 = (alu22+1);
  var alu24 = (alu22+2);
  var alu25 = (alu22+3);
  var val0 = data1[alu7];
  var val1 = data1[alu8];
  var val2 = data1[alu9];
  var val3 = data1[alu10];
  var val4 = data1[alu11];
  var val5 = data1[alu12];
  var val6 = data1[alu13];
  var val7 = data1[alu14];
  var val8 = data1[alu15];
  var val9 = data1[alu16];
  var val10 = data1[alu17];
  var val11 = data1[alu18];
  var val12 = data1[alu19];
  var val13 = data1[alu20];
  var val14 = data1[alu21];
  var val15 = data1[alu6];
  var val16 = data2[alu2];
  var val17 = data2[alu3];
  var val18 = data2[alu4];
  var val19 = data2[alu1];
  var val20 = data3[alu2];
  var val21 = data3[alu3];
  var val22 = data3[alu4];
  var val23 = data3[alu1];
  var val24 = data4[alu23];
  var val25 = data4[alu24];
  var val26 = data4[alu25];
  var val27 = data4[alu22];
  var val28 = data5[alu23];
  data0[alu7] = (val28+(val24*val23*(val0-val19)));
  data0[alu11] = (val28+(val24*val20*(val4-val16)));
  data0[alu15] = (val28+(val24*val21*(val8-val17)));
  data0[alu19] = (val28+(val24*val22*(val12-val18)));
  var val29 = data5[alu24];
  data0[alu8] = (val29+(val25*val23*(val1-val19)));
  data0[alu12] = (val29+(val25*val20*(val5-val16)));
  data0[alu16] = (val29+(val25*val21*(val9-val17)));
  data0[alu20] = (val29+(val25*val22*(val13-val18)));
  var val30 = data5[alu25];
  data0[alu9] = (val30+(val26*val23*(val2-val19)));
  data0[alu13] = (val30+(val26*val20*(val6-val16)));
  data0[alu17] = (val30+(val26*val21*(val10-val17)));
  data0[alu21] = (val30+(val26*val22*(val14-val18)));
  var val31 = data5[alu22];
  data0[alu10] = (val31+(val27*val20*(val3-val16)));
  data0[alu14] = (val31+(val27*val21*(val7-val17)));
  data0[alu18] = (val31+(val27*val22*(val11-val18)));
  data0[alu6] = (val31+(val27*val23*(val15-val19)));
}`;

const r_2_4_77_8_16_40_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var gidx1 = i32(gindex.y); /* 4 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0*160);
  var alu1 = (gidx0+(gidx1*4928)+(gidx2*157696)+(lidx0*19712)+(lidx1*308));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 40; ridx0++) {
    var alu2 = (ridx0<<2);
    var alu3 = ((gidx1*81920)+(gidx2*327680)+alu0+(lidx1*5120)+alu2);
    var alu4 = ((gidx0*1280)+(gidx2*98560)+alu0+alu2);
    var val0 = data1[(alu3+1)];
    var val1 = data1[(alu3+2)];
    var val2 = data1[(alu3+3)];
    var val3 = data1[(alu3+1280)];
    var val4 = data1[(alu3+1281)];
    var val5 = data1[(alu3+1282)];
    var val6 = data1[(alu3+1283)];
    var val7 = data1[(alu3+2560)];
    var val8 = data1[(alu3+2561)];
    var val9 = data1[(alu3+2562)];
    var val10 = data1[(alu3+2563)];
    var val11 = data1[(alu3+3840)];
    var val12 = data1[(alu3+3841)];
    var val13 = data1[(alu3+3842)];
    var val14 = data1[(alu3+3843)];
    var val15 = data1[alu3];
    var val16 = data2[(alu4+1)];
    var val17 = data2[(alu4+2)];
    var val18 = data2[(alu4+3)];
    var val19 = data2[alu4];
    acc0 = (acc0+(val0*val16)+(val15*val19)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val19)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val19)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val19)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[alu1] = (acc0*0.07905694097280502f);
  data0[(alu1+77)] = (acc1*0.07905694097280502f);
  data0[(alu1+154)] = (acc2*0.07905694097280502f);
  data0[(alu1+231)] = (acc3*0.07905694097280502f);
}`;

const r_128_32_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 128 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = (f32(-inf(1.0)));
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var val0 = data1[((gidx0*2464)+(lidx0*77)+ridx0)];
    acc0 = select(acc0,val0,(acc0<val0));
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_32_32_77_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (alu0+3);
  var val0 = data2[alu1];
  var val1 = data2[alu2];
  var val2 = data2[alu3];
  var val3 = data2[alu0];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var alu4 = ((gidx0*9856)+(lidx0*308)+ridx0);
    var val4 = data1[(alu4+77)];
    acc1 = (acc1+exp2(((val4-val0)*1.4426950408889634f)));
    var val5 = data1[(alu4+154)];
    acc2 = (acc2+exp2(((val5-val1)*1.4426950408889634f)));
    var val6 = data1[(alu4+231)];
    acc3 = (acc3+exp2(((val6-val2)*1.4426950408889634f)));
    var val7 = data1[alu4];
    acc0 = (acc0+exp2(((val7-val3)*1.4426950408889634f)));
  }
  data0[alu1] = acc1;
  data0[alu2] = acc2;
  data0[alu3] = acc3;
  data0[alu0] = acc0;
}`;

const E_32_77_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var gidx1 = i32(gindex.y); /* 32 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = (gidx0+(gidx1*9856)+(lidx0*308));
  var alu1 = (alu0+77);
  var alu2 = (alu0+154);
  var alu3 = (alu0+231);
  var alu4 = ((gidx1<<7)+(lidx0<<2));
  var alu5 = (alu4+1);
  var alu6 = (alu4+2);
  var alu7 = (alu4+3);
  var val0 = data1[alu0];
  var val1 = data1[alu1];
  var val2 = data1[alu2];
  var val3 = data1[alu3];
  var val4 = data2[alu5];
  var val5 = data2[alu6];
  var val6 = data2[alu7];
  var val7 = data2[alu4];
  var val8 = data3[alu5];
  data0[alu1] = (exp2(((val1-val4)*1.4426950408889634f))*(1/val8));
  var val9 = data3[alu6];
  data0[alu2] = (exp2(((val2-val5)*1.4426950408889634f))*(1/val9));
  var val10 = data3[alu7];
  data0[alu3] = (exp2(((val3-val6)*1.4426950408889634f))*(1/val10));
  var val11 = data3[alu4];
  data0[alu0] = (exp2(((val0-val7)*1.4426950408889634f))*(1/val11));
}`;

const r_2_8_4_5_16_8_77_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 8 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = (gidx0/5);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx0%5)<<5);
  var alu3 = ((gidx1*40960)+(gidx2*327680)+(alu0*10240)+alu2+(lidx0*640)+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var alu4 = ((gidx1*19712)+(gidx2*157696)+(alu0*4928)+(lidx0*308)+ridx0);
    var alu5 = ((gidx1*160)+(gidx2*98560)+alu2+alu1+(ridx0*1280));
    var val0 = data1[(alu4+77)];
    var val1 = data1[(alu4+154)];
    var val2 = data1[(alu4+231)];
    var val3 = data1[alu4];
    var val4 = data2[(alu5+1)];
    acc4 = (acc4+(val3*val4));
    acc5 = (acc5+(val0*val4));
    acc6 = (acc6+(val1*val4));
    acc7 = (acc7+(val2*val4));
    var val5 = data2[(alu5+2)];
    acc8 = (acc8+(val3*val5));
    acc9 = (acc9+(val0*val5));
    acc10 = (acc10+(val1*val5));
    acc11 = (acc11+(val2*val5));
    var val6 = data2[(alu5+3)];
    acc12 = (acc12+(val3*val6));
    acc13 = (acc13+(val0*val6));
    acc14 = (acc14+(val1*val6));
    acc15 = (acc15+(val2*val6));
    var val7 = data2[alu5];
    acc0 = (acc0+(val3*val7));
    acc1 = (acc1+(val0*val7));
    acc2 = (acc2+(val1*val7));
    acc3 = (acc3+(val2*val7));
  }
  data0[(alu3+1)] = acc4;
  data0[(alu3+2)] = acc8;
  data0[(alu3+3)] = acc12;
  data0[(alu3+160)] = acc1;
  data0[(alu3+161)] = acc5;
  data0[(alu3+162)] = acc9;
  data0[(alu3+163)] = acc13;
  data0[(alu3+320)] = acc2;
  data0[(alu3+321)] = acc6;
  data0[(alu3+322)] = acc10;
  data0[(alu3+323)] = acc14;
  data0[(alu3+480)] = acc3;
  data0[(alu3+481)] = acc7;
  data0[(alu3+482)] = acc11;
  data0[(alu3+483)] = acc15;
  data0[alu3] = acc0;
}`;

const r_2_8_20_8_16_320_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 8 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*327680);
  var alu1 = (gidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx1*40960)+alu0+alu1+(lidx0*5120)+alu2);
  var alu4 = (alu3+1);
  var alu5 = (alu3+2);
  var alu6 = (alu3+3);
  var alu7 = (alu3+1280);
  var alu8 = (alu3+1281);
  var alu9 = (alu3+1282);
  var alu10 = (alu3+1283);
  var alu11 = (alu3+2560);
  var alu12 = (alu3+2561);
  var alu13 = (alu3+2562);
  var alu14 = (alu3+2563);
  var alu15 = (alu3+3840);
  var alu16 = (alu3+3841);
  var alu17 = (alu3+3842);
  var alu18 = (alu3+3843);
  var alu19 = (alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu20 = ((gidx1*5120)+(lidx0*640)+alu0+((ridx0/40)*40960));
    var alu21 = (ridx0<<2);
    var alu22 = ((gidx0*81920)+(lidx1*5120)+alu21);
    var alu23 = (alu20+((alu21+1)%160));
    var alu24 = (alu20+((alu21+2)%160));
    var alu25 = (alu20+((alu21+3)%160));
    var alu26 = (alu20+(alu21%160));
    var val0 = data2[(alu23+160)];
    var val1 = data2[(alu23+320)];
    var val2 = data2[(alu23+480)];
    var val3 = data2[(alu24+160)];
    var val4 = data2[(alu24+320)];
    var val5 = data2[(alu24+480)];
    var val6 = data2[(alu25+160)];
    var val7 = data2[(alu25+320)];
    var val8 = data2[(alu25+480)];
    var val9 = data2[(alu26+160)];
    var val10 = data2[(alu26+320)];
    var val11 = data2[(alu26+480)];
    var val12 = data2[alu23];
    var val13 = data2[alu24];
    var val14 = data2[alu25];
    var val15 = data2[alu26];
    var val16 = data3[(alu22+1)];
    var val17 = data3[(alu22+2)];
    var val18 = data3[(alu22+3)];
    var val19 = data3[(alu22+1280)];
    var val20 = data3[(alu22+1281)];
    var val21 = data3[(alu22+1282)];
    var val22 = data3[(alu22+1283)];
    acc4 = (acc4+(val12*val20)+(val15*val19)+(val13*val21)+(val14*val22));
    acc5 = (acc5+(val0*val20)+(val9*val19)+(val3*val21)+(val6*val22));
    acc6 = (acc6+(val1*val20)+(val10*val19)+(val4*val21)+(val7*val22));
    acc7 = (acc7+(val2*val20)+(val11*val19)+(val5*val21)+(val8*val22));
    var val23 = data3[(alu22+2560)];
    var val24 = data3[(alu22+2561)];
    var val25 = data3[(alu22+2562)];
    var val26 = data3[(alu22+2563)];
    acc8 = (acc8+(val12*val24)+(val15*val23)+(val13*val25)+(val14*val26));
    acc9 = (acc9+(val0*val24)+(val9*val23)+(val3*val25)+(val6*val26));
    acc10 = (acc10+(val1*val24)+(val10*val23)+(val4*val25)+(val7*val26));
    acc11 = (acc11+(val2*val24)+(val11*val23)+(val5*val25)+(val8*val26));
    var val27 = data3[(alu22+3840)];
    var val28 = data3[(alu22+3841)];
    var val29 = data3[(alu22+3842)];
    var val30 = data3[(alu22+3843)];
    acc12 = (acc12+(val12*val28)+(val15*val27)+(val13*val29)+(val14*val30));
    acc13 = (acc13+(val0*val28)+(val9*val27)+(val3*val29)+(val6*val30));
    acc14 = (acc14+(val1*val28)+(val10*val27)+(val4*val29)+(val7*val30));
    acc15 = (acc15+(val2*val28)+(val11*val27)+(val5*val29)+(val8*val30));
    var val31 = data3[alu22];
    acc0 = (acc0+(val12*val16)+(val15*val31)+(val13*val17)+(val14*val18));
    acc1 = (acc1+(val0*val16)+(val9*val31)+(val3*val17)+(val6*val18));
    acc2 = (acc2+(val1*val16)+(val10*val31)+(val4*val17)+(val7*val18));
    acc3 = (acc3+(val2*val16)+(val11*val31)+(val5*val17)+(val8*val18));
  }
  var val32 = data1[alu4];
  var val33 = data1[alu5];
  var val34 = data1[alu6];
  var val35 = data1[alu7];
  var val36 = data1[alu8];
  var val37 = data1[alu9];
  var val38 = data1[alu10];
  var val39 = data1[alu11];
  var val40 = data1[alu12];
  var val41 = data1[alu13];
  var val42 = data1[alu14];
  var val43 = data1[alu15];
  var val44 = data1[alu16];
  var val45 = data1[alu17];
  var val46 = data1[alu18];
  var val47 = data1[alu3];
  var val48 = data4[(alu19+1)];
  data0[alu4] = (val32+val48+acc4);
  data0[alu8] = (val36+val48+acc5);
  data0[alu12] = (val40+val48+acc6);
  data0[alu16] = (val44+val48+acc7);
  var val49 = data4[(alu19+2)];
  data0[alu5] = (val33+val49+acc8);
  data0[alu9] = (val37+val49+acc9);
  data0[alu13] = (val41+val49+acc10);
  data0[alu17] = (val45+val49+acc11);
  var val50 = data4[(alu19+3)];
  data0[alu6] = (val34+val50+acc12);
  data0[alu10] = (val38+val50+acc13);
  data0[alu14] = (val42+val50+acc14);
  data0[alu18] = (val46+val50+acc15);
  var val51 = data4[alu19];
  data0[alu7] = (val35+val51+acc1);
  data0[alu11] = (val39+val51+acc2);
  data0[alu15] = (val43+val51+acc3);
  data0[alu3] = (val47+val51+acc0);
}`;

const r_16_160_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 160 */
  var gidx1 = i32(gindex.y); /* 16 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1*327680)+(lidx0*40960)+alu1);
  var alu3 = (alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu4 = (ridx0<<2);
    var alu5 = ((gidx0*81920)+(lidx1*5120)+alu4);
    var alu6 = ((gidx1*40960)+(lidx0*5120)+alu4);
    var val0 = data1[(alu6+1)];
    var val1 = data1[(alu6+2)];
    var val2 = data1[(alu6+3)];
    var val3 = data1[(alu6+1280)];
    var val4 = data1[(alu6+1281)];
    var val5 = data1[(alu6+1282)];
    var val6 = data1[(alu6+1283)];
    var val7 = data1[(alu6+2560)];
    var val8 = data1[(alu6+2561)];
    var val9 = data1[(alu6+2562)];
    var val10 = data1[(alu6+2563)];
    var val11 = data1[(alu6+3840)];
    var val12 = data1[(alu6+3841)];
    var val13 = data1[(alu6+3842)];
    var val14 = data1[(alu6+3843)];
    var val15 = data1[alu6];
    var val16 = data2[(alu5+1)];
    var val17 = data2[(alu5+2)];
    var val18 = data2[(alu5+3)];
    var val19 = data2[(alu5+1280)];
    var val20 = data2[(alu5+1281)];
    var val21 = data2[(alu5+1282)];
    var val22 = data2[(alu5+1283)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu5+2560)];
    var val24 = data2[(alu5+2561)];
    var val25 = data2[(alu5+2562)];
    var val26 = data2[(alu5+2563)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu5+3840)];
    var val28 = data2[(alu5+3841)];
    var val29 = data2[(alu5+3842)];
    var val30 = data2[(alu5+3843)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu5];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data3[(alu3+1)];
  data0[(alu2+1)] = (val32+acc4);
  data0[(alu2+10241)] = (val32+acc5);
  data0[(alu2+20481)] = (val32+acc6);
  data0[(alu2+30721)] = (val32+acc7);
  var val33 = data3[(alu3+2)];
  data0[(alu2+2)] = (val33+acc8);
  data0[(alu2+10242)] = (val33+acc9);
  data0[(alu2+20482)] = (val33+acc10);
  data0[(alu2+30722)] = (val33+acc11);
  var val34 = data3[(alu3+3)];
  data0[(alu2+3)] = (val34+acc12);
  data0[(alu2+10243)] = (val34+acc13);
  data0[(alu2+20483)] = (val34+acc14);
  data0[(alu2+30723)] = (val34+acc15);
  var val35 = data3[alu3];
  data0[(alu2+10240)] = (val35+acc1);
  data0[(alu2+20480)] = (val35+acc2);
  data0[(alu2+30720)] = (val35+acc3);
  data0[alu2] = (val35+acc0);
}`;

const E_64_80_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 80 */
  var gidx1 = i32(gindex.y); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1*40960)+(lidx0*5120)+alu1);
  var alu3 = (alu0+(gidx1*81920)+(lidx0*10240)+alu1);
  var val0 = data1[(alu3+1)];
  var val1 = data1[(alu3+2)];
  var val2 = data1[(alu3+3)];
  var val3 = data1[(alu3+5120)];
  var val4 = data1[(alu3+5121)];
  data0[(alu2+1)] = (val0*(1/(exp2(((val4+(val4*val4*val4*0.044715f))*-2.302208198144325f))+1.0f))*val4);
  var val5 = data1[(alu3+5122)];
  data0[(alu2+2)] = (val1*(1/(exp2(((val5+(val5*val5*val5*0.044715f))*-2.302208198144325f))+1.0f))*val5);
  var val6 = data1[(alu3+5123)];
  data0[(alu2+3)] = (val2*(1/(exp2(((val6+(val6*val6*val6*0.044715f))*-2.302208198144325f))+1.0f))*val6);
  var val7 = data1[alu3];
  data0[alu2] = (val7*(1/(exp2(((val3+(val3*val3*val3*0.044715f))*-2.302208198144325f))+1.0f))*val3);
}`;

const r_16_20_8_16_1280_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 16 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1*40960)+(lidx0*5120)+alu1);
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = (alu2+1280);
  var alu7 = (alu2+1281);
  var alu8 = (alu2+1282);
  var alu9 = (alu2+1283);
  var alu10 = (alu2+2560);
  var alu11 = (alu2+2561);
  var alu12 = (alu2+2562);
  var alu13 = (alu2+2563);
  var alu14 = (alu2+3840);
  var alu15 = (alu2+3841);
  var alu16 = (alu2+3842);
  var alu17 = (alu2+3843);
  var alu18 = (alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var alu19 = (ridx0<<2);
    var alu20 = ((gidx0*327680)+(lidx1*20480)+alu19);
    var alu21 = ((gidx1*163840)+(lidx0*20480)+alu19);
    var val0 = data2[(alu21+1)];
    var val1 = data2[(alu21+2)];
    var val2 = data2[(alu21+3)];
    var val3 = data2[(alu21+5120)];
    var val4 = data2[(alu21+5121)];
    var val5 = data2[(alu21+5122)];
    var val6 = data2[(alu21+5123)];
    var val7 = data2[(alu21+10240)];
    var val8 = data2[(alu21+10241)];
    var val9 = data2[(alu21+10242)];
    var val10 = data2[(alu21+10243)];
    var val11 = data2[(alu21+15360)];
    var val12 = data2[(alu21+15361)];
    var val13 = data2[(alu21+15362)];
    var val14 = data2[(alu21+15363)];
    var val15 = data2[alu21];
    var val16 = data3[(alu20+1)];
    var val17 = data3[(alu20+2)];
    var val18 = data3[(alu20+3)];
    var val19 = data3[(alu20+5120)];
    var val20 = data3[(alu20+5121)];
    var val21 = data3[(alu20+5122)];
    var val22 = data3[(alu20+5123)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data3[(alu20+10240)];
    var val24 = data3[(alu20+10241)];
    var val25 = data3[(alu20+10242)];
    var val26 = data3[(alu20+10243)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data3[(alu20+15360)];
    var val28 = data3[(alu20+15361)];
    var val29 = data3[(alu20+15362)];
    var val30 = data3[(alu20+15363)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data3[alu20];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data1[alu3];
  var val33 = data1[alu4];
  var val34 = data1[alu5];
  var val35 = data1[alu6];
  var val36 = data1[alu7];
  var val37 = data1[alu8];
  var val38 = data1[alu9];
  var val39 = data1[alu10];
  var val40 = data1[alu11];
  var val41 = data1[alu12];
  var val42 = data1[alu13];
  var val43 = data1[alu14];
  var val44 = data1[alu15];
  var val45 = data1[alu16];
  var val46 = data1[alu17];
  var val47 = data1[alu2];
  var val48 = data4[(alu18+1)];
  data0[alu3] = (val32+val48+acc4);
  data0[alu7] = (val36+val48+acc5);
  data0[alu11] = (val40+val48+acc6);
  data0[alu15] = (val44+val48+acc7);
  var val49 = data4[(alu18+2)];
  data0[alu4] = (val33+val49+acc8);
  data0[alu8] = (val37+val49+acc9);
  data0[alu12] = (val41+val49+acc10);
  data0[alu16] = (val45+val49+acc11);
  var val50 = data4[(alu18+3)];
  data0[alu5] = (val34+val50+acc12);
  data0[alu9] = (val38+val50+acc13);
  data0[alu13] = (val42+val50+acc14);
  data0[alu17] = (val46+val50+acc15);
  var val51 = data4[alu18];
  data0[alu6] = (val35+val51+acc1);
  data0[alu10] = (val39+val51+acc2);
  data0[alu14] = (val43+val51+acc3);
  data0[alu2] = (val47+val51+acc0);
}`;

const r_2_40_4_8_16_320_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 40 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*327680);
  var alu1 = ((gidx1<<5)+(lidx0<<2));
  var alu2 = ((gidx1<<13)+alu0+(gidx0<<6)+(lidx0<<10)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = (alu2+256);
  var alu7 = (alu2+257);
  var alu8 = (alu2+258);
  var alu9 = (alu2+259);
  var alu10 = (alu2+512);
  var alu11 = (alu2+513);
  var alu12 = (alu2+514);
  var alu13 = (alu2+515);
  var alu14 = (alu2+768);
  var alu15 = (alu2+769);
  var alu16 = (alu2+770);
  var alu17 = (alu2+771);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu18 = (ridx0<<2);
    var alu19 = ((gidx0*81920)+alu0+(lidx1*5120)+alu18);
    var alu20 = ((gidx1*40960)+(lidx0*5120)+alu18);
    var val0 = data1[(alu19+1)];
    var val1 = data1[(alu19+2)];
    var val2 = data1[(alu19+3)];
    var val3 = data1[(alu19+1280)];
    var val4 = data1[(alu19+1281)];
    var val5 = data1[(alu19+1282)];
    var val6 = data1[(alu19+1283)];
    var val7 = data1[(alu19+2560)];
    var val8 = data1[(alu19+2561)];
    var val9 = data1[(alu19+2562)];
    var val10 = data1[(alu19+2563)];
    var val11 = data1[(alu19+3840)];
    var val12 = data1[(alu19+3841)];
    var val13 = data1[(alu19+3842)];
    var val14 = data1[(alu19+3843)];
    var val15 = data1[alu19];
    var val16 = data2[(alu20+1)];
    var val17 = data2[(alu20+2)];
    var val18 = data2[(alu20+3)];
    var val19 = data2[(alu20+1280)];
    var val20 = data2[(alu20+1281)];
    var val21 = data2[(alu20+1282)];
    var val22 = data2[(alu20+1283)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu20+2560)];
    var val24 = data2[(alu20+2561)];
    var val25 = data2[(alu20+2562)];
    var val26 = data2[(alu20+2563)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu20+3840)];
    var val28 = data2[(alu20+3841)];
    var val29 = data2[(alu20+3842)];
    var val30 = data2[(alu20+3843)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu20];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data3[(alu1+1)];
  var val33 = data3[(alu1+2)];
  var val34 = data3[(alu1+3)];
  var val35 = data3[alu1];
  var val36 = data4[alu3];
  data0[alu3] = (val36+val35+acc1);
  var val37 = data4[alu4];
  data0[alu4] = (val37+val35+acc2);
  var val38 = data4[alu5];
  data0[alu5] = (val38+val35+acc3);
  var val39 = data4[alu6];
  data0[alu6] = (val39+val32+acc4);
  var val40 = data4[alu7];
  data0[alu7] = (val40+val32+acc5);
  var val41 = data4[alu8];
  data0[alu8] = (val41+val32+acc6);
  var val42 = data4[alu9];
  data0[alu9] = (val42+val32+acc7);
  var val43 = data4[alu10];
  data0[alu10] = (val43+val33+acc8);
  var val44 = data4[alu11];
  data0[alu11] = (val44+val33+acc9);
  var val45 = data4[alu12];
  data0[alu12] = (val45+val33+acc10);
  var val46 = data4[alu13];
  data0[alu13] = (val46+val33+acc11);
  var val47 = data4[alu14];
  data0[alu14] = (val47+val34+acc12);
  var val48 = data4[alu15];
  data0[alu15] = (val48+val34+acc13);
  var val49 = data4[alu16];
  data0[alu16] = (val49+val34+acc14);
  var val50 = data4[alu17];
  data0[alu17] = (val50+val34+acc15);
  var val51 = data4[alu2];
  data0[alu2] = (val51+val35+acc0);
}`;

const r_2_160_2_16_4_1280_4_4_3_3n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(2,16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 160 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var lidx2 = i32(lindex.z); /* 4 */
  var alu0 = (gidx1*327680);
  var alu1 = (lidx1<<4);
  var alu2 = (lidx2<<2);
  var alu3 = (lidx1<15);
  var alu4 = (lidx2<3);
  var alu5 = ((lidx1<1)!=true);
  var alu6 = ((lidx2<1)!=true);
  var alu7 = ((gidx0<<3)+(lidx0<<2));
  var alu8 = (alu7+1);
  var alu9 = (alu7+2);
  var alu10 = (alu7+3);
  var alu11 = ((gidx0<<11)+alu0+(lidx0<<10)+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var alu12 = ((gidx0*92160)+(lidx0*46080)+(ridx0*9));
    var alu13 = (alu0+(ridx0<<8)+alu1+alu2);
    var val0 = select(0.0f, data1[(alu13+-17)], (alu5&alu6));
    var val1 = select(0.0f, data1[(alu13+-16)], alu5);
    var val2 = select(0.0f, data1[(alu13+-15)], alu5);
    var val3 = select(0.0f, data1[(alu13+-14)], alu5);
    var val4 = select(0.0f, data1[(alu13+-13)], alu5);
    var val5 = select(0.0f, data1[(alu13+-12)], (alu4&alu5));
    var val6 = select(0.0f, data1[(alu13+-1)], alu6);
    var val7 = data1[(alu13+1)];
    var val8 = data1[(alu13+2)];
    var val9 = data1[(alu13+3)];
    var val10 = select(0.0f, data1[(alu13+4)], alu4);
    var val11 = select(0.0f, data1[(alu13+15)], (alu3&alu6));
    var val12 = select(0.0f, data1[(alu13+16)], alu3);
    var val13 = select(0.0f, data1[(alu13+17)], alu3);
    var val14 = select(0.0f, data1[(alu13+18)], alu3);
    var val15 = select(0.0f, data1[(alu13+19)], alu3);
    var val16 = select(0.0f, data1[(alu13+20)], (alu3&alu4));
    var val17 = data1[alu13];
    var val18 = data2[(alu12+1)];
    var val19 = data2[(alu12+2)];
    var val20 = data2[(alu12+3)];
    var val21 = data2[(alu12+4)];
    var val22 = data2[(alu12+5)];
    var val23 = data2[(alu12+6)];
    var val24 = data2[(alu12+7)];
    var val25 = data2[(alu12+8)];
    var val26 = data2[(alu12+11520)];
    var val27 = data2[(alu12+11521)];
    var val28 = data2[(alu12+11522)];
    var val29 = data2[(alu12+11523)];
    var val30 = data2[(alu12+11524)];
    var val31 = data2[(alu12+11525)];
    var val32 = data2[(alu12+11526)];
    var val33 = data2[(alu12+11527)];
    var val34 = data2[(alu12+11528)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu12+23040)];
    var val36 = data2[(alu12+23041)];
    var val37 = data2[(alu12+23042)];
    var val38 = data2[(alu12+23043)];
    var val39 = data2[(alu12+23044)];
    var val40 = data2[(alu12+23045)];
    var val41 = data2[(alu12+23046)];
    var val42 = data2[(alu12+23047)];
    var val43 = data2[(alu12+23048)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu12+34560)];
    var val45 = data2[(alu12+34561)];
    var val46 = data2[(alu12+34562)];
    var val47 = data2[(alu12+34563)];
    var val48 = data2[(alu12+34564)];
    var val49 = data2[(alu12+34565)];
    var val50 = data2[(alu12+34566)];
    var val51 = data2[(alu12+34567)];
    var val52 = data2[(alu12+34568)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu12];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[alu8];
  var val55 = data3[alu9];
  var val56 = data3[alu10];
  var val57 = data3[alu7];
  var val58 = data4[alu8];
  data0[(alu11+256)] = (val58+val54+acc1);
  data0[(alu11+257)] = (val58+val54+acc5);
  data0[(alu11+258)] = (val58+val54+acc9);
  data0[(alu11+259)] = (val58+val54+acc13);
  var val59 = data4[alu9];
  data0[(alu11+512)] = (val59+val55+acc2);
  data0[(alu11+513)] = (val59+val55+acc6);
  data0[(alu11+514)] = (val59+val55+acc10);
  data0[(alu11+515)] = (val59+val55+acc14);
  var val60 = data4[alu10];
  data0[(alu11+768)] = (val60+val56+acc3);
  data0[(alu11+769)] = (val60+val56+acc7);
  data0[(alu11+770)] = (val60+val56+acc11);
  data0[(alu11+771)] = (val60+val56+acc15);
  var val61 = data4[alu7];
  data0[(alu11+1)] = (val61+val57+acc4);
  data0[(alu11+2)] = (val61+val57+acc8);
  data0[(alu11+3)] = (val61+val57+acc12);
  data0[alu11] = (val61+val57+acc0);
}`;

const r_2_160_2_16_4_1280_4_4_3_3n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(2,16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 160 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var lidx2 = i32(lindex.z); /* 4 */
  var alu0 = (gidx1*327680);
  var alu1 = (lidx1<<4);
  var alu2 = (lidx2<<2);
  var alu3 = (lidx1<15);
  var alu4 = (lidx2<3);
  var alu5 = ((lidx1<1)!=true);
  var alu6 = ((lidx2<1)!=true);
  var alu7 = ((gidx0<<3)+(lidx0<<2));
  var alu8 = ((gidx0<<11)+alu0+(lidx0<<10)+alu1+alu2);
  var alu9 = (alu8+1);
  var alu10 = (alu8+2);
  var alu11 = (alu8+3);
  var alu12 = (alu8+256);
  var alu13 = (alu8+257);
  var alu14 = (alu8+258);
  var alu15 = (alu8+259);
  var alu16 = (alu8+512);
  var alu17 = (alu8+513);
  var alu18 = (alu8+514);
  var alu19 = (alu8+515);
  var alu20 = (alu8+768);
  var alu21 = (alu8+769);
  var alu22 = (alu8+770);
  var alu23 = (alu8+771);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var alu24 = ((gidx0*92160)+(lidx0*46080)+(ridx0*9));
    var alu25 = (alu0+(ridx0<<8)+alu1+alu2);
    var val0 = select(0.0f, data2[(alu25+-17)], (alu5&alu6));
    var val1 = select(0.0f, data2[(alu25+-16)], alu5);
    var val2 = select(0.0f, data2[(alu25+-15)], alu5);
    var val3 = select(0.0f, data2[(alu25+-14)], alu5);
    var val4 = select(0.0f, data2[(alu25+-13)], alu5);
    var val5 = select(0.0f, data2[(alu25+-12)], (alu4&alu5));
    var val6 = select(0.0f, data2[(alu25+-1)], alu6);
    var val7 = data2[(alu25+1)];
    var val8 = data2[(alu25+2)];
    var val9 = data2[(alu25+3)];
    var val10 = select(0.0f, data2[(alu25+4)], alu4);
    var val11 = select(0.0f, data2[(alu25+15)], (alu3&alu6));
    var val12 = select(0.0f, data2[(alu25+16)], alu3);
    var val13 = select(0.0f, data2[(alu25+17)], alu3);
    var val14 = select(0.0f, data2[(alu25+18)], alu3);
    var val15 = select(0.0f, data2[(alu25+19)], alu3);
    var val16 = select(0.0f, data2[(alu25+20)], (alu3&alu4));
    var val17 = data2[alu25];
    var val18 = data3[(alu24+1)];
    var val19 = data3[(alu24+2)];
    var val20 = data3[(alu24+3)];
    var val21 = data3[(alu24+4)];
    var val22 = data3[(alu24+5)];
    var val23 = data3[(alu24+6)];
    var val24 = data3[(alu24+7)];
    var val25 = data3[(alu24+8)];
    var val26 = data3[(alu24+11520)];
    var val27 = data3[(alu24+11521)];
    var val28 = data3[(alu24+11522)];
    var val29 = data3[(alu24+11523)];
    var val30 = data3[(alu24+11524)];
    var val31 = data3[(alu24+11525)];
    var val32 = data3[(alu24+11526)];
    var val33 = data3[(alu24+11527)];
    var val34 = data3[(alu24+11528)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data3[(alu24+23040)];
    var val36 = data3[(alu24+23041)];
    var val37 = data3[(alu24+23042)];
    var val38 = data3[(alu24+23043)];
    var val39 = data3[(alu24+23044)];
    var val40 = data3[(alu24+23045)];
    var val41 = data3[(alu24+23046)];
    var val42 = data3[(alu24+23047)];
    var val43 = data3[(alu24+23048)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data3[(alu24+34560)];
    var val45 = data3[(alu24+34561)];
    var val46 = data3[(alu24+34562)];
    var val47 = data3[(alu24+34563)];
    var val48 = data3[(alu24+34564)];
    var val49 = data3[(alu24+34565)];
    var val50 = data3[(alu24+34566)];
    var val51 = data3[(alu24+34567)];
    var val52 = data3[(alu24+34568)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data3[alu24];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data1[alu9];
  var val55 = data1[alu10];
  var val56 = data1[alu11];
  var val57 = data1[alu12];
  var val58 = data1[alu13];
  var val59 = data1[alu14];
  var val60 = data1[alu15];
  var val61 = data1[alu16];
  var val62 = data1[alu17];
  var val63 = data1[alu18];
  var val64 = data1[alu19];
  var val65 = data1[alu20];
  var val66 = data1[alu21];
  var val67 = data1[alu22];
  var val68 = data1[alu23];
  var val69 = data1[alu8];
  var val70 = data4[(alu7+1)];
  data0[alu12] = (val57+val70+acc1);
  data0[alu13] = (val58+val70+acc5);
  data0[alu14] = (val59+val70+acc9);
  data0[alu15] = (val60+val70+acc13);
  var val71 = data4[(alu7+2)];
  data0[alu16] = (val61+val71+acc2);
  data0[alu17] = (val62+val71+acc6);
  data0[alu18] = (val63+val71+acc10);
  data0[alu19] = (val64+val71+acc14);
  var val72 = data4[(alu7+3)];
  data0[alu20] = (val65+val72+acc3);
  data0[alu21] = (val66+val72+acc7);
  data0[alu22] = (val67+val72+acc11);
  data0[alu23] = (val68+val72+acc15);
  var val73 = data4[alu7];
  data0[alu9] = (val54+val73+acc4);
  data0[alu10] = (val55+val73+acc8);
  data0[alu11] = (val56+val73+acc12);
  data0[alu8] = (val69+val73+acc0);
}`;

const r_2_40_8_8_2_1280_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,8,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 40 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 8 */
  var lidx2 = i32(lindex.z); /* 2 */
  var alu0 = ((lidx1<1)!=true);
  var alu1 = ((lidx2<1)!=true);
  var alu2 = ((gidx0<<5)+(lidx0<<2));
  var alu3 = ((gidx0<<11)+(gidx1*81920)+(lidx0<<8)+(lidx1<<3)+(lidx2<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var alu4 = ((gidx0*368640)+(lidx0*46080)+(ridx0*9));
    var alu5 = ((gidx1*327680)+(ridx0<<8)+(lidx1<<5));
    var alu6 = (alu5+(lidx2<<3));
    var val0 = select(0.0f, data1[(alu6+-16)], alu0);
    var val1 = select(0.0f, data1[(alu6+-15)], alu0);
    var val2 = select(0.0f, data1[(alu6+-14)], alu0);
    var val3 = select(0.0f, data1[(alu6+-13)], alu0);
    var val4 = select(0.0f, data1[(alu6+-12)], alu0);
    var val5 = select(0.0f, data1[(alu6+-11)], alu0);
    var val6 = select(0.0f, data1[(alu6+-10)], alu0);
    var val7 = select(0.0f, data1[(alu6+-9)], alu0);
    var val8 = data1[(alu6+1)];
    var val9 = data1[(alu6+2)];
    var val10 = data1[(alu6+3)];
    var val11 = data1[(alu6+4)];
    var val12 = data1[(alu6+5)];
    var val13 = data1[(alu6+6)];
    var val14 = data1[(alu6+7)];
    var val15 = data1[(alu6+16)];
    var val16 = data1[(alu6+17)];
    var val17 = data1[(alu6+18)];
    var val18 = data1[(alu6+19)];
    var val19 = data1[(alu6+20)];
    var val20 = data1[(alu6+21)];
    var val21 = data1[(alu6+22)];
    var val22 = data1[(alu6+23)];
    var val23 = data1[alu6];
    var val24 = select(0.0f, data1[(alu5+-9)], (alu0&alu1));
    var val25 = select(0.0f, data1[(alu5+7)], alu1);
    var val26 = select(0.0f, data1[(alu5+23)], alu1);
    var val27 = data2[(alu4+1)];
    var val28 = data2[(alu4+2)];
    var val29 = data2[(alu4+3)];
    var val30 = data2[(alu4+4)];
    var val31 = data2[(alu4+5)];
    var val32 = data2[(alu4+6)];
    var val33 = data2[(alu4+7)];
    var val34 = data2[(alu4+8)];
    var val35 = data2[(alu4+11520)];
    var val36 = data2[(alu4+11521)];
    var val37 = data2[(alu4+11522)];
    var val38 = data2[(alu4+11523)];
    var val39 = data2[(alu4+11524)];
    var val40 = data2[(alu4+11525)];
    var val41 = data2[(alu4+11526)];
    var val42 = data2[(alu4+11527)];
    var val43 = data2[(alu4+11528)];
    acc1 = (acc1+(val24*val35)+(val25*val38)+(val26*val41)+(val0*val36)+(val23*val39)+(val15*val42)+(val1*val37)+(val8*val40)+(val16*val43));
    acc5 = (acc5+(val1*val35)+(val8*val38)+(val16*val41)+(val2*val36)+(val9*val39)+(val17*val42)+(val3*val37)+(val10*val40)+(val18*val43));
    acc9 = (acc9+(val3*val35)+(val10*val38)+(val18*val41)+(val4*val36)+(val11*val39)+(val19*val42)+(val5*val37)+(val12*val40)+(val20*val43));
    acc13 = (acc13+(val5*val35)+(val12*val38)+(val20*val41)+(val6*val36)+(val13*val39)+(val21*val42)+(val7*val37)+(val14*val40)+(val22*val43));
    var val44 = data2[(alu4+23040)];
    var val45 = data2[(alu4+23041)];
    var val46 = data2[(alu4+23042)];
    var val47 = data2[(alu4+23043)];
    var val48 = data2[(alu4+23044)];
    var val49 = data2[(alu4+23045)];
    var val50 = data2[(alu4+23046)];
    var val51 = data2[(alu4+23047)];
    var val52 = data2[(alu4+23048)];
    acc2 = (acc2+(val24*val44)+(val25*val47)+(val26*val50)+(val0*val45)+(val23*val48)+(val15*val51)+(val1*val46)+(val8*val49)+(val16*val52));
    acc6 = (acc6+(val1*val44)+(val8*val47)+(val16*val50)+(val2*val45)+(val9*val48)+(val17*val51)+(val3*val46)+(val10*val49)+(val18*val52));
    acc10 = (acc10+(val3*val44)+(val10*val47)+(val18*val50)+(val4*val45)+(val11*val48)+(val19*val51)+(val5*val46)+(val12*val49)+(val20*val52));
    acc14 = (acc14+(val5*val44)+(val12*val47)+(val20*val50)+(val6*val45)+(val13*val48)+(val21*val51)+(val7*val46)+(val14*val49)+(val22*val52));
    var val53 = data2[(alu4+34560)];
    var val54 = data2[(alu4+34561)];
    var val55 = data2[(alu4+34562)];
    var val56 = data2[(alu4+34563)];
    var val57 = data2[(alu4+34564)];
    var val58 = data2[(alu4+34565)];
    var val59 = data2[(alu4+34566)];
    var val60 = data2[(alu4+34567)];
    var val61 = data2[(alu4+34568)];
    acc3 = (acc3+(val24*val53)+(val25*val56)+(val26*val59)+(val0*val54)+(val23*val57)+(val15*val60)+(val1*val55)+(val8*val58)+(val16*val61));
    acc7 = (acc7+(val1*val53)+(val8*val56)+(val16*val59)+(val2*val54)+(val9*val57)+(val17*val60)+(val3*val55)+(val10*val58)+(val18*val61));
    acc11 = (acc11+(val3*val53)+(val10*val56)+(val18*val59)+(val4*val54)+(val11*val57)+(val19*val60)+(val5*val55)+(val12*val58)+(val20*val61));
    acc15 = (acc15+(val5*val53)+(val12*val56)+(val20*val59)+(val6*val54)+(val13*val57)+(val21*val60)+(val7*val55)+(val14*val58)+(val22*val61));
    var val62 = data2[alu4];
    acc0 = (acc0+(val24*val62)+(val25*val29)+(val26*val32)+(val0*val27)+(val23*val30)+(val15*val33)+(val1*val28)+(val8*val31)+(val16*val34));
    acc4 = (acc4+(val1*val62)+(val8*val29)+(val16*val32)+(val2*val27)+(val9*val30)+(val17*val33)+(val3*val28)+(val10*val31)+(val18*val34));
    acc8 = (acc8+(val3*val62)+(val10*val29)+(val18*val32)+(val4*val27)+(val11*val30)+(val19*val33)+(val5*val28)+(val12*val31)+(val20*val34));
    acc12 = (acc12+(val5*val62)+(val12*val29)+(val20*val32)+(val6*val27)+(val13*val30)+(val21*val33)+(val7*val28)+(val14*val31)+(val22*val34));
  }
  var val63 = data3[(alu2+1)];
  data0[(alu3+64)] = (val63+acc1);
  data0[(alu3+65)] = (val63+acc5);
  data0[(alu3+66)] = (val63+acc9);
  data0[(alu3+67)] = (val63+acc13);
  var val64 = data3[(alu2+2)];
  data0[(alu3+128)] = (val64+acc2);
  data0[(alu3+129)] = (val64+acc6);
  data0[(alu3+130)] = (val64+acc10);
  data0[(alu3+131)] = (val64+acc14);
  var val65 = data3[(alu2+3)];
  data0[(alu3+192)] = (val65+acc3);
  data0[(alu3+193)] = (val65+acc7);
  data0[(alu3+194)] = (val65+acc11);
  data0[(alu3+195)] = (val65+acc15);
  var val66 = data3[alu2];
  data0[(alu3+1)] = (val66+acc4);
  data0[(alu3+2)] = (val66+acc8);
  data0[(alu3+3)] = (val66+acc12);
  data0[alu3] = (val66+acc0);
}`;

const r_64_16_160 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var val0 = data1[((gidx0*2560)+(lidx0*160)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*0.0003906250058207661f);
  }
}`;

const r_64_16_160n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var val0 = data2[gidx0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var val1 = data1[((gidx0*2560)+(lidx0*160)+ridx0)];
    var alu0 = (val1-val0);
    acc0 = (acc0+(alu0*alu0));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[gidx0] = sqrt((1/((acc1*0.0003906250058207661f)+1e-05f)));
  }
}`;

const E_2_160_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 160 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx0<<3));
  var alu1 = ((gidx1<<5)+(gidx0/5));
  var alu2 = ((gidx0<<9)+(gidx1*81920)+(lidx0<<6)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_40_8_8_2_1280_4_4_3_3n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,8,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 40 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 8 */
  var lidx2 = i32(lindex.z); /* 2 */
  var alu0 = (gidx1*81920);
  var alu1 = (lidx1<<3);
  var alu2 = (lidx2<<2);
  var alu3 = (lidx1<7);
  var alu4 = (lidx2<1);
  var alu5 = ((lidx1<1)!=true);
  var alu6 = (alu4!=true);
  var alu7 = ((gidx0<<5)+(lidx0<<2));
  var alu8 = (alu7+1);
  var alu9 = (alu7+2);
  var alu10 = (alu7+3);
  var alu11 = ((gidx0<<11)+alu0+(lidx0<<8)+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var alu12 = ((gidx0*368640)+(lidx0*46080)+(ridx0*9));
    var alu13 = (alu0+(ridx0<<6)+alu1);
    var alu14 = (alu13+alu2);
    var val0 = select(0.0f, data1[(alu14+-8)], alu5);
    var val1 = select(0.0f, data1[(alu14+-7)], alu5);
    var val2 = select(0.0f, data1[(alu14+-6)], alu5);
    var val3 = select(0.0f, data1[(alu14+-5)], alu5);
    var val4 = data1[(alu14+1)];
    var val5 = data1[(alu14+2)];
    var val6 = data1[(alu14+3)];
    var val7 = select(0.0f, data1[(alu14+8)], alu3);
    var val8 = select(0.0f, data1[(alu14+9)], alu3);
    var val9 = select(0.0f, data1[(alu14+10)], alu3);
    var val10 = select(0.0f, data1[(alu14+11)], alu3);
    var val11 = data1[alu14];
    var val12 = select(0.0f, data1[(alu13+-5)], (alu5&alu6));
    var val13 = select(0.0f, data1[(alu13+-4)], (alu4&alu5));
    var val14 = select(0.0f, data1[(alu13+3)], alu6);
    var val15 = select(0.0f, data1[(alu13+4)], alu4);
    var val16 = select(0.0f, data1[(alu13+11)], (alu3&alu6));
    var val17 = select(0.0f, data1[(alu13+12)], (alu3&alu4));
    var val18 = data2[(alu12+1)];
    var val19 = data2[(alu12+2)];
    var val20 = data2[(alu12+3)];
    var val21 = data2[(alu12+4)];
    var val22 = data2[(alu12+5)];
    var val23 = data2[(alu12+6)];
    var val24 = data2[(alu12+7)];
    var val25 = data2[(alu12+8)];
    var val26 = data2[(alu12+11520)];
    var val27 = data2[(alu12+11521)];
    var val28 = data2[(alu12+11522)];
    var val29 = data2[(alu12+11523)];
    var val30 = data2[(alu12+11524)];
    var val31 = data2[(alu12+11525)];
    var val32 = data2[(alu12+11526)];
    var val33 = data2[(alu12+11527)];
    var val34 = data2[(alu12+11528)];
    acc1 = (acc1+(val12*val26)+(val14*val29)+(val16*val32)+(val0*val27)+(val11*val30)+(val7*val33)+(val1*val28)+(val4*val31)+(val8*val34));
    acc5 = (acc5+(val0*val26)+(val11*val29)+(val7*val32)+(val1*val27)+(val4*val30)+(val8*val33)+(val2*val28)+(val5*val31)+(val9*val34));
    acc9 = (acc9+(val1*val26)+(val4*val29)+(val8*val32)+(val2*val27)+(val5*val30)+(val9*val33)+(val3*val28)+(val6*val31)+(val10*val34));
    acc13 = (acc13+(val2*val26)+(val5*val29)+(val9*val32)+(val3*val27)+(val6*val30)+(val10*val33)+(val13*val28)+(val15*val31)+(val17*val34));
    var val35 = data2[(alu12+23040)];
    var val36 = data2[(alu12+23041)];
    var val37 = data2[(alu12+23042)];
    var val38 = data2[(alu12+23043)];
    var val39 = data2[(alu12+23044)];
    var val40 = data2[(alu12+23045)];
    var val41 = data2[(alu12+23046)];
    var val42 = data2[(alu12+23047)];
    var val43 = data2[(alu12+23048)];
    acc2 = (acc2+(val12*val35)+(val14*val38)+(val16*val41)+(val0*val36)+(val11*val39)+(val7*val42)+(val1*val37)+(val4*val40)+(val8*val43));
    acc6 = (acc6+(val0*val35)+(val11*val38)+(val7*val41)+(val1*val36)+(val4*val39)+(val8*val42)+(val2*val37)+(val5*val40)+(val9*val43));
    acc10 = (acc10+(val1*val35)+(val4*val38)+(val8*val41)+(val2*val36)+(val5*val39)+(val9*val42)+(val3*val37)+(val6*val40)+(val10*val43));
    acc14 = (acc14+(val2*val35)+(val5*val38)+(val9*val41)+(val3*val36)+(val6*val39)+(val10*val42)+(val13*val37)+(val15*val40)+(val17*val43));
    var val44 = data2[(alu12+34560)];
    var val45 = data2[(alu12+34561)];
    var val46 = data2[(alu12+34562)];
    var val47 = data2[(alu12+34563)];
    var val48 = data2[(alu12+34564)];
    var val49 = data2[(alu12+34565)];
    var val50 = data2[(alu12+34566)];
    var val51 = data2[(alu12+34567)];
    var val52 = data2[(alu12+34568)];
    acc3 = (acc3+(val12*val44)+(val14*val47)+(val16*val50)+(val0*val45)+(val11*val48)+(val7*val51)+(val1*val46)+(val4*val49)+(val8*val52));
    acc7 = (acc7+(val0*val44)+(val11*val47)+(val7*val50)+(val1*val45)+(val4*val48)+(val8*val51)+(val2*val46)+(val5*val49)+(val9*val52));
    acc11 = (acc11+(val1*val44)+(val4*val47)+(val8*val50)+(val2*val45)+(val5*val48)+(val9*val51)+(val3*val46)+(val6*val49)+(val10*val52));
    acc15 = (acc15+(val2*val44)+(val5*val47)+(val9*val50)+(val3*val45)+(val6*val48)+(val10*val51)+(val13*val46)+(val15*val49)+(val17*val52));
    var val53 = data2[alu12];
    acc0 = (acc0+(val12*val53)+(val14*val20)+(val16*val23)+(val0*val18)+(val11*val21)+(val7*val24)+(val1*val19)+(val4*val22)+(val8*val25));
    acc4 = (acc4+(val0*val53)+(val11*val20)+(val7*val23)+(val1*val18)+(val4*val21)+(val8*val24)+(val2*val19)+(val5*val22)+(val9*val25));
    acc8 = (acc8+(val1*val53)+(val4*val20)+(val8*val23)+(val2*val18)+(val5*val21)+(val9*val24)+(val3*val19)+(val6*val22)+(val10*val25));
    acc12 = (acc12+(val2*val53)+(val5*val20)+(val9*val23)+(val3*val18)+(val6*val21)+(val10*val24)+(val13*val19)+(val15*val22)+(val17*val25));
  }
  var val54 = data3[alu8];
  var val55 = data3[alu9];
  var val56 = data3[alu10];
  var val57 = data3[alu7];
  var val58 = data4[alu8];
  data0[(alu11+64)] = (val58+val54+acc1);
  data0[(alu11+65)] = (val58+val54+acc5);
  data0[(alu11+66)] = (val58+val54+acc9);
  data0[(alu11+67)] = (val58+val54+acc13);
  var val59 = data4[alu9];
  data0[(alu11+128)] = (val59+val55+acc2);
  data0[(alu11+129)] = (val59+val55+acc6);
  data0[(alu11+130)] = (val59+val55+acc10);
  data0[(alu11+131)] = (val59+val55+acc14);
  var val60 = data4[alu10];
  data0[(alu11+192)] = (val60+val56+acc3);
  data0[(alu11+193)] = (val60+val56+acc7);
  data0[(alu11+194)] = (val60+val56+acc11);
  data0[(alu11+195)] = (val60+val56+acc15);
  var val61 = data4[alu7];
  data0[(alu11+1)] = (val61+val57+acc4);
  data0[(alu11+2)] = (val61+val57+acc8);
  data0[(alu11+3)] = (val61+val57+acc12);
  data0[alu11] = (val61+val57+acc0);
}`;

const r_2_40_8_8_2_1280_4_4_3_3n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,8,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 40 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 8 */
  var lidx2 = i32(lindex.z); /* 2 */
  var alu0 = (gidx1*81920);
  var alu1 = (lidx1<<3);
  var alu2 = (lidx2<<2);
  var alu3 = (lidx1<7);
  var alu4 = (lidx2<1);
  var alu5 = ((lidx1<1)!=true);
  var alu6 = (alu4!=true);
  var alu7 = ((gidx0<<5)+(lidx0<<2));
  var alu8 = ((gidx0<<11)+alu0+(lidx0<<8)+alu1+alu2);
  var alu9 = (alu8+1);
  var alu10 = (alu8+2);
  var alu11 = (alu8+3);
  var alu12 = (alu8+64);
  var alu13 = (alu8+65);
  var alu14 = (alu8+66);
  var alu15 = (alu8+67);
  var alu16 = (alu8+128);
  var alu17 = (alu8+129);
  var alu18 = (alu8+130);
  var alu19 = (alu8+131);
  var alu20 = (alu8+192);
  var alu21 = (alu8+193);
  var alu22 = (alu8+194);
  var alu23 = (alu8+195);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var alu24 = ((gidx0*368640)+(lidx0*46080)+(ridx0*9));
    var alu25 = (alu0+(ridx0<<6)+alu1);
    var alu26 = (alu25+alu2);
    var val0 = select(0.0f, data2[(alu26+-8)], alu5);
    var val1 = select(0.0f, data2[(alu26+-7)], alu5);
    var val2 = select(0.0f, data2[(alu26+-6)], alu5);
    var val3 = select(0.0f, data2[(alu26+-5)], alu5);
    var val4 = data2[(alu26+1)];
    var val5 = data2[(alu26+2)];
    var val6 = data2[(alu26+3)];
    var val7 = select(0.0f, data2[(alu26+8)], alu3);
    var val8 = select(0.0f, data2[(alu26+9)], alu3);
    var val9 = select(0.0f, data2[(alu26+10)], alu3);
    var val10 = select(0.0f, data2[(alu26+11)], alu3);
    var val11 = data2[alu26];
    var val12 = select(0.0f, data2[(alu25+-5)], (alu5&alu6));
    var val13 = select(0.0f, data2[(alu25+-4)], (alu4&alu5));
    var val14 = select(0.0f, data2[(alu25+3)], alu6);
    var val15 = select(0.0f, data2[(alu25+4)], alu4);
    var val16 = select(0.0f, data2[(alu25+11)], (alu3&alu6));
    var val17 = select(0.0f, data2[(alu25+12)], (alu3&alu4));
    var val18 = data3[(alu24+1)];
    var val19 = data3[(alu24+2)];
    var val20 = data3[(alu24+3)];
    var val21 = data3[(alu24+4)];
    var val22 = data3[(alu24+5)];
    var val23 = data3[(alu24+6)];
    var val24 = data3[(alu24+7)];
    var val25 = data3[(alu24+8)];
    var val26 = data3[(alu24+11520)];
    var val27 = data3[(alu24+11521)];
    var val28 = data3[(alu24+11522)];
    var val29 = data3[(alu24+11523)];
    var val30 = data3[(alu24+11524)];
    var val31 = data3[(alu24+11525)];
    var val32 = data3[(alu24+11526)];
    var val33 = data3[(alu24+11527)];
    var val34 = data3[(alu24+11528)];
    acc1 = (acc1+(val12*val26)+(val14*val29)+(val16*val32)+(val0*val27)+(val11*val30)+(val7*val33)+(val1*val28)+(val4*val31)+(val8*val34));
    acc5 = (acc5+(val0*val26)+(val11*val29)+(val7*val32)+(val1*val27)+(val4*val30)+(val8*val33)+(val2*val28)+(val5*val31)+(val9*val34));
    acc9 = (acc9+(val1*val26)+(val4*val29)+(val8*val32)+(val2*val27)+(val5*val30)+(val9*val33)+(val3*val28)+(val6*val31)+(val10*val34));
    acc13 = (acc13+(val2*val26)+(val5*val29)+(val9*val32)+(val3*val27)+(val6*val30)+(val10*val33)+(val13*val28)+(val15*val31)+(val17*val34));
    var val35 = data3[(alu24+23040)];
    var val36 = data3[(alu24+23041)];
    var val37 = data3[(alu24+23042)];
    var val38 = data3[(alu24+23043)];
    var val39 = data3[(alu24+23044)];
    var val40 = data3[(alu24+23045)];
    var val41 = data3[(alu24+23046)];
    var val42 = data3[(alu24+23047)];
    var val43 = data3[(alu24+23048)];
    acc2 = (acc2+(val12*val35)+(val14*val38)+(val16*val41)+(val0*val36)+(val11*val39)+(val7*val42)+(val1*val37)+(val4*val40)+(val8*val43));
    acc6 = (acc6+(val0*val35)+(val11*val38)+(val7*val41)+(val1*val36)+(val4*val39)+(val8*val42)+(val2*val37)+(val5*val40)+(val9*val43));
    acc10 = (acc10+(val1*val35)+(val4*val38)+(val8*val41)+(val2*val36)+(val5*val39)+(val9*val42)+(val3*val37)+(val6*val40)+(val10*val43));
    acc14 = (acc14+(val2*val35)+(val5*val38)+(val9*val41)+(val3*val36)+(val6*val39)+(val10*val42)+(val13*val37)+(val15*val40)+(val17*val43));
    var val44 = data3[(alu24+34560)];
    var val45 = data3[(alu24+34561)];
    var val46 = data3[(alu24+34562)];
    var val47 = data3[(alu24+34563)];
    var val48 = data3[(alu24+34564)];
    var val49 = data3[(alu24+34565)];
    var val50 = data3[(alu24+34566)];
    var val51 = data3[(alu24+34567)];
    var val52 = data3[(alu24+34568)];
    acc3 = (acc3+(val12*val44)+(val14*val47)+(val16*val50)+(val0*val45)+(val11*val48)+(val7*val51)+(val1*val46)+(val4*val49)+(val8*val52));
    acc7 = (acc7+(val0*val44)+(val11*val47)+(val7*val50)+(val1*val45)+(val4*val48)+(val8*val51)+(val2*val46)+(val5*val49)+(val9*val52));
    acc11 = (acc11+(val1*val44)+(val4*val47)+(val8*val50)+(val2*val45)+(val5*val48)+(val9*val51)+(val3*val46)+(val6*val49)+(val10*val52));
    acc15 = (acc15+(val2*val44)+(val5*val47)+(val9*val50)+(val3*val45)+(val6*val48)+(val10*val51)+(val13*val46)+(val15*val49)+(val17*val52));
    var val53 = data3[alu24];
    acc0 = (acc0+(val12*val53)+(val14*val20)+(val16*val23)+(val0*val18)+(val11*val21)+(val7*val24)+(val1*val19)+(val4*val22)+(val8*val25));
    acc4 = (acc4+(val0*val53)+(val11*val20)+(val7*val23)+(val1*val18)+(val4*val21)+(val8*val24)+(val2*val19)+(val5*val22)+(val9*val25));
    acc8 = (acc8+(val1*val53)+(val4*val20)+(val8*val23)+(val2*val18)+(val5*val21)+(val9*val24)+(val3*val19)+(val6*val22)+(val10*val25));
    acc12 = (acc12+(val2*val53)+(val5*val20)+(val9*val23)+(val3*val18)+(val6*val21)+(val10*val24)+(val13*val19)+(val15*val22)+(val17*val25));
  }
  var val54 = data1[alu9];
  var val55 = data1[alu10];
  var val56 = data1[alu11];
  var val57 = data1[alu12];
  var val58 = data1[alu13];
  var val59 = data1[alu14];
  var val60 = data1[alu15];
  var val61 = data1[alu16];
  var val62 = data1[alu17];
  var val63 = data1[alu18];
  var val64 = data1[alu19];
  var val65 = data1[alu20];
  var val66 = data1[alu21];
  var val67 = data1[alu22];
  var val68 = data1[alu23];
  var val69 = data1[alu8];
  var val70 = data4[(alu7+1)];
  data0[alu12] = (val57+val70+acc1);
  data0[alu13] = (val58+val70+acc5);
  data0[alu14] = (val59+val70+acc9);
  data0[alu15] = (val60+val70+acc13);
  var val71 = data4[(alu7+2)];
  data0[alu16] = (val61+val71+acc2);
  data0[alu17] = (val62+val71+acc6);
  data0[alu18] = (val63+val71+acc10);
  data0[alu19] = (val64+val71+acc14);
  var val72 = data4[(alu7+3)];
  data0[alu20] = (val65+val72+acc3);
  data0[alu21] = (val66+val72+acc7);
  data0[alu22] = (val67+val72+acc11);
  data0[alu23] = (val68+val72+acc15);
  var val73 = data4[alu7];
  data0[alu9] = (val54+val73+acc4);
  data0[alu10] = (val55+val73+acc8);
  data0[alu11] = (val56+val73+acc12);
  data0[alu8] = (val69+val73+acc0);
}`;

const E_2_160_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 160 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx0<<3));
  var alu1 = ((gidx1<<5)+(gidx0/5));
  var alu2 = ((gidx0<<9)+(gidx1*81920)+(lidx0<<6)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  data0[alu3] = (val7+(val6*val5*(val0-val4)));
  data0[alu4] = (val7+(val6*val5*(val1-val4)));
  data0[alu5] = (val7+(val6*val5*(val2-val4)));
  data0[alu2] = (val7+(val6*val5*(val3-val4)));
}`;

const r_2_40_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 40 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1*81920);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx0<<5)+(lidx0<<2));
  var alu3 = ((gidx0<<11)+alu0+(lidx0<<8)+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu4 = ((gidx0*40960)+(lidx0*5120)+(ridx0<<2));
    var alu5 = (alu0+alu1+(ridx0<<8));
    var val0 = data1[(alu5+1)];
    var val1 = data1[(alu5+2)];
    var val2 = data1[(alu5+3)];
    var val3 = data1[(alu5+64)];
    var val4 = data1[(alu5+65)];
    var val5 = data1[(alu5+66)];
    var val6 = data1[(alu5+67)];
    var val7 = data1[(alu5+128)];
    var val8 = data1[(alu5+129)];
    var val9 = data1[(alu5+130)];
    var val10 = data1[(alu5+131)];
    var val11 = data1[(alu5+192)];
    var val12 = data1[(alu5+193)];
    var val13 = data1[(alu5+194)];
    var val14 = data1[(alu5+195)];
    var val15 = data1[alu5];
    var val16 = data2[(alu4+1)];
    var val17 = data2[(alu4+2)];
    var val18 = data2[(alu4+3)];
    var val19 = data2[(alu4+1280)];
    var val20 = data2[(alu4+1281)];
    var val21 = data2[(alu4+1282)];
    var val22 = data2[(alu4+1283)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu4+2560)];
    var val24 = data2[(alu4+2561)];
    var val25 = data2[(alu4+2562)];
    var val26 = data2[(alu4+2563)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu4+3840)];
    var val28 = data2[(alu4+3841)];
    var val29 = data2[(alu4+3842)];
    var val30 = data2[(alu4+3843)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu4];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[(alu2+1)];
  data0[(alu3+64)] = (val32+acc1);
  data0[(alu3+65)] = (val32+acc5);
  data0[(alu3+66)] = (val32+acc9);
  data0[(alu3+67)] = (val32+acc13);
  var val33 = data3[(alu2+2)];
  data0[(alu3+128)] = (val33+acc2);
  data0[(alu3+129)] = (val33+acc6);
  data0[(alu3+130)] = (val33+acc10);
  data0[(alu3+131)] = (val33+acc14);
  var val34 = data3[(alu2+3)];
  data0[(alu3+192)] = (val34+acc3);
  data0[(alu3+193)] = (val34+acc7);
  data0[(alu3+194)] = (val34+acc11);
  data0[(alu3+195)] = (val34+acc15);
  var val35 = data3[alu2];
  data0[(alu3+1)] = (val35+acc4);
  data0[(alu3+2)] = (val35+acc8);
  data0[(alu3+3)] = (val35+acc12);
  data0[alu3] = (val35+acc0);
}`;

const r_2_64_16_80 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var val0 = data1[(gidx0+(gidx1*81920)+(lidx0*5120)+(ridx0<<6))];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[(gidx0+(gidx1<<6))] = (acc1*0.0007812500116415322f);
  }
}`;

const r_2_64_16_80n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var alu0 = (gidx0+(gidx1<<6));
  var val0 = data2[alu0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var val1 = data1[(gidx0+(gidx1*81920)+(lidx0*5120)+(ridx0<<6))];
    var alu1 = (val1-val0);
    acc0 = (acc0+(alu1*alu1));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[alu0] = sqrt((1/((acc1*0.0007812500116415322f)+1e-05f)));
  }
}`;

const E_2_2_20_8_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 2 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*81920);
  var alu1 = (gidx0<<6);
  var alu2 = (gidx1<<5);
  var alu3 = (lidx0<<2);
  var alu4 = (alu2+(gidx2<<6)+alu3);
  var alu5 = (alu4+1);
  var alu6 = (alu4+2);
  var alu7 = (alu4+3);
  var alu8 = (lidx1<<2);
  var alu9 = ((gidx1*40960)+alu0+alu1+(lidx0*5120)+alu8);
  var alu10 = (alu1+alu8);
  var alu11 = (alu10+1);
  var alu12 = (alu10+2);
  var alu13 = (alu10+3);
  var alu14 = (alu2+alu0+(gidx0<<12)+alu3+(lidx1<<8));
  var val0 = data1[(alu14+1)];
  var val1 = data1[(alu14+2)];
  var val2 = data1[(alu14+3)];
  var val3 = data1[(alu14+64)];
  var val4 = data1[(alu14+65)];
  var val5 = data1[(alu14+66)];
  var val6 = data1[(alu14+67)];
  var val7 = data1[(alu14+128)];
  var val8 = data1[(alu14+129)];
  var val9 = data1[(alu14+130)];
  var val10 = data1[(alu14+131)];
  var val11 = data1[(alu14+192)];
  var val12 = data1[(alu14+193)];
  var val13 = data1[(alu14+194)];
  var val14 = data1[(alu14+195)];
  var val15 = data1[alu14];
  var val16 = data2[alu5];
  var val17 = data2[alu6];
  var val18 = data2[alu7];
  var val19 = data2[alu4];
  var val20 = data3[alu5];
  var val21 = data3[alu6];
  var val22 = data3[alu7];
  var val23 = data3[alu4];
  var val24 = data4[alu11];
  var val25 = data4[alu12];
  var val26 = data4[alu13];
  var val27 = data4[alu10];
  var val28 = data5[alu11];
  data0[(alu9+1)] = (val28+(val24*val23*(val3-val19)));
  data0[(alu9+1281)] = (val28+(val24*val20*(val4-val16)));
  data0[(alu9+2561)] = (val28+(val24*val21*(val5-val17)));
  data0[(alu9+3841)] = (val28+(val24*val22*(val6-val18)));
  var val29 = data5[alu12];
  data0[(alu9+2)] = (val29+(val25*val23*(val7-val19)));
  data0[(alu9+1282)] = (val29+(val25*val20*(val8-val16)));
  data0[(alu9+2562)] = (val29+(val25*val21*(val9-val17)));
  data0[(alu9+3842)] = (val29+(val25*val22*(val10-val18)));
  var val30 = data5[alu13];
  data0[(alu9+3)] = (val30+(val26*val23*(val11-val19)));
  data0[(alu9+1283)] = (val30+(val26*val20*(val12-val16)));
  data0[(alu9+2563)] = (val30+(val26*val21*(val13-val17)));
  data0[(alu9+3843)] = (val30+(val26*val22*(val14-val18)));
  var val31 = data5[alu10];
  data0[(alu9+1280)] = (val31+(val27*val20*(val0-val16)));
  data0[(alu9+2560)] = (val31+(val27*val21*(val1-val17)));
  data0[(alu9+3840)] = (val31+(val27*val22*(val2-val18)));
  data0[alu9] = (val31+(val27*val23*(val15-val19)));
}`;

const r_4_20_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 4 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1*40960);
  var alu1 = (lidx0*5120);
  var alu2 = ((gidx0<<6)+alu0+alu1+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu3 = (ridx0<<2);
    var alu4 = ((gidx0*81920)+(lidx1*5120)+alu3);
    var alu5 = (alu0+alu1+alu3);
    var val0 = data1[(alu5+1)];
    var val1 = data1[(alu5+2)];
    var val2 = data1[(alu5+3)];
    var val3 = data1[(alu5+1280)];
    var val4 = data1[(alu5+1281)];
    var val5 = data1[(alu5+1282)];
    var val6 = data1[(alu5+1283)];
    var val7 = data1[(alu5+2560)];
    var val8 = data1[(alu5+2561)];
    var val9 = data1[(alu5+2562)];
    var val10 = data1[(alu5+2563)];
    var val11 = data1[(alu5+3840)];
    var val12 = data1[(alu5+3841)];
    var val13 = data1[(alu5+3842)];
    var val14 = data1[(alu5+3843)];
    var val15 = data1[alu5];
    var val16 = data2[(alu4+1)];
    var val17 = data2[(alu4+2)];
    var val18 = data2[(alu4+3)];
    var val19 = data2[(alu4+1280)];
    var val20 = data2[(alu4+1281)];
    var val21 = data2[(alu4+1282)];
    var val22 = data2[(alu4+1283)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu4+2560)];
    var val24 = data2[(alu4+2561)];
    var val25 = data2[(alu4+2562)];
    var val26 = data2[(alu4+2563)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu4+3840)];
    var val28 = data2[(alu4+3841)];
    var val29 = data2[(alu4+3842)];
    var val30 = data2[(alu4+3843)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu4];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[(alu2+1)] = acc4;
  data0[(alu2+2)] = acc8;
  data0[(alu2+3)] = acc12;
  data0[(alu2+1280)] = acc1;
  data0[(alu2+1281)] = acc5;
  data0[(alu2+1282)] = acc9;
  data0[(alu2+1283)] = acc13;
  data0[(alu2+2560)] = acc2;
  data0[(alu2+2561)] = acc6;
  data0[(alu2+2562)] = acc10;
  data0[(alu2+2563)] = acc14;
  data0[(alu2+3840)] = acc3;
  data0[(alu2+3841)] = acc7;
  data0[(alu2+3842)] = acc11;
  data0[(alu2+3843)] = acc15;
  data0[alu2] = acc0;
}`;

const r_2_8_2_8_16_40_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 8 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx1*160)+(gidx2*81920));
  var alu1 = ((gidx1<<12)+(gidx2<<15)+(gidx0<<11)+(lidx0<<8)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 40; ridx0++) {
    var alu2 = (ridx0<<2);
    var alu3 = (alu0+(gidx0*40960)+(lidx0*5120)+alu2);
    var alu4 = (alu0+(lidx1*5120)+alu2);
    var val0 = data1[(alu3+1)];
    var val1 = data1[(alu3+2)];
    var val2 = data1[(alu3+3)];
    var val3 = data1[(alu3+1280)];
    var val4 = data1[(alu3+1281)];
    var val5 = data1[(alu3+1282)];
    var val6 = data1[(alu3+1283)];
    var val7 = data1[(alu3+2560)];
    var val8 = data1[(alu3+2561)];
    var val9 = data1[(alu3+2562)];
    var val10 = data1[(alu3+2563)];
    var val11 = data1[(alu3+3840)];
    var val12 = data1[(alu3+3841)];
    var val13 = data1[(alu3+3842)];
    var val14 = data1[(alu3+3843)];
    var val15 = data1[alu3];
    var val16 = data2[(alu4+1)];
    var val17 = data2[(alu4+2)];
    var val18 = data2[(alu4+3)];
    var val19 = data2[(alu4+1280)];
    var val20 = data2[(alu4+1281)];
    var val21 = data2[(alu4+1282)];
    var val22 = data2[(alu4+1283)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu4+2560)];
    var val24 = data2[(alu4+2561)];
    var val25 = data2[(alu4+2562)];
    var val26 = data2[(alu4+2563)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu4+3840)];
    var val28 = data2[(alu4+3841)];
    var val29 = data2[(alu4+3842)];
    var val30 = data2[(alu4+3843)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu4];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[(alu1+1)] = (acc4*0.07905694097280502f);
  data0[(alu1+2)] = (acc8*0.07905694097280502f);
  data0[(alu1+3)] = (acc12*0.07905694097280502f);
  data0[(alu1+64)] = (acc1*0.07905694097280502f);
  data0[(alu1+65)] = (acc5*0.07905694097280502f);
  data0[(alu1+66)] = (acc9*0.07905694097280502f);
  data0[(alu1+67)] = (acc13*0.07905694097280502f);
  data0[(alu1+128)] = (acc2*0.07905694097280502f);
  data0[(alu1+129)] = (acc6*0.07905694097280502f);
  data0[(alu1+130)] = (acc10*0.07905694097280502f);
  data0[(alu1+131)] = (acc14*0.07905694097280502f);
  data0[(alu1+192)] = (acc3*0.07905694097280502f);
  data0[(alu1+193)] = (acc7*0.07905694097280502f);
  data0[(alu1+194)] = (acc11*0.07905694097280502f);
  data0[(alu1+195)] = (acc15*0.07905694097280502f);
  data0[alu1] = (acc0*0.07905694097280502f);
}`;

const r_1024_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 1024 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = (f32(-inf(1.0)));
  for (var ridx0 = 0; ridx0 < 4; ridx0++) {
    var val0 = data1[((gidx0<<6)+(lidx0<<2)+ridx0)];
    acc0 = select(acc0,val0,(acc0<val0));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = (f32(-inf(1.0)));
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = select(acc1,val1,(acc1<val1));
    }
    data0[gidx0] = acc1;
  }
}`;

const r_1024_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 1024 */
  var lidx0 = i32(lindex.x); /* 16 */
  var val0 = data2[gidx0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 4; ridx0++) {
    var val1 = data1[((gidx0<<6)+(lidx0<<2)+ridx0)];
    acc0 = (acc0+exp2(((val1-val0)*1.4426950408889634f)));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[gidx0] = acc1;
  }
}`;

const E_128_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 128 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx0<<3));
  var alu1 = ((gidx0<<9)+(lidx0<<6)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var val0 = data1[alu2];
  var val1 = data1[alu3];
  var val2 = data1[alu4];
  var val3 = data1[alu1];
  var val4 = data2[alu0];
  var val5 = data3[alu0];
  var alu5 = (1/val5);
  data0[alu2] = (exp2(((val0-val4)*1.4426950408889634f))*alu5);
  data0[alu3] = (exp2(((val1-val4)*1.4426950408889634f))*alu5);
  data0[alu4] = (exp2(((val2-val4)*1.4426950408889634f))*alu5);
  data0[alu1] = (exp2(((val3-val4)*1.4426950408889634f))*alu5);
}`;

const r_2_8_5_16_8_16_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 5 */
  var gidx1 = i32(gindex.y); /* 8 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = (gidx2*81920);
  var alu1 = (gidx0<<5);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx1*10240)+alu0+alu1+(lidx0*640)+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 16; ridx0++) {
    var alu4 = ((gidx1*160)+alu0+alu1+alu2+(ridx0*5120));
    var alu5 = ((gidx1<<12)+(gidx2<<15)+(lidx0<<8)+(ridx0<<2));
    var val0 = data1[(alu5+1)];
    var val1 = data1[(alu5+2)];
    var val2 = data1[(alu5+3)];
    var val3 = data1[(alu5+64)];
    var val4 = data1[(alu5+65)];
    var val5 = data1[(alu5+66)];
    var val6 = data1[(alu5+67)];
    var val7 = data1[(alu5+128)];
    var val8 = data1[(alu5+129)];
    var val9 = data1[(alu5+130)];
    var val10 = data1[(alu5+131)];
    var val11 = data1[(alu5+192)];
    var val12 = data1[(alu5+193)];
    var val13 = data1[(alu5+194)];
    var val14 = data1[(alu5+195)];
    var val15 = data1[alu5];
    var val16 = data2[(alu4+1)];
    var val17 = data2[(alu4+2)];
    var val18 = data2[(alu4+3)];
    var val19 = data2[(alu4+1280)];
    var val20 = data2[(alu4+1281)];
    var val21 = data2[(alu4+1282)];
    var val22 = data2[(alu4+1283)];
    var val23 = data2[(alu4+2560)];
    var val24 = data2[(alu4+2561)];
    var val25 = data2[(alu4+2562)];
    var val26 = data2[(alu4+2563)];
    var val27 = data2[(alu4+3840)];
    var val28 = data2[(alu4+3841)];
    acc4 = (acc4+(val0*val20)+(val15*val16)+(val1*val24)+(val2*val28));
    acc5 = (acc5+(val3*val16)+(val4*val20)+(val5*val24)+(val6*val28));
    acc6 = (acc6+(val7*val16)+(val8*val20)+(val9*val24)+(val10*val28));
    acc7 = (acc7+(val11*val16)+(val12*val20)+(val13*val24)+(val14*val28));
    var val29 = data2[(alu4+3842)];
    acc8 = (acc8+(val0*val21)+(val15*val17)+(val1*val25)+(val2*val29));
    acc9 = (acc9+(val3*val17)+(val4*val21)+(val5*val25)+(val6*val29));
    acc10 = (acc10+(val7*val17)+(val8*val21)+(val9*val25)+(val10*val29));
    acc11 = (acc11+(val11*val17)+(val12*val21)+(val13*val25)+(val14*val29));
    var val30 = data2[(alu4+3843)];
    acc12 = (acc12+(val0*val22)+(val15*val18)+(val1*val26)+(val2*val30));
    acc13 = (acc13+(val3*val18)+(val4*val22)+(val5*val26)+(val6*val30));
    acc14 = (acc14+(val7*val18)+(val8*val22)+(val9*val26)+(val10*val30));
    acc15 = (acc15+(val11*val18)+(val12*val22)+(val13*val26)+(val14*val30));
    var val31 = data2[alu4];
    acc0 = (acc0+(val0*val19)+(val15*val31)+(val1*val23)+(val2*val27));
    acc1 = (acc1+(val3*val31)+(val4*val19)+(val5*val23)+(val6*val27));
    acc2 = (acc2+(val7*val31)+(val8*val19)+(val9*val23)+(val10*val27));
    acc3 = (acc3+(val11*val31)+(val12*val19)+(val13*val23)+(val14*val27));
  }
  data0[(alu3+1)] = acc4;
  data0[(alu3+2)] = acc8;
  data0[(alu3+3)] = acc12;
  data0[(alu3+160)] = acc1;
  data0[(alu3+161)] = acc5;
  data0[(alu3+162)] = acc9;
  data0[(alu3+163)] = acc13;
  data0[(alu3+320)] = acc2;
  data0[(alu3+321)] = acc6;
  data0[(alu3+322)] = acc10;
  data0[(alu3+323)] = acc14;
  data0[(alu3+480)] = acc3;
  data0[(alu3+481)] = acc7;
  data0[(alu3+482)] = acc11;
  data0[(alu3+483)] = acc15;
  data0[alu3] = acc0;
}`;

const r_2_2_20_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 2 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*81920);
  var alu1 = (gidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx1*40960)+alu0+alu1+(lidx0*5120)+alu2);
  var alu4 = (alu1+alu2);
  var alu5 = ((gidx1<<5)+alu0+(gidx0<<12)+(lidx0<<2)+(lidx1<<8));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu6 = ((gidx1*5120)+(lidx0*640)+alu0+((ridx0/40)*10240));
    var alu7 = (ridx0<<2);
    var alu8 = ((gidx0*81920)+(lidx1*5120)+alu7);
    var alu9 = (alu6+((alu7+1)%160));
    var alu10 = (alu6+((alu7+2)%160));
    var alu11 = (alu6+((alu7+3)%160));
    var alu12 = (alu6+(alu7%160));
    var val0 = data2[(alu9+160)];
    var val1 = data2[(alu9+320)];
    var val2 = data2[(alu9+480)];
    var val3 = data2[(alu10+160)];
    var val4 = data2[(alu10+320)];
    var val5 = data2[(alu10+480)];
    var val6 = data2[(alu11+160)];
    var val7 = data2[(alu11+320)];
    var val8 = data2[(alu11+480)];
    var val9 = data2[(alu12+160)];
    var val10 = data2[(alu12+320)];
    var val11 = data2[(alu12+480)];
    var val12 = data2[alu9];
    var val13 = data2[alu10];
    var val14 = data2[alu11];
    var val15 = data2[alu12];
    var val16 = data3[(alu8+1)];
    var val17 = data3[(alu8+2)];
    var val18 = data3[(alu8+3)];
    var val19 = data3[(alu8+1280)];
    var val20 = data3[(alu8+1281)];
    var val21 = data3[(alu8+1282)];
    var val22 = data3[(alu8+1283)];
    acc4 = (acc4+(val12*val20)+(val15*val19)+(val13*val21)+(val14*val22));
    acc5 = (acc5+(val0*val20)+(val9*val19)+(val3*val21)+(val6*val22));
    acc6 = (acc6+(val1*val20)+(val10*val19)+(val4*val21)+(val7*val22));
    acc7 = (acc7+(val2*val20)+(val11*val19)+(val5*val21)+(val8*val22));
    var val23 = data3[(alu8+2560)];
    var val24 = data3[(alu8+2561)];
    var val25 = data3[(alu8+2562)];
    var val26 = data3[(alu8+2563)];
    acc8 = (acc8+(val12*val24)+(val15*val23)+(val13*val25)+(val14*val26));
    acc9 = (acc9+(val0*val24)+(val9*val23)+(val3*val25)+(val6*val26));
    acc10 = (acc10+(val1*val24)+(val10*val23)+(val4*val25)+(val7*val26));
    acc11 = (acc11+(val2*val24)+(val11*val23)+(val5*val25)+(val8*val26));
    var val27 = data3[(alu8+3840)];
    var val28 = data3[(alu8+3841)];
    var val29 = data3[(alu8+3842)];
    var val30 = data3[(alu8+3843)];
    acc12 = (acc12+(val12*val28)+(val15*val27)+(val13*val29)+(val14*val30));
    acc13 = (acc13+(val0*val28)+(val9*val27)+(val3*val29)+(val6*val30));
    acc14 = (acc14+(val1*val28)+(val10*val27)+(val4*val29)+(val7*val30));
    acc15 = (acc15+(val2*val28)+(val11*val27)+(val5*val29)+(val8*val30));
    var val31 = data3[alu8];
    acc0 = (acc0+(val12*val16)+(val15*val31)+(val13*val17)+(val14*val18));
    acc1 = (acc1+(val0*val16)+(val9*val31)+(val3*val17)+(val6*val18));
    acc2 = (acc2+(val1*val16)+(val10*val31)+(val4*val17)+(val7*val18));
    acc3 = (acc3+(val2*val16)+(val11*val31)+(val5*val17)+(val8*val18));
  }
  var val32 = data1[(alu5+1)];
  var val33 = data1[(alu5+2)];
  var val34 = data1[(alu5+3)];
  var val35 = data1[(alu5+64)];
  var val36 = data1[(alu5+65)];
  var val37 = data1[(alu5+66)];
  var val38 = data1[(alu5+67)];
  var val39 = data1[(alu5+128)];
  var val40 = data1[(alu5+129)];
  var val41 = data1[(alu5+130)];
  var val42 = data1[(alu5+131)];
  var val43 = data1[(alu5+192)];
  var val44 = data1[(alu5+193)];
  var val45 = data1[(alu5+194)];
  var val46 = data1[(alu5+195)];
  var val47 = data1[alu5];
  var val48 = data4[(alu4+1)];
  data0[(alu3+1)] = (val35+val48+acc4);
  data0[(alu3+1281)] = (val36+val48+acc5);
  data0[(alu3+2561)] = (val37+val48+acc6);
  data0[(alu3+3841)] = (val38+val48+acc7);
  var val49 = data4[(alu4+2)];
  data0[(alu3+2)] = (val39+val49+acc8);
  data0[(alu3+1282)] = (val40+val49+acc9);
  data0[(alu3+2562)] = (val41+val49+acc10);
  data0[(alu3+3842)] = (val42+val49+acc11);
  var val50 = data4[(alu4+3)];
  data0[(alu3+3)] = (val43+val50+acc12);
  data0[(alu3+1283)] = (val44+val50+acc13);
  data0[(alu3+2563)] = (val45+val50+acc14);
  data0[(alu3+3843)] = (val46+val50+acc15);
  var val51 = data4[alu4];
  data0[(alu3+1280)] = (val32+val51+acc1);
  data0[(alu3+2560)] = (val33+val51+acc2);
  data0[(alu3+3840)] = (val34+val51+acc3);
  data0[alu3] = (val47+val51+acc0);
}`;

const r_128_16_80 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 128 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var val0 = data1[((gidx0*1280)+(lidx0*80)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*0.0007812500116415322f);
  }
}`;

const r_128_16_80n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 128 */
  var lidx0 = i32(lindex.x); /* 16 */
  var val0 = data2[gidx0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var val1 = data1[((gidx0*1280)+(lidx0*80)+ridx0)];
    var alu0 = (val1-val0);
    acc0 = (acc0+(alu0*alu0));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[gidx0] = sqrt((1/((acc1*0.0007812500116415322f)+1e-05f)));
  }
}`;

const E_4_20_8_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 4 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = ((gidx1<<5)+(lidx0<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var alu5 = (lidx1<<2);
  var alu6 = (alu0+(gidx1*40960)+(lidx0*5120)+alu5);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+1280);
  var alu11 = (alu6+1281);
  var alu12 = (alu6+1282);
  var alu13 = (alu6+1283);
  var alu14 = (alu6+2560);
  var alu15 = (alu6+2561);
  var alu16 = (alu6+2562);
  var alu17 = (alu6+2563);
  var alu18 = (alu6+3840);
  var alu19 = (alu6+3841);
  var alu20 = (alu6+3842);
  var alu21 = (alu6+3843);
  var alu22 = (alu0+alu5);
  var alu23 = (alu22+1);
  var alu24 = (alu22+2);
  var alu25 = (alu22+3);
  var val0 = data1[alu7];
  var val1 = data1[alu8];
  var val2 = data1[alu9];
  var val3 = data1[alu10];
  var val4 = data1[alu11];
  var val5 = data1[alu12];
  var val6 = data1[alu13];
  var val7 = data1[alu14];
  var val8 = data1[alu15];
  var val9 = data1[alu16];
  var val10 = data1[alu17];
  var val11 = data1[alu18];
  var val12 = data1[alu19];
  var val13 = data1[alu20];
  var val14 = data1[alu21];
  var val15 = data1[alu6];
  var val16 = data2[alu2];
  var val17 = data2[alu3];
  var val18 = data2[alu4];
  var val19 = data2[alu1];
  var val20 = data3[alu2];
  var val21 = data3[alu3];
  var val22 = data3[alu4];
  var val23 = data3[alu1];
  var val24 = data4[alu23];
  var val25 = data4[alu24];
  var val26 = data4[alu25];
  var val27 = data4[alu22];
  var val28 = data5[alu23];
  data0[alu7] = (val28+(val24*val23*(val0-val19)));
  data0[alu11] = (val28+(val24*val20*(val4-val16)));
  data0[alu15] = (val28+(val24*val21*(val8-val17)));
  data0[alu19] = (val28+(val24*val22*(val12-val18)));
  var val29 = data5[alu24];
  data0[alu8] = (val29+(val25*val23*(val1-val19)));
  data0[alu12] = (val29+(val25*val20*(val5-val16)));
  data0[alu16] = (val29+(val25*val21*(val9-val17)));
  data0[alu20] = (val29+(val25*val22*(val13-val18)));
  var val30 = data5[alu25];
  data0[alu9] = (val30+(val26*val23*(val2-val19)));
  data0[alu13] = (val30+(val26*val20*(val6-val16)));
  data0[alu17] = (val30+(val26*val21*(val10-val17)));
  data0[alu21] = (val30+(val26*val22*(val14-val18)));
  var val31 = data5[alu22];
  data0[alu10] = (val31+(val27*val20*(val3-val16)));
  data0[alu14] = (val31+(val27*val21*(val7-val17)));
  data0[alu18] = (val31+(val27*val22*(val11-val18)));
  data0[alu6] = (val31+(val27*val23*(val15-val19)));
}`;

const r_2_77_8_16_40_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0*160);
  var alu1 = (gidx0+(gidx1*39424)+(lidx0*4928)+(lidx1*308));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 40; ridx0++) {
    var alu2 = (ridx0<<2);
    var alu3 = ((gidx0*1280)+(gidx1*98560)+alu0+alu2);
    var alu4 = ((gidx1*81920)+alu0+(lidx1*5120)+alu2);
    var val0 = data1[(alu4+1)];
    var val1 = data1[(alu4+2)];
    var val2 = data1[(alu4+3)];
    var val3 = data1[(alu4+1280)];
    var val4 = data1[(alu4+1281)];
    var val5 = data1[(alu4+1282)];
    var val6 = data1[(alu4+1283)];
    var val7 = data1[(alu4+2560)];
    var val8 = data1[(alu4+2561)];
    var val9 = data1[(alu4+2562)];
    var val10 = data1[(alu4+2563)];
    var val11 = data1[(alu4+3840)];
    var val12 = data1[(alu4+3841)];
    var val13 = data1[(alu4+3842)];
    var val14 = data1[(alu4+3843)];
    var val15 = data1[alu4];
    var val16 = data2[(alu3+1)];
    var val17 = data2[(alu3+2)];
    var val18 = data2[(alu3+3)];
    var val19 = data2[alu3];
    acc0 = (acc0+(val0*val16)+(val15*val19)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val19)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val19)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val19)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[alu1] = (acc0*0.07905694097280502f);
  data0[(alu1+77)] = (acc1*0.07905694097280502f);
  data0[(alu1+154)] = (acc2*0.07905694097280502f);
  data0[(alu1+231)] = (acc3*0.07905694097280502f);
}`;

const r_32_32_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = (f32(-inf(1.0)));
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var val0 = data1[((gidx0*2464)+(lidx0*77)+ridx0)];
    acc0 = select(acc0,val0,(acc0<val0));
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_8_32_77_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (alu0+3);
  var val0 = data2[alu1];
  var val1 = data2[alu2];
  var val2 = data2[alu3];
  var val3 = data2[alu0];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var alu4 = ((gidx0*9856)+(lidx0*308)+ridx0);
    var val4 = data1[(alu4+77)];
    acc1 = (acc1+exp2(((val4-val0)*1.4426950408889634f)));
    var val5 = data1[(alu4+154)];
    acc2 = (acc2+exp2(((val5-val1)*1.4426950408889634f)));
    var val6 = data1[(alu4+231)];
    acc3 = (acc3+exp2(((val6-val2)*1.4426950408889634f)));
    var val7 = data1[alu4];
    acc0 = (acc0+exp2(((val7-val3)*1.4426950408889634f)));
  }
  data0[alu1] = acc1;
  data0[alu2] = acc2;
  data0[alu3] = acc3;
  data0[alu0] = acc0;
}`;

const E_8_77_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 77 */
  var gidx1 = i32(gindex.y); /* 8 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = (gidx0+(gidx1*9856)+(lidx0*308));
  var alu1 = (alu0+77);
  var alu2 = (alu0+154);
  var alu3 = (alu0+231);
  var alu4 = ((gidx1<<7)+(lidx0<<2));
  var alu5 = (alu4+1);
  var alu6 = (alu4+2);
  var alu7 = (alu4+3);
  var val0 = data1[alu0];
  var val1 = data1[alu1];
  var val2 = data1[alu2];
  var val3 = data1[alu3];
  var val4 = data2[alu5];
  var val5 = data2[alu6];
  var val6 = data2[alu7];
  var val7 = data2[alu4];
  var val8 = data3[alu5];
  data0[alu1] = (exp2(((val1-val4)*1.4426950408889634f))*(1/val8));
  var val9 = data3[alu6];
  data0[alu2] = (exp2(((val2-val5)*1.4426950408889634f))*(1/val9));
  var val10 = data3[alu7];
  data0[alu3] = (exp2(((val3-val6)*1.4426950408889634f))*(1/val10));
  var val11 = data3[alu4];
  data0[alu0] = (exp2(((val0-val7)*1.4426950408889634f))*(1/val11));
}`;

const r_2_8_5_16_8_77_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 5 */
  var gidx1 = i32(gindex.y); /* 8 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = (gidx0<<5);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1*10240)+(gidx2*81920)+alu0+(lidx0*640)+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 77; ridx0++) {
    var alu3 = ((gidx1*4928)+(gidx2*39424)+(lidx0*308)+ridx0);
    var alu4 = ((gidx1*160)+(gidx2*98560)+alu0+alu1+(ridx0*1280));
    var val0 = data1[(alu3+77)];
    var val1 = data1[(alu3+154)];
    var val2 = data1[(alu3+231)];
    var val3 = data1[alu3];
    var val4 = data2[(alu4+1)];
    acc4 = (acc4+(val3*val4));
    acc5 = (acc5+(val0*val4));
    acc6 = (acc6+(val1*val4));
    acc7 = (acc7+(val2*val4));
    var val5 = data2[(alu4+2)];
    acc8 = (acc8+(val3*val5));
    acc9 = (acc9+(val0*val5));
    acc10 = (acc10+(val1*val5));
    acc11 = (acc11+(val2*val5));
    var val6 = data2[(alu4+3)];
    acc12 = (acc12+(val3*val6));
    acc13 = (acc13+(val0*val6));
    acc14 = (acc14+(val1*val6));
    acc15 = (acc15+(val2*val6));
    var val7 = data2[alu4];
    acc0 = (acc0+(val3*val7));
    acc1 = (acc1+(val0*val7));
    acc2 = (acc2+(val1*val7));
    acc3 = (acc3+(val2*val7));
  }
  data0[(alu2+1)] = acc4;
  data0[(alu2+2)] = acc8;
  data0[(alu2+3)] = acc12;
  data0[(alu2+160)] = acc1;
  data0[(alu2+161)] = acc5;
  data0[(alu2+162)] = acc9;
  data0[(alu2+163)] = acc13;
  data0[(alu2+320)] = acc2;
  data0[(alu2+321)] = acc6;
  data0[(alu2+322)] = acc10;
  data0[(alu2+323)] = acc14;
  data0[(alu2+480)] = acc3;
  data0[(alu2+481)] = acc7;
  data0[(alu2+482)] = acc11;
  data0[(alu2+483)] = acc15;
  data0[alu2] = acc0;
}`;

const r_2_2_20_8_16_320_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 2 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*81920);
  var alu1 = (gidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = ((gidx1*40960)+alu0+alu1+(lidx0*5120)+alu2);
  var alu4 = (alu3+1);
  var alu5 = (alu3+2);
  var alu6 = (alu3+3);
  var alu7 = (alu3+1280);
  var alu8 = (alu3+1281);
  var alu9 = (alu3+1282);
  var alu10 = (alu3+1283);
  var alu11 = (alu3+2560);
  var alu12 = (alu3+2561);
  var alu13 = (alu3+2562);
  var alu14 = (alu3+2563);
  var alu15 = (alu3+3840);
  var alu16 = (alu3+3841);
  var alu17 = (alu3+3842);
  var alu18 = (alu3+3843);
  var alu19 = (alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu20 = ((gidx1*5120)+(lidx0*640)+alu0+((ridx0/40)*10240));
    var alu21 = (ridx0<<2);
    var alu22 = ((gidx0*81920)+(lidx1*5120)+alu21);
    var alu23 = (alu20+((alu21+1)%160));
    var alu24 = (alu20+((alu21+2)%160));
    var alu25 = (alu20+((alu21+3)%160));
    var alu26 = (alu20+(alu21%160));
    var val0 = data2[(alu23+160)];
    var val1 = data2[(alu23+320)];
    var val2 = data2[(alu23+480)];
    var val3 = data2[(alu24+160)];
    var val4 = data2[(alu24+320)];
    var val5 = data2[(alu24+480)];
    var val6 = data2[(alu25+160)];
    var val7 = data2[(alu25+320)];
    var val8 = data2[(alu25+480)];
    var val9 = data2[(alu26+160)];
    var val10 = data2[(alu26+320)];
    var val11 = data2[(alu26+480)];
    var val12 = data2[alu23];
    var val13 = data2[alu24];
    var val14 = data2[alu25];
    var val15 = data2[alu26];
    var val16 = data3[(alu22+1)];
    var val17 = data3[(alu22+2)];
    var val18 = data3[(alu22+3)];
    var val19 = data3[(alu22+1280)];
    var val20 = data3[(alu22+1281)];
    var val21 = data3[(alu22+1282)];
    var val22 = data3[(alu22+1283)];
    acc4 = (acc4+(val12*val20)+(val15*val19)+(val13*val21)+(val14*val22));
    acc5 = (acc5+(val0*val20)+(val9*val19)+(val3*val21)+(val6*val22));
    acc6 = (acc6+(val1*val20)+(val10*val19)+(val4*val21)+(val7*val22));
    acc7 = (acc7+(val2*val20)+(val11*val19)+(val5*val21)+(val8*val22));
    var val23 = data3[(alu22+2560)];
    var val24 = data3[(alu22+2561)];
    var val25 = data3[(alu22+2562)];
    var val26 = data3[(alu22+2563)];
    acc8 = (acc8+(val12*val24)+(val15*val23)+(val13*val25)+(val14*val26));
    acc9 = (acc9+(val0*val24)+(val9*val23)+(val3*val25)+(val6*val26));
    acc10 = (acc10+(val1*val24)+(val10*val23)+(val4*val25)+(val7*val26));
    acc11 = (acc11+(val2*val24)+(val11*val23)+(val5*val25)+(val8*val26));
    var val27 = data3[(alu22+3840)];
    var val28 = data3[(alu22+3841)];
    var val29 = data3[(alu22+3842)];
    var val30 = data3[(alu22+3843)];
    acc12 = (acc12+(val12*val28)+(val15*val27)+(val13*val29)+(val14*val30));
    acc13 = (acc13+(val0*val28)+(val9*val27)+(val3*val29)+(val6*val30));
    acc14 = (acc14+(val1*val28)+(val10*val27)+(val4*val29)+(val7*val30));
    acc15 = (acc15+(val2*val28)+(val11*val27)+(val5*val29)+(val8*val30));
    var val31 = data3[alu22];
    acc0 = (acc0+(val12*val16)+(val15*val31)+(val13*val17)+(val14*val18));
    acc1 = (acc1+(val0*val16)+(val9*val31)+(val3*val17)+(val6*val18));
    acc2 = (acc2+(val1*val16)+(val10*val31)+(val4*val17)+(val7*val18));
    acc3 = (acc3+(val2*val16)+(val11*val31)+(val5*val17)+(val8*val18));
  }
  var val32 = data1[alu4];
  var val33 = data1[alu5];
  var val34 = data1[alu6];
  var val35 = data1[alu7];
  var val36 = data1[alu8];
  var val37 = data1[alu9];
  var val38 = data1[alu10];
  var val39 = data1[alu11];
  var val40 = data1[alu12];
  var val41 = data1[alu13];
  var val42 = data1[alu14];
  var val43 = data1[alu15];
  var val44 = data1[alu16];
  var val45 = data1[alu17];
  var val46 = data1[alu18];
  var val47 = data1[alu3];
  var val48 = data4[(alu19+1)];
  data0[alu4] = (val32+val48+acc4);
  data0[alu8] = (val36+val48+acc5);
  data0[alu12] = (val40+val48+acc6);
  data0[alu16] = (val44+val48+acc7);
  var val49 = data4[(alu19+2)];
  data0[alu5] = (val33+val49+acc8);
  data0[alu9] = (val37+val49+acc9);
  data0[alu13] = (val41+val49+acc10);
  data0[alu17] = (val45+val49+acc11);
  var val50 = data4[(alu19+3)];
  data0[alu6] = (val34+val50+acc12);
  data0[alu10] = (val38+val50+acc13);
  data0[alu14] = (val42+val50+acc14);
  data0[alu18] = (val46+val50+acc15);
  var val51 = data4[alu19];
  data0[alu7] = (val35+val51+acc1);
  data0[alu11] = (val39+val51+acc2);
  data0[alu15] = (val43+val51+acc3);
  data0[alu3] = (val47+val51+acc0);
}`;

const r_4_160_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 160 */
  var gidx1 = i32(gindex.y); /* 4 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1*327680)+(lidx0*40960)+alu1);
  var alu3 = (alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu4 = (ridx0<<2);
    var alu5 = ((gidx0*81920)+(lidx1*5120)+alu4);
    var alu6 = ((gidx1*40960)+(lidx0*5120)+alu4);
    var val0 = data1[(alu6+1)];
    var val1 = data1[(alu6+2)];
    var val2 = data1[(alu6+3)];
    var val3 = data1[(alu6+1280)];
    var val4 = data1[(alu6+1281)];
    var val5 = data1[(alu6+1282)];
    var val6 = data1[(alu6+1283)];
    var val7 = data1[(alu6+2560)];
    var val8 = data1[(alu6+2561)];
    var val9 = data1[(alu6+2562)];
    var val10 = data1[(alu6+2563)];
    var val11 = data1[(alu6+3840)];
    var val12 = data1[(alu6+3841)];
    var val13 = data1[(alu6+3842)];
    var val14 = data1[(alu6+3843)];
    var val15 = data1[alu6];
    var val16 = data2[(alu5+1)];
    var val17 = data2[(alu5+2)];
    var val18 = data2[(alu5+3)];
    var val19 = data2[(alu5+1280)];
    var val20 = data2[(alu5+1281)];
    var val21 = data2[(alu5+1282)];
    var val22 = data2[(alu5+1283)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu5+2560)];
    var val24 = data2[(alu5+2561)];
    var val25 = data2[(alu5+2562)];
    var val26 = data2[(alu5+2563)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu5+3840)];
    var val28 = data2[(alu5+3841)];
    var val29 = data2[(alu5+3842)];
    var val30 = data2[(alu5+3843)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu5];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data3[(alu3+1)];
  data0[(alu2+1)] = (val32+acc4);
  data0[(alu2+10241)] = (val32+acc5);
  data0[(alu2+20481)] = (val32+acc6);
  data0[(alu2+30721)] = (val32+acc7);
  var val33 = data3[(alu3+2)];
  data0[(alu2+2)] = (val33+acc8);
  data0[(alu2+10242)] = (val33+acc9);
  data0[(alu2+20482)] = (val33+acc10);
  data0[(alu2+30722)] = (val33+acc11);
  var val34 = data3[(alu3+3)];
  data0[(alu2+3)] = (val34+acc12);
  data0[(alu2+10243)] = (val34+acc13);
  data0[(alu2+20483)] = (val34+acc14);
  data0[(alu2+30723)] = (val34+acc15);
  var val35 = data3[alu3];
  data0[(alu2+10240)] = (val35+acc1);
  data0[(alu2+20480)] = (val35+acc2);
  data0[(alu2+30720)] = (val35+acc3);
  data0[alu2] = (val35+acc0);
}`;

const E_16_80_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 80 */
  var gidx1 = i32(gindex.y); /* 16 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1*40960)+(lidx0*5120)+alu1);
  var alu3 = (alu0+(gidx1*81920)+(lidx0*10240)+alu1);
  var val0 = data1[(alu3+1)];
  var val1 = data1[(alu3+2)];
  var val2 = data1[(alu3+3)];
  var val3 = data1[(alu3+5120)];
  var val4 = data1[(alu3+5121)];
  data0[(alu2+1)] = (val0*(1/(exp2(((val4+(val4*val4*val4*0.044715f))*-2.302208198144325f))+1.0f))*val4);
  var val5 = data1[(alu3+5122)];
  data0[(alu2+2)] = (val1*(1/(exp2(((val5+(val5*val5*val5*0.044715f))*-2.302208198144325f))+1.0f))*val5);
  var val6 = data1[(alu3+5123)];
  data0[(alu2+3)] = (val2*(1/(exp2(((val6+(val6*val6*val6*0.044715f))*-2.302208198144325f))+1.0f))*val6);
  var val7 = data1[alu3];
  data0[alu2] = (val7*(1/(exp2(((val3+(val3*val3*val3*0.044715f))*-2.302208198144325f))+1.0f))*val3);
}`;

const r_4_20_8_16_1280_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 20 */
  var gidx1 = i32(gindex.y); /* 4 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1*40960)+(lidx0*5120)+alu1);
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = (alu2+1280);
  var alu7 = (alu2+1281);
  var alu8 = (alu2+1282);
  var alu9 = (alu2+1283);
  var alu10 = (alu2+2560);
  var alu11 = (alu2+2561);
  var alu12 = (alu2+2562);
  var alu13 = (alu2+2563);
  var alu14 = (alu2+3840);
  var alu15 = (alu2+3841);
  var alu16 = (alu2+3842);
  var alu17 = (alu2+3843);
  var alu18 = (alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var alu19 = (ridx0<<2);
    var alu20 = ((gidx0*327680)+(lidx1*20480)+alu19);
    var alu21 = ((gidx1*163840)+(lidx0*20480)+alu19);
    var val0 = data2[(alu21+1)];
    var val1 = data2[(alu21+2)];
    var val2 = data2[(alu21+3)];
    var val3 = data2[(alu21+5120)];
    var val4 = data2[(alu21+5121)];
    var val5 = data2[(alu21+5122)];
    var val6 = data2[(alu21+5123)];
    var val7 = data2[(alu21+10240)];
    var val8 = data2[(alu21+10241)];
    var val9 = data2[(alu21+10242)];
    var val10 = data2[(alu21+10243)];
    var val11 = data2[(alu21+15360)];
    var val12 = data2[(alu21+15361)];
    var val13 = data2[(alu21+15362)];
    var val14 = data2[(alu21+15363)];
    var val15 = data2[alu21];
    var val16 = data3[(alu20+1)];
    var val17 = data3[(alu20+2)];
    var val18 = data3[(alu20+3)];
    var val19 = data3[(alu20+5120)];
    var val20 = data3[(alu20+5121)];
    var val21 = data3[(alu20+5122)];
    var val22 = data3[(alu20+5123)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data3[(alu20+10240)];
    var val24 = data3[(alu20+10241)];
    var val25 = data3[(alu20+10242)];
    var val26 = data3[(alu20+10243)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data3[(alu20+15360)];
    var val28 = data3[(alu20+15361)];
    var val29 = data3[(alu20+15362)];
    var val30 = data3[(alu20+15363)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data3[alu20];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data1[alu3];
  var val33 = data1[alu4];
  var val34 = data1[alu5];
  var val35 = data1[alu6];
  var val36 = data1[alu7];
  var val37 = data1[alu8];
  var val38 = data1[alu9];
  var val39 = data1[alu10];
  var val40 = data1[alu11];
  var val41 = data1[alu12];
  var val42 = data1[alu13];
  var val43 = data1[alu14];
  var val44 = data1[alu15];
  var val45 = data1[alu16];
  var val46 = data1[alu17];
  var val47 = data1[alu2];
  var val48 = data4[(alu18+1)];
  data0[alu3] = (val32+val48+acc4);
  data0[alu7] = (val36+val48+acc5);
  data0[alu11] = (val40+val48+acc6);
  data0[alu15] = (val44+val48+acc7);
  var val49 = data4[(alu18+2)];
  data0[alu4] = (val33+val49+acc8);
  data0[alu8] = (val37+val49+acc9);
  data0[alu12] = (val41+val49+acc10);
  data0[alu16] = (val45+val49+acc11);
  var val50 = data4[(alu18+3)];
  data0[alu5] = (val34+val50+acc12);
  data0[alu9] = (val38+val50+acc13);
  data0[alu13] = (val42+val50+acc14);
  data0[alu17] = (val46+val50+acc15);
  var val51 = data4[alu18];
  data0[alu6] = (val35+val51+acc1);
  data0[alu10] = (val39+val51+acc2);
  data0[alu14] = (val43+val51+acc3);
  data0[alu2] = (val47+val51+acc0);
}`;

const r_2_40_8_16_320_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 40 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1*81920);
  var alu1 = ((gidx0<<5)+(lidx0<<2));
  var alu2 = ((gidx0<<11)+alu0+(lidx0<<8)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = (alu2+64);
  var alu7 = (alu2+65);
  var alu8 = (alu2+66);
  var alu9 = (alu2+67);
  var alu10 = (alu2+128);
  var alu11 = (alu2+129);
  var alu12 = (alu2+130);
  var alu13 = (alu2+131);
  var alu14 = (alu2+192);
  var alu15 = (alu2+193);
  var alu16 = (alu2+194);
  var alu17 = (alu2+195);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu18 = (ridx0<<2);
    var alu19 = ((gidx0*40960)+(lidx0*5120)+alu18);
    var alu20 = (alu0+(lidx1*5120)+alu18);
    var val0 = data1[(alu20+1)];
    var val1 = data1[(alu20+2)];
    var val2 = data1[(alu20+3)];
    var val3 = data1[(alu20+1280)];
    var val4 = data1[(alu20+1281)];
    var val5 = data1[(alu20+1282)];
    var val6 = data1[(alu20+1283)];
    var val7 = data1[(alu20+2560)];
    var val8 = data1[(alu20+2561)];
    var val9 = data1[(alu20+2562)];
    var val10 = data1[(alu20+2563)];
    var val11 = data1[(alu20+3840)];
    var val12 = data1[(alu20+3841)];
    var val13 = data1[(alu20+3842)];
    var val14 = data1[(alu20+3843)];
    var val15 = data1[alu20];
    var val16 = data2[(alu19+1)];
    var val17 = data2[(alu19+2)];
    var val18 = data2[(alu19+3)];
    var val19 = data2[(alu19+1280)];
    var val20 = data2[(alu19+1281)];
    var val21 = data2[(alu19+1282)];
    var val22 = data2[(alu19+1283)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu19+2560)];
    var val24 = data2[(alu19+2561)];
    var val25 = data2[(alu19+2562)];
    var val26 = data2[(alu19+2563)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu19+3840)];
    var val28 = data2[(alu19+3841)];
    var val29 = data2[(alu19+3842)];
    var val30 = data2[(alu19+3843)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu19];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data3[(alu1+1)];
  var val33 = data3[(alu1+2)];
  var val34 = data3[(alu1+3)];
  var val35 = data3[alu1];
  var val36 = data4[alu3];
  data0[alu3] = (val36+val35+acc1);
  var val37 = data4[alu4];
  data0[alu4] = (val37+val35+acc2);
  var val38 = data4[alu5];
  data0[alu5] = (val38+val35+acc3);
  var val39 = data4[alu6];
  data0[alu6] = (val39+val32+acc4);
  var val40 = data4[alu7];
  data0[alu7] = (val40+val32+acc5);
  var val41 = data4[alu8];
  data0[alu8] = (val41+val32+acc6);
  var val42 = data4[alu9];
  data0[alu9] = (val42+val32+acc7);
  var val43 = data4[alu10];
  data0[alu10] = (val43+val33+acc8);
  var val44 = data4[alu11];
  data0[alu11] = (val44+val33+acc9);
  var val45 = data4[alu12];
  data0[alu12] = (val45+val33+acc10);
  var val46 = data4[alu13];
  data0[alu13] = (val46+val33+acc11);
  var val47 = data4[alu14];
  data0[alu14] = (val47+val34+acc12);
  var val48 = data4[alu15];
  data0[alu15] = (val48+val34+acc13);
  var val49 = data4[alu16];
  data0[alu16] = (val49+val34+acc14);
  var val50 = data4[alu17];
  data0[alu17] = (val50+val34+acc15);
  var val51 = data4[alu2];
  data0[alu2] = (val51+val35+acc0);
}`;

const E_2_320_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 320 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<160);
  var alu1 = (alu0!=true);
  var alu2 = (gidx0<<9);
  var alu3 = (lidx0<<6);
  var alu4 = (lidx1<<2);
  var alu5 = (alu2+(gidx1*81920)+alu3+alu4);
  var alu6 = (alu2+(gidx1*163840)+alu3+alu4);
  var val0 = select(0.0f, data1[(alu5+1)], alu0);
  var val1 = select(0.0f, data1[(alu5+2)], alu0);
  var val2 = select(0.0f, data1[(alu5+3)], alu0);
  var val3 = select(0.0f, data1[alu5], alu0);
  var val4 = select(0.0f, data2[(alu5+-81920)], alu1);
  data0[alu6] = (val3+val4);
  var val5 = select(0.0f, data2[(alu5+-81919)], alu1);
  data0[(alu6+1)] = (val0+val5);
  var val6 = select(0.0f, data2[(alu5+-81918)], alu1);
  data0[(alu6+2)] = (val1+val6);
  var val7 = select(0.0f, data2[(alu5+-81917)], alu1);
  data0[(alu6+3)] = (val2+val7);
}`;

const E_2_320_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 320 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx0<<3));
  var alu1 = ((gidx1<<5)+(gidx0/10));
  var alu2 = ((gidx0<<9)+(gidx1*163840)+(lidx0<<6)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_40_8_8_2_2560_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,8,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 40 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 8 */
  var lidx2 = i32(lindex.z); /* 2 */
  var alu0 = (lidx1<<3);
  var alu1 = (lidx2<<2);
  var alu2 = (lidx1<7);
  var alu3 = (lidx2<1);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = (alu3!=true);
  var alu6 = ((gidx0<<5)+(lidx0<<2));
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = ((gidx0<<11)+(gidx1*81920)+(lidx0<<8)+alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 2560; ridx0++) {
    var alu11 = ((gidx0*737280)+(lidx0*92160)+(ridx0*9));
    var alu12 = ((gidx1*163840)+(ridx0<<6)+alu0);
    var alu13 = (alu12+alu1);
    var val0 = select(0.0f, data1[(alu13+-8)], alu4);
    var val1 = select(0.0f, data1[(alu13+-7)], alu4);
    var val2 = select(0.0f, data1[(alu13+-6)], alu4);
    var val3 = select(0.0f, data1[(alu13+-5)], alu4);
    var val4 = data1[(alu13+1)];
    var val5 = data1[(alu13+2)];
    var val6 = data1[(alu13+3)];
    var val7 = select(0.0f, data1[(alu13+8)], alu2);
    var val8 = select(0.0f, data1[(alu13+9)], alu2);
    var val9 = select(0.0f, data1[(alu13+10)], alu2);
    var val10 = select(0.0f, data1[(alu13+11)], alu2);
    var val11 = data1[alu13];
    var val12 = select(0.0f, data1[(alu12+-5)], (alu4&alu5));
    var val13 = select(0.0f, data1[(alu12+-4)], (alu3&alu4));
    var val14 = select(0.0f, data1[(alu12+3)], alu5);
    var val15 = select(0.0f, data1[(alu12+4)], alu3);
    var val16 = select(0.0f, data1[(alu12+11)], (alu2&alu5));
    var val17 = select(0.0f, data1[(alu12+12)], (alu2&alu3));
    var val18 = data2[(alu11+1)];
    var val19 = data2[(alu11+2)];
    var val20 = data2[(alu11+3)];
    var val21 = data2[(alu11+4)];
    var val22 = data2[(alu11+5)];
    var val23 = data2[(alu11+6)];
    var val24 = data2[(alu11+7)];
    var val25 = data2[(alu11+8)];
    var val26 = data2[(alu11+23040)];
    var val27 = data2[(alu11+23041)];
    var val28 = data2[(alu11+23042)];
    var val29 = data2[(alu11+23043)];
    var val30 = data2[(alu11+23044)];
    var val31 = data2[(alu11+23045)];
    var val32 = data2[(alu11+23046)];
    var val33 = data2[(alu11+23047)];
    var val34 = data2[(alu11+23048)];
    acc1 = (acc1+(val12*val26)+(val14*val29)+(val16*val32)+(val0*val27)+(val11*val30)+(val7*val33)+(val1*val28)+(val4*val31)+(val8*val34));
    acc5 = (acc5+(val0*val26)+(val11*val29)+(val7*val32)+(val1*val27)+(val4*val30)+(val8*val33)+(val2*val28)+(val5*val31)+(val9*val34));
    acc9 = (acc9+(val1*val26)+(val4*val29)+(val8*val32)+(val2*val27)+(val5*val30)+(val9*val33)+(val3*val28)+(val6*val31)+(val10*val34));
    acc13 = (acc13+(val2*val26)+(val5*val29)+(val9*val32)+(val3*val27)+(val6*val30)+(val10*val33)+(val13*val28)+(val15*val31)+(val17*val34));
    var val35 = data2[(alu11+46080)];
    var val36 = data2[(alu11+46081)];
    var val37 = data2[(alu11+46082)];
    var val38 = data2[(alu11+46083)];
    var val39 = data2[(alu11+46084)];
    var val40 = data2[(alu11+46085)];
    var val41 = data2[(alu11+46086)];
    var val42 = data2[(alu11+46087)];
    var val43 = data2[(alu11+46088)];
    acc2 = (acc2+(val12*val35)+(val14*val38)+(val16*val41)+(val0*val36)+(val11*val39)+(val7*val42)+(val1*val37)+(val4*val40)+(val8*val43));
    acc6 = (acc6+(val0*val35)+(val11*val38)+(val7*val41)+(val1*val36)+(val4*val39)+(val8*val42)+(val2*val37)+(val5*val40)+(val9*val43));
    acc10 = (acc10+(val1*val35)+(val4*val38)+(val8*val41)+(val2*val36)+(val5*val39)+(val9*val42)+(val3*val37)+(val6*val40)+(val10*val43));
    acc14 = (acc14+(val2*val35)+(val5*val38)+(val9*val41)+(val3*val36)+(val6*val39)+(val10*val42)+(val13*val37)+(val15*val40)+(val17*val43));
    var val44 = data2[(alu11+69120)];
    var val45 = data2[(alu11+69121)];
    var val46 = data2[(alu11+69122)];
    var val47 = data2[(alu11+69123)];
    var val48 = data2[(alu11+69124)];
    var val49 = data2[(alu11+69125)];
    var val50 = data2[(alu11+69126)];
    var val51 = data2[(alu11+69127)];
    var val52 = data2[(alu11+69128)];
    acc3 = (acc3+(val12*val44)+(val14*val47)+(val16*val50)+(val0*val45)+(val11*val48)+(val7*val51)+(val1*val46)+(val4*val49)+(val8*val52));
    acc7 = (acc7+(val0*val44)+(val11*val47)+(val7*val50)+(val1*val45)+(val4*val48)+(val8*val51)+(val2*val46)+(val5*val49)+(val9*val52));
    acc11 = (acc11+(val1*val44)+(val4*val47)+(val8*val50)+(val2*val45)+(val5*val48)+(val9*val51)+(val3*val46)+(val6*val49)+(val10*val52));
    acc15 = (acc15+(val2*val44)+(val5*val47)+(val9*val50)+(val3*val45)+(val6*val48)+(val10*val51)+(val13*val46)+(val15*val49)+(val17*val52));
    var val53 = data2[alu11];
    acc0 = (acc0+(val12*val53)+(val14*val20)+(val16*val23)+(val0*val18)+(val11*val21)+(val7*val24)+(val1*val19)+(val4*val22)+(val8*val25));
    acc4 = (acc4+(val0*val53)+(val11*val20)+(val7*val23)+(val1*val18)+(val4*val21)+(val8*val24)+(val2*val19)+(val5*val22)+(val9*val25));
    acc8 = (acc8+(val1*val53)+(val4*val20)+(val8*val23)+(val2*val18)+(val5*val21)+(val9*val24)+(val3*val19)+(val6*val22)+(val10*val25));
    acc12 = (acc12+(val2*val53)+(val5*val20)+(val9*val23)+(val3*val18)+(val6*val21)+(val10*val24)+(val13*val19)+(val15*val22)+(val17*val25));
  }
  var val54 = data3[alu7];
  var val55 = data3[alu8];
  var val56 = data3[alu9];
  var val57 = data3[alu6];
  var val58 = data4[alu7];
  data0[(alu10+64)] = (val58+val54+acc1);
  data0[(alu10+65)] = (val58+val54+acc5);
  data0[(alu10+66)] = (val58+val54+acc9);
  data0[(alu10+67)] = (val58+val54+acc13);
  var val59 = data4[alu8];
  data0[(alu10+128)] = (val59+val55+acc2);
  data0[(alu10+129)] = (val59+val55+acc6);
  data0[(alu10+130)] = (val59+val55+acc10);
  data0[(alu10+131)] = (val59+val55+acc14);
  var val60 = data4[alu9];
  data0[(alu10+192)] = (val60+val56+acc3);
  data0[(alu10+193)] = (val60+val56+acc7);
  data0[(alu10+194)] = (val60+val56+acc11);
  data0[(alu10+195)] = (val60+val56+acc15);
  var val61 = data4[alu6];
  data0[(alu10+1)] = (val61+val57+acc4);
  data0[(alu10+2)] = (val61+val57+acc8);
  data0[(alu10+3)] = (val61+val57+acc12);
  data0[alu10] = (val61+val57+acc0);
}`;

const r_2_40_8_8_2_1280_4_4_3_3n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,8,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 40 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 8 */
  var lidx2 = i32(lindex.z); /* 2 */
  var alu0 = (gidx1*81920);
  var alu1 = (lidx1<<3);
  var alu2 = (lidx2<<2);
  var alu3 = (lidx1<7);
  var alu4 = (lidx2<1);
  var alu5 = ((lidx1<1)!=true);
  var alu6 = (alu4!=true);
  var alu7 = ((gidx0<<11)+alu0+(lidx0<<8)+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var alu8 = ((gidx0*368640)+(lidx0*46080)+(ridx0*9));
    var alu9 = (alu0+(ridx0<<6)+alu1);
    var alu10 = (alu9+alu2);
    var val0 = select(0.0f, data1[(alu10+-8)], alu5);
    var val1 = select(0.0f, data1[(alu10+-7)], alu5);
    var val2 = select(0.0f, data1[(alu10+-6)], alu5);
    var val3 = select(0.0f, data1[(alu10+-5)], alu5);
    var val4 = data1[(alu10+1)];
    var val5 = data1[(alu10+2)];
    var val6 = data1[(alu10+3)];
    var val7 = select(0.0f, data1[(alu10+8)], alu3);
    var val8 = select(0.0f, data1[(alu10+9)], alu3);
    var val9 = select(0.0f, data1[(alu10+10)], alu3);
    var val10 = select(0.0f, data1[(alu10+11)], alu3);
    var val11 = data1[alu10];
    var val12 = select(0.0f, data1[(alu9+-5)], (alu5&alu6));
    var val13 = select(0.0f, data1[(alu9+-4)], (alu4&alu5));
    var val14 = select(0.0f, data1[(alu9+3)], alu6);
    var val15 = select(0.0f, data1[(alu9+4)], alu4);
    var val16 = select(0.0f, data1[(alu9+11)], (alu3&alu6));
    var val17 = select(0.0f, data1[(alu9+12)], (alu3&alu4));
    var val18 = data2[(alu8+1)];
    var val19 = data2[(alu8+2)];
    var val20 = data2[(alu8+3)];
    var val21 = data2[(alu8+4)];
    var val22 = data2[(alu8+5)];
    var val23 = data2[(alu8+6)];
    var val24 = data2[(alu8+7)];
    var val25 = data2[(alu8+8)];
    var val26 = data2[(alu8+11520)];
    var val27 = data2[(alu8+11521)];
    var val28 = data2[(alu8+11522)];
    var val29 = data2[(alu8+11523)];
    var val30 = data2[(alu8+11524)];
    var val31 = data2[(alu8+11525)];
    var val32 = data2[(alu8+11526)];
    var val33 = data2[(alu8+11527)];
    var val34 = data2[(alu8+11528)];
    acc4 = (acc4+(val12*val26)+(val14*val29)+(val16*val32)+(val0*val27)+(val11*val30)+(val7*val33)+(val1*val28)+(val4*val31)+(val8*val34));
    acc5 = (acc5+(val0*val26)+(val11*val29)+(val7*val32)+(val1*val27)+(val4*val30)+(val8*val33)+(val2*val28)+(val5*val31)+(val9*val34));
    acc6 = (acc6+(val1*val26)+(val4*val29)+(val8*val32)+(val2*val27)+(val5*val30)+(val9*val33)+(val3*val28)+(val6*val31)+(val10*val34));
    acc7 = (acc7+(val2*val26)+(val5*val29)+(val9*val32)+(val3*val27)+(val6*val30)+(val10*val33)+(val13*val28)+(val15*val31)+(val17*val34));
    var val35 = data2[(alu8+23040)];
    var val36 = data2[(alu8+23041)];
    var val37 = data2[(alu8+23042)];
    var val38 = data2[(alu8+23043)];
    var val39 = data2[(alu8+23044)];
    var val40 = data2[(alu8+23045)];
    var val41 = data2[(alu8+23046)];
    var val42 = data2[(alu8+23047)];
    var val43 = data2[(alu8+23048)];
    acc8 = (acc8+(val12*val35)+(val14*val38)+(val16*val41)+(val0*val36)+(val11*val39)+(val7*val42)+(val1*val37)+(val4*val40)+(val8*val43));
    acc9 = (acc9+(val0*val35)+(val11*val38)+(val7*val41)+(val1*val36)+(val4*val39)+(val8*val42)+(val2*val37)+(val5*val40)+(val9*val43));
    acc10 = (acc10+(val1*val35)+(val4*val38)+(val8*val41)+(val2*val36)+(val5*val39)+(val9*val42)+(val3*val37)+(val6*val40)+(val10*val43));
    acc11 = (acc11+(val2*val35)+(val5*val38)+(val9*val41)+(val3*val36)+(val6*val39)+(val10*val42)+(val13*val37)+(val15*val40)+(val17*val43));
    var val44 = data2[(alu8+34560)];
    var val45 = data2[(alu8+34561)];
    var val46 = data2[(alu8+34562)];
    var val47 = data2[(alu8+34563)];
    var val48 = data2[(alu8+34564)];
    var val49 = data2[(alu8+34565)];
    var val50 = data2[(alu8+34566)];
    var val51 = data2[(alu8+34567)];
    var val52 = data2[(alu8+34568)];
    acc12 = (acc12+(val12*val44)+(val14*val47)+(val16*val50)+(val0*val45)+(val11*val48)+(val7*val51)+(val1*val46)+(val4*val49)+(val8*val52));
    acc13 = (acc13+(val0*val44)+(val11*val47)+(val7*val50)+(val1*val45)+(val4*val48)+(val8*val51)+(val2*val46)+(val5*val49)+(val9*val52));
    acc14 = (acc14+(val1*val44)+(val4*val47)+(val8*val50)+(val2*val45)+(val5*val48)+(val9*val51)+(val3*val46)+(val6*val49)+(val10*val52));
    acc15 = (acc15+(val2*val44)+(val5*val47)+(val9*val50)+(val3*val45)+(val6*val48)+(val10*val51)+(val13*val46)+(val15*val49)+(val17*val52));
    var val53 = data2[alu8];
    acc0 = (acc0+(val12*val53)+(val14*val20)+(val16*val23)+(val0*val18)+(val11*val21)+(val7*val24)+(val1*val19)+(val4*val22)+(val8*val25));
    acc1 = (acc1+(val0*val53)+(val11*val20)+(val7*val23)+(val1*val18)+(val4*val21)+(val8*val24)+(val2*val19)+(val5*val22)+(val9*val25));
    acc2 = (acc2+(val1*val53)+(val4*val20)+(val8*val23)+(val2*val18)+(val5*val21)+(val9*val24)+(val3*val19)+(val6*val22)+(val10*val25));
    acc3 = (acc3+(val2*val53)+(val5*val20)+(val9*val23)+(val3*val18)+(val6*val21)+(val10*val24)+(val13*val19)+(val15*val22)+(val17*val25));
  }
  data0[(alu7+1)] = acc1;
  data0[(alu7+2)] = acc2;
  data0[(alu7+3)] = acc3;
  data0[(alu7+64)] = acc4;
  data0[(alu7+65)] = acc5;
  data0[(alu7+66)] = acc6;
  data0[(alu7+67)] = acc7;
  data0[(alu7+128)] = acc8;
  data0[(alu7+129)] = acc9;
  data0[(alu7+130)] = acc10;
  data0[(alu7+131)] = acc11;
  data0[(alu7+192)] = acc12;
  data0[(alu7+193)] = acc13;
  data0[(alu7+194)] = acc14;
  data0[(alu7+195)] = acc15;
  data0[alu7] = acc0;
}`;

const r_2_40_8_16_640_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 40 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx1<<2);
  var alu1 = ((gidx0<<5)+(lidx0<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var alu5 = ((gidx0<<11)+(gidx1*81920)+(lidx0<<8)+alu0);
  var alu6 = (alu5+1);
  var alu7 = (alu5+2);
  var alu8 = (alu5+3);
  var alu9 = (alu5+64);
  var alu10 = (alu5+65);
  var alu11 = (alu5+66);
  var alu12 = (alu5+67);
  var alu13 = (alu5+128);
  var alu14 = (alu5+129);
  var alu15 = (alu5+130);
  var alu16 = (alu5+131);
  var alu17 = (alu5+192);
  var alu18 = (alu5+193);
  var alu19 = (alu5+194);
  var alu20 = (alu5+195);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 640; ridx0++) {
    var alu21 = ((gidx0*81920)+(lidx0*10240)+(ridx0<<2));
    var alu22 = ((gidx1*163840)+alu0+(ridx0<<8));
    var val0 = data1[(alu22+1)];
    var val1 = data1[(alu22+2)];
    var val2 = data1[(alu22+3)];
    var val3 = data1[(alu22+64)];
    var val4 = data1[(alu22+65)];
    var val5 = data1[(alu22+66)];
    var val6 = data1[(alu22+67)];
    var val7 = data1[(alu22+128)];
    var val8 = data1[(alu22+129)];
    var val9 = data1[(alu22+130)];
    var val10 = data1[(alu22+131)];
    var val11 = data1[(alu22+192)];
    var val12 = data1[(alu22+193)];
    var val13 = data1[(alu22+194)];
    var val14 = data1[(alu22+195)];
    var val15 = data1[alu22];
    var val16 = data2[(alu21+1)];
    var val17 = data2[(alu21+2)];
    var val18 = data2[(alu21+3)];
    var val19 = data2[(alu21+2560)];
    var val20 = data2[(alu21+2561)];
    var val21 = data2[(alu21+2562)];
    var val22 = data2[(alu21+2563)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu21+5120)];
    var val24 = data2[(alu21+5121)];
    var val25 = data2[(alu21+5122)];
    var val26 = data2[(alu21+5123)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu21+7680)];
    var val28 = data2[(alu21+7681)];
    var val29 = data2[(alu21+7682)];
    var val30 = data2[(alu21+7683)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu21];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[alu2];
  var val33 = data3[alu3];
  var val34 = data3[alu4];
  var val35 = data3[alu1];
  var val36 = data4[alu6];
  var val37 = data4[alu7];
  var val38 = data4[alu8];
  var val39 = data4[alu9];
  var val40 = data4[alu10];
  var val41 = data4[alu11];
  var val42 = data4[alu12];
  var val43 = data4[alu13];
  var val44 = data4[alu14];
  var val45 = data4[alu15];
  var val46 = data4[alu16];
  var val47 = data4[alu17];
  var val48 = data4[alu18];
  var val49 = data4[alu19];
  var val50 = data4[alu20];
  var val51 = data4[alu5];
  var val52 = data5[alu2];
  data0[alu9] = (val32+acc1+val39+val52);
  data0[alu10] = (val32+acc5+val40+val52);
  data0[alu11] = (val32+acc9+val41+val52);
  data0[alu12] = (val32+acc13+val42+val52);
  var val53 = data5[alu3];
  data0[alu13] = (val33+acc2+val43+val53);
  data0[alu14] = (val33+acc6+val44+val53);
  data0[alu15] = (val33+acc10+val45+val53);
  data0[alu16] = (val33+acc14+val46+val53);
  var val54 = data5[alu4];
  data0[alu17] = (val34+acc3+val47+val54);
  data0[alu18] = (val34+acc7+val48+val54);
  data0[alu19] = (val34+acc11+val49+val54);
  data0[alu20] = (val34+acc15+val50+val54);
  var val55 = data5[alu1];
  data0[alu6] = (val35+acc4+val36+val55);
  data0[alu7] = (val35+acc8+val37+val55);
  data0[alu8] = (val35+acc12+val38+val55);
  data0[alu5] = (val35+acc0+val51+val55);
}`;

const r_2_160_2_16_4_1280_4_4_3_3n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(2,16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 160 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var lidx2 = i32(lindex.z); /* 4 */
  var alu0 = (lidx2<<1);
  var alu1 = (lidx1<15);
  var alu2 = (lidx2<3);
  var alu3 = ((lidx1<1)!=true);
  var alu4 = ((lidx2<1)!=true);
  var alu5 = ((gidx0<<3)+(lidx0<<2));
  var alu6 = ((gidx0<<11)+(gidx1*327680)+(lidx0<<10)+(lidx1<<4)+(lidx2<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var alu7 = ((gidx0*92160)+(lidx0*46080)+(ridx0*9));
    var alu8 = ((gidx1*81920)+(ridx0<<6));
    var alu9 = (alu8+((lidx1>>1)<<3)+alu0);
    var alu10 = (alu8+(((lidx1+1)>>1)<<3)+alu0);
    var val0 = select(0.0f, data1[(alu9+-1)], alu4);
    var val1 = data1[(alu9+1)];
    var val2 = select(0.0f, data1[(alu9+2)], alu2);
    var val3 = select(0.0f, data1[(alu10+-9)], (alu3&alu4));
    var val4 = select(0.0f, data1[(alu10+-8)], alu3);
    var val5 = select(0.0f, data1[(alu10+-7)], alu3);
    var val6 = select(0.0f, data1[(alu10+-6)], (alu2&alu3));
    var val7 = select(0.0f, data1[(alu10+-1)], (alu1&alu4));
    var val8 = select(0.0f, data1[(alu10+1)], alu1);
    var val9 = select(0.0f, data1[(alu10+2)], (alu1&alu2));
    var val10 = data1[alu9];
    var val11 = select(0.0f, data1[alu10], alu1);
    var val12 = data2[(alu7+1)];
    var alu11 = (val4*val12);
    var alu12 = (val5*val12);
    var val13 = data2[(alu7+2)];
    var alu13 = (val5*val13);
    var val14 = data2[(alu7+3)];
    var val15 = data2[(alu7+4)];
    var alu14 = (val1*val15);
    var alu15 = (val10*val15);
    var val16 = data2[(alu7+5)];
    var alu16 = (val1*val16);
    var val17 = data2[(alu7+6)];
    var val18 = data2[(alu7+7)];
    var alu17 = (val8*val18);
    var alu18 = (val11*val18);
    var val19 = data2[(alu7+8)];
    var alu19 = (val8*val19);
    var val20 = data2[(alu7+11520)];
    var val21 = data2[(alu7+11521)];
    var alu20 = (val4*val21);
    var alu21 = (val5*val21);
    var val22 = data2[(alu7+11522)];
    var alu22 = (val5*val22);
    var val23 = data2[(alu7+11523)];
    var val24 = data2[(alu7+11524)];
    var alu23 = (val1*val24);
    var alu24 = (val10*val24);
    var val25 = data2[(alu7+11525)];
    var alu25 = (val1*val25);
    var val26 = data2[(alu7+11526)];
    var alu26 = ((val4*val20)+(val10*val23)+(val11*val26));
    var val27 = data2[(alu7+11527)];
    var alu27 = (val8*val27);
    var alu28 = (val11*val27);
    var val28 = data2[(alu7+11528)];
    var alu29 = (val8*val28);
    acc1 = (acc1+(val0*val23)+(val3*val20)+(val7*val26)+alu20+alu24+alu28+(val4*val22)+(val10*val25)+(val11*val28));
    acc5 = (acc5+alu26+alu20+alu24+alu28+alu22+alu25+alu29);
    acc9 = (acc9+alu26+alu21+alu23+alu27+alu22+alu25+alu29);
    acc13 = (acc13+(val1*val23)+(val5*val20)+(val8*val26)+alu21+alu23+alu27+(val6*val22)+(val2*val25)+(val9*val28));
    var val29 = data2[(alu7+23040)];
    var val30 = data2[(alu7+23041)];
    var alu34 = (val4*val30);
    var alu35 = (val5*val30);
    var val31 = data2[(alu7+23042)];
    var alu36 = (val5*val31);
    var val32 = data2[(alu7+23043)];
    var val33 = data2[(alu7+23044)];
    var alu37 = (val1*val33);
    var alu38 = (val10*val33);
    var val34 = data2[(alu7+23045)];
    var alu39 = (val1*val34);
    var val35 = data2[(alu7+23046)];
    var alu40 = ((val4*val29)+(val10*val32)+(val11*val35));
    var val36 = data2[(alu7+23047)];
    var alu41 = (val8*val36);
    var alu42 = (val11*val36);
    var val37 = data2[(alu7+23048)];
    var alu43 = (val8*val37);
    acc2 = (acc2+(val0*val32)+(val3*val29)+(val7*val35)+alu34+alu38+alu42+(val4*val31)+(val10*val34)+(val11*val37));
    acc6 = (acc6+alu40+alu34+alu38+alu42+alu36+alu39+alu43);
    acc10 = (acc10+alu40+alu35+alu37+alu41+alu36+alu39+alu43);
    acc14 = (acc14+(val1*val32)+(val5*val29)+(val8*val35)+alu35+alu37+alu41+(val6*val31)+(val2*val34)+(val9*val37));
    var val38 = data2[(alu7+34560)];
    var val39 = data2[(alu7+34561)];
    var alu48 = (val4*val39);
    var alu49 = (val5*val39);
    var val40 = data2[(alu7+34562)];
    var alu50 = (val5*val40);
    var val41 = data2[(alu7+34563)];
    var val42 = data2[(alu7+34564)];
    var alu51 = (val1*val42);
    var alu52 = (val10*val42);
    var val43 = data2[(alu7+34565)];
    var alu53 = (val1*val43);
    var val44 = data2[(alu7+34566)];
    var alu54 = ((val4*val38)+(val10*val41)+(val11*val44));
    var val45 = data2[(alu7+34567)];
    var alu55 = (val8*val45);
    var alu56 = (val11*val45);
    var val46 = data2[(alu7+34568)];
    var alu57 = (val8*val46);
    acc3 = (acc3+(val0*val41)+(val3*val38)+(val7*val44)+alu48+alu52+alu56+(val4*val40)+(val10*val43)+(val11*val46));
    acc7 = (acc7+alu54+alu48+alu52+alu56+alu50+alu53+alu57);
    acc11 = (acc11+alu54+alu49+alu51+alu55+alu50+alu53+alu57);
    acc15 = (acc15+(val1*val41)+(val5*val38)+(val8*val44)+alu49+alu51+alu55+(val6*val40)+(val2*val43)+(val9*val46));
    var val47 = data2[alu7];
    var alu62 = ((val4*val47)+(val10*val14)+(val11*val17));
    acc0 = (acc0+(val0*val14)+(val3*val47)+(val7*val17)+alu11+alu15+alu18+(val4*val13)+(val10*val16)+(val11*val19));
    acc4 = (acc4+alu62+alu11+alu15+alu18+alu13+alu16+alu19);
    acc8 = (acc8+alu62+alu12+alu14+alu17+alu13+alu16+alu19);
    acc12 = (acc12+(val1*val14)+(val5*val47)+(val8*val17)+alu12+alu14+alu17+(val6*val13)+(val2*val16)+(val9*val19));
  }
  var val48 = data3[(alu5+1)];
  data0[(alu6+256)] = (val48+acc1);
  data0[(alu6+257)] = (val48+acc5);
  data0[(alu6+258)] = (val48+acc9);
  data0[(alu6+259)] = (val48+acc13);
  var val49 = data3[(alu5+2)];
  data0[(alu6+512)] = (val49+acc2);
  data0[(alu6+513)] = (val49+acc6);
  data0[(alu6+514)] = (val49+acc10);
  data0[(alu6+515)] = (val49+acc14);
  var val50 = data3[(alu5+3)];
  data0[(alu6+768)] = (val50+acc3);
  data0[(alu6+769)] = (val50+acc7);
  data0[(alu6+770)] = (val50+acc11);
  data0[(alu6+771)] = (val50+acc15);
  var val51 = data3[alu5];
  data0[(alu6+1)] = (val51+acc4);
  data0[(alu6+2)] = (val51+acc8);
  data0[(alu6+3)] = (val51+acc12);
  data0[alu6] = (val51+acc0);
}`;

const E_2_320_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 320 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1<160);
  var alu1 = (alu0!=true);
  var alu2 = (gidx0<<6);
  var alu3 = (gidx1<<11);
  var alu4 = (lidx0<<8);
  var alu5 = (lidx1<<2);
  var alu6 = (alu3+(gidx2*327680)+alu2+alu4+alu5);
  var alu7 = (alu3+(gidx2*655360)+alu2+alu4+alu5);
  var val0 = select(0.0f, data1[(alu6+1)], alu0);
  var val1 = select(0.0f, data1[(alu6+2)], alu0);
  var val2 = select(0.0f, data1[(alu6+3)], alu0);
  var val3 = select(0.0f, data1[alu6], alu0);
  var val4 = select(0.0f, data2[(alu6+-327680)], alu1);
  data0[alu7] = (val3+val4);
  var val5 = select(0.0f, data2[(alu6+-327679)], alu1);
  data0[(alu7+1)] = (val0+val5);
  var val6 = select(0.0f, data2[(alu6+-327678)], alu1);
  data0[(alu7+2)] = (val1+val6);
  var val7 = select(0.0f, data2[(alu6+-327677)], alu1);
  data0[(alu7+3)] = (val2+val7);
}`;

const E_2_320_4_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 320 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(gidx1/10));
  var alu2 = ((gidx1<<11)+(gidx2*655360)+(gidx0<<6)+(lidx0<<8)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_160_2_16_4_2560_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(2,16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 160 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var lidx2 = i32(lindex.z); /* 4 */
  var alu0 = (lidx1<<4);
  var alu1 = (lidx2<<2);
  var alu2 = (lidx1<15);
  var alu3 = (lidx2<3);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = ((lidx2<1)!=true);
  var alu6 = ((gidx0<<3)+(lidx0<<2));
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = ((gidx0<<11)+(gidx1*327680)+(lidx0<<10)+alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 2560; ridx0++) {
    var alu11 = ((gidx0*184320)+(lidx0*92160)+(ridx0*9));
    var alu12 = ((gidx1*655360)+(ridx0<<8)+alu0+alu1);
    var val0 = select(0.0f, data1[(alu12+-17)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu12+-16)], alu4);
    var val2 = select(0.0f, data1[(alu12+-15)], alu4);
    var val3 = select(0.0f, data1[(alu12+-14)], alu4);
    var val4 = select(0.0f, data1[(alu12+-13)], alu4);
    var val5 = select(0.0f, data1[(alu12+-12)], (alu3&alu4));
    var val6 = select(0.0f, data1[(alu12+-1)], alu5);
    var val7 = data1[(alu12+1)];
    var val8 = data1[(alu12+2)];
    var val9 = data1[(alu12+3)];
    var val10 = select(0.0f, data1[(alu12+4)], alu3);
    var val11 = select(0.0f, data1[(alu12+15)], (alu2&alu5));
    var val12 = select(0.0f, data1[(alu12+16)], alu2);
    var val13 = select(0.0f, data1[(alu12+17)], alu2);
    var val14 = select(0.0f, data1[(alu12+18)], alu2);
    var val15 = select(0.0f, data1[(alu12+19)], alu2);
    var val16 = select(0.0f, data1[(alu12+20)], (alu2&alu3));
    var val17 = data1[alu12];
    var val18 = data2[(alu11+1)];
    var val19 = data2[(alu11+2)];
    var val20 = data2[(alu11+3)];
    var val21 = data2[(alu11+4)];
    var val22 = data2[(alu11+5)];
    var val23 = data2[(alu11+6)];
    var val24 = data2[(alu11+7)];
    var val25 = data2[(alu11+8)];
    var val26 = data2[(alu11+23040)];
    var val27 = data2[(alu11+23041)];
    var val28 = data2[(alu11+23042)];
    var val29 = data2[(alu11+23043)];
    var val30 = data2[(alu11+23044)];
    var val31 = data2[(alu11+23045)];
    var val32 = data2[(alu11+23046)];
    var val33 = data2[(alu11+23047)];
    var val34 = data2[(alu11+23048)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu11+46080)];
    var val36 = data2[(alu11+46081)];
    var val37 = data2[(alu11+46082)];
    var val38 = data2[(alu11+46083)];
    var val39 = data2[(alu11+46084)];
    var val40 = data2[(alu11+46085)];
    var val41 = data2[(alu11+46086)];
    var val42 = data2[(alu11+46087)];
    var val43 = data2[(alu11+46088)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu11+69120)];
    var val45 = data2[(alu11+69121)];
    var val46 = data2[(alu11+69122)];
    var val47 = data2[(alu11+69123)];
    var val48 = data2[(alu11+69124)];
    var val49 = data2[(alu11+69125)];
    var val50 = data2[(alu11+69126)];
    var val51 = data2[(alu11+69127)];
    var val52 = data2[(alu11+69128)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu11];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[alu7];
  var val55 = data3[alu8];
  var val56 = data3[alu9];
  var val57 = data3[alu6];
  var val58 = data4[alu7];
  data0[(alu10+256)] = (val58+val54+acc1);
  data0[(alu10+257)] = (val58+val54+acc5);
  data0[(alu10+258)] = (val58+val54+acc9);
  data0[(alu10+259)] = (val58+val54+acc13);
  var val59 = data4[alu8];
  data0[(alu10+512)] = (val59+val55+acc2);
  data0[(alu10+513)] = (val59+val55+acc6);
  data0[(alu10+514)] = (val59+val55+acc10);
  data0[(alu10+515)] = (val59+val55+acc14);
  var val60 = data4[alu9];
  data0[(alu10+768)] = (val60+val56+acc3);
  data0[(alu10+769)] = (val60+val56+acc7);
  data0[(alu10+770)] = (val60+val56+acc11);
  data0[(alu10+771)] = (val60+val56+acc15);
  var val61 = data4[alu6];
  data0[(alu10+1)] = (val61+val57+acc4);
  data0[(alu10+2)] = (val61+val57+acc8);
  data0[(alu10+3)] = (val61+val57+acc12);
  data0[alu10] = (val61+val57+acc0);
}`;

const r_2_40_4_8_16_640_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 40 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1<<5)+(lidx0<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = ((gidx1<<13)+(gidx2*327680)+alu0+(lidx0<<10)+alu1);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+256);
  var alu11 = (alu6+257);
  var alu12 = (alu6+258);
  var alu13 = (alu6+259);
  var alu14 = (alu6+512);
  var alu15 = (alu6+513);
  var alu16 = (alu6+514);
  var alu17 = (alu6+515);
  var alu18 = (alu6+768);
  var alu19 = (alu6+769);
  var alu20 = (alu6+770);
  var alu21 = (alu6+771);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 640; ridx0++) {
    var alu22 = ((gidx1*81920)+(lidx0*10240)+(ridx0<<2));
    var alu23 = (alu0+(gidx2*655360)+alu1+(ridx0<<10));
    var val0 = data1[(alu23+1)];
    var val1 = data1[(alu23+2)];
    var val2 = data1[(alu23+3)];
    var val3 = data1[(alu23+256)];
    var val4 = data1[(alu23+257)];
    var val5 = data1[(alu23+258)];
    var val6 = data1[(alu23+259)];
    var val7 = data1[(alu23+512)];
    var val8 = data1[(alu23+513)];
    var val9 = data1[(alu23+514)];
    var val10 = data1[(alu23+515)];
    var val11 = data1[(alu23+768)];
    var val12 = data1[(alu23+769)];
    var val13 = data1[(alu23+770)];
    var val14 = data1[(alu23+771)];
    var val15 = data1[alu23];
    var val16 = data2[(alu22+1)];
    var val17 = data2[(alu22+2)];
    var val18 = data2[(alu22+3)];
    var val19 = data2[(alu22+2560)];
    var val20 = data2[(alu22+2561)];
    var val21 = data2[(alu22+2562)];
    var val22 = data2[(alu22+2563)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu22+5120)];
    var val24 = data2[(alu22+5121)];
    var val25 = data2[(alu22+5122)];
    var val26 = data2[(alu22+5123)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu22+7680)];
    var val28 = data2[(alu22+7681)];
    var val29 = data2[(alu22+7682)];
    var val30 = data2[(alu22+7683)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu22];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[alu3];
  var val33 = data3[alu4];
  var val34 = data3[alu5];
  var val35 = data3[alu2];
  var val36 = data4[alu7];
  var val37 = data4[alu8];
  var val38 = data4[alu9];
  var val39 = data4[alu10];
  var val40 = data4[alu11];
  var val41 = data4[alu12];
  var val42 = data4[alu13];
  var val43 = data4[alu14];
  var val44 = data4[alu15];
  var val45 = data4[alu16];
  var val46 = data4[alu17];
  var val47 = data4[alu18];
  var val48 = data4[alu19];
  var val49 = data4[alu20];
  var val50 = data4[alu21];
  var val51 = data4[alu6];
  var val52 = data5[alu3];
  data0[alu10] = (val32+acc1+val39+val52);
  data0[alu11] = (val32+acc5+val40+val52);
  data0[alu12] = (val32+acc9+val41+val52);
  data0[alu13] = (val32+acc13+val42+val52);
  var val53 = data5[alu4];
  data0[alu14] = (val33+acc2+val43+val53);
  data0[alu15] = (val33+acc6+val44+val53);
  data0[alu16] = (val33+acc10+val45+val53);
  data0[alu17] = (val33+acc14+val46+val53);
  var val54 = data5[alu5];
  data0[alu18] = (val34+acc3+val47+val54);
  data0[alu19] = (val34+acc7+val48+val54);
  data0[alu20] = (val34+acc11+val49+val54);
  data0[alu21] = (val34+acc15+val50+val54);
  var val55 = data5[alu2];
  data0[alu7] = (val35+acc4+val36+val55);
  data0[alu8] = (val35+acc8+val37+val55);
  data0[alu9] = (val35+acc12+val38+val55);
  data0[alu6] = (val35+acc0+val51+val55);
}`;

const E_2_240_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 240 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1<160);
  var alu1 = (alu0!=true);
  var alu2 = (gidx0<<6);
  var alu3 = (gidx1<<11);
  var alu4 = (lidx0<<8);
  var alu5 = (lidx1<<2);
  var alu6 = (alu3+(gidx2*163840)+alu2+alu4+alu5);
  var alu7 = (alu3+(gidx2*327680)+alu2+alu4+alu5);
  var alu8 = (alu3+(gidx2*491520)+alu2+alu4+alu5);
  var val0 = select(0.0f, data1[(alu7+1)], alu0);
  var val1 = select(0.0f, data1[(alu7+2)], alu0);
  var val2 = select(0.0f, data1[(alu7+3)], alu0);
  var val3 = select(0.0f, data1[alu7], alu0);
  var val4 = select(0.0f, data2[(alu6+-327680)], alu1);
  data0[alu8] = (val3+val4);
  var val5 = select(0.0f, data2[(alu6+-327679)], alu1);
  data0[(alu8+1)] = (val0+val5);
  var val6 = select(0.0f, data2[(alu6+-327678)], alu1);
  data0[(alu8+2)] = (val1+val6);
  var val7 = select(0.0f, data2[(alu6+-327677)], alu1);
  data0[(alu8+3)] = (val2+val7);
}`;

const r_64_16_960 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 960; ridx0++) {
    var val0 = data1[((gidx0*15360)+(lidx0*960)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*6.510417006211355e-05f);
  }
}`;

const r_64_16_960n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var val0 = data2[gidx0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 960; ridx0++) {
    var val1 = data1[((gidx0*15360)+(lidx0*960)+ridx0)];
    var alu0 = (val1-val0);
    acc0 = (acc0+(alu0*alu0));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[gidx0] = sqrt((1/((acc1*6.510417006211355e-05f)+1e-05f)));
  }
}`;

const E_2_240_4_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 240 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(alu0/60));
  var alu2 = ((gidx1<<11)+(gidx2*491520)+(gidx0<<6)+(lidx0<<8)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_160_2_16_4_1920_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(2,16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 160 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 2 */
  var lidx1 = i32(lindex.y); /* 16 */
  var lidx2 = i32(lindex.z); /* 4 */
  var alu0 = (lidx1<<4);
  var alu1 = (lidx2<<2);
  var alu2 = (lidx1<15);
  var alu3 = (lidx2<3);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = ((lidx2<1)!=true);
  var alu6 = ((gidx0<<3)+(lidx0<<2));
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = ((gidx0<<11)+(gidx1*327680)+(lidx0<<10)+alu0+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1920; ridx0++) {
    var alu11 = ((gidx0*138240)+(lidx0*69120)+(ridx0*9));
    var alu12 = ((gidx1*491520)+(ridx0<<8)+alu0+alu1);
    var val0 = select(0.0f, data1[(alu12+-17)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu12+-16)], alu4);
    var val2 = select(0.0f, data1[(alu12+-15)], alu4);
    var val3 = select(0.0f, data1[(alu12+-14)], alu4);
    var val4 = select(0.0f, data1[(alu12+-13)], alu4);
    var val5 = select(0.0f, data1[(alu12+-12)], (alu3&alu4));
    var val6 = select(0.0f, data1[(alu12+-1)], alu5);
    var val7 = data1[(alu12+1)];
    var val8 = data1[(alu12+2)];
    var val9 = data1[(alu12+3)];
    var val10 = select(0.0f, data1[(alu12+4)], alu3);
    var val11 = select(0.0f, data1[(alu12+15)], (alu2&alu5));
    var val12 = select(0.0f, data1[(alu12+16)], alu2);
    var val13 = select(0.0f, data1[(alu12+17)], alu2);
    var val14 = select(0.0f, data1[(alu12+18)], alu2);
    var val15 = select(0.0f, data1[(alu12+19)], alu2);
    var val16 = select(0.0f, data1[(alu12+20)], (alu2&alu3));
    var val17 = data1[alu12];
    var val18 = data2[(alu11+1)];
    var val19 = data2[(alu11+2)];
    var val20 = data2[(alu11+3)];
    var val21 = data2[(alu11+4)];
    var val22 = data2[(alu11+5)];
    var val23 = data2[(alu11+6)];
    var val24 = data2[(alu11+7)];
    var val25 = data2[(alu11+8)];
    var val26 = data2[(alu11+17280)];
    var val27 = data2[(alu11+17281)];
    var val28 = data2[(alu11+17282)];
    var val29 = data2[(alu11+17283)];
    var val30 = data2[(alu11+17284)];
    var val31 = data2[(alu11+17285)];
    var val32 = data2[(alu11+17286)];
    var val33 = data2[(alu11+17287)];
    var val34 = data2[(alu11+17288)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu11+34560)];
    var val36 = data2[(alu11+34561)];
    var val37 = data2[(alu11+34562)];
    var val38 = data2[(alu11+34563)];
    var val39 = data2[(alu11+34564)];
    var val40 = data2[(alu11+34565)];
    var val41 = data2[(alu11+34566)];
    var val42 = data2[(alu11+34567)];
    var val43 = data2[(alu11+34568)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu11+51840)];
    var val45 = data2[(alu11+51841)];
    var val46 = data2[(alu11+51842)];
    var val47 = data2[(alu11+51843)];
    var val48 = data2[(alu11+51844)];
    var val49 = data2[(alu11+51845)];
    var val50 = data2[(alu11+51846)];
    var val51 = data2[(alu11+51847)];
    var val52 = data2[(alu11+51848)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu11];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[alu7];
  var val55 = data3[alu8];
  var val56 = data3[alu9];
  var val57 = data3[alu6];
  var val58 = data4[alu7];
  data0[(alu10+256)] = (val58+val54+acc1);
  data0[(alu10+257)] = (val58+val54+acc5);
  data0[(alu10+258)] = (val58+val54+acc9);
  data0[(alu10+259)] = (val58+val54+acc13);
  var val59 = data4[alu8];
  data0[(alu10+512)] = (val59+val55+acc2);
  data0[(alu10+513)] = (val59+val55+acc6);
  data0[(alu10+514)] = (val59+val55+acc10);
  data0[(alu10+515)] = (val59+val55+acc14);
  var val60 = data4[alu9];
  data0[(alu10+768)] = (val60+val56+acc3);
  data0[(alu10+769)] = (val60+val56+acc7);
  data0[(alu10+770)] = (val60+val56+acc11);
  data0[(alu10+771)] = (val60+val56+acc15);
  var val61 = data4[alu6];
  data0[(alu10+1)] = (val61+val57+acc4);
  data0[(alu10+2)] = (val61+val57+acc8);
  data0[(alu10+3)] = (val61+val57+acc12);
  data0[alu10] = (val61+val57+acc0);
}`;

const r_2_40_4_8_16_480_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 40 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1<<5)+(lidx0<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = ((gidx1<<13)+(gidx2*327680)+alu0+(lidx0<<10)+alu1);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+256);
  var alu11 = (alu6+257);
  var alu12 = (alu6+258);
  var alu13 = (alu6+259);
  var alu14 = (alu6+512);
  var alu15 = (alu6+513);
  var alu16 = (alu6+514);
  var alu17 = (alu6+515);
  var alu18 = (alu6+768);
  var alu19 = (alu6+769);
  var alu20 = (alu6+770);
  var alu21 = (alu6+771);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 480; ridx0++) {
    var alu22 = ((gidx1*61440)+(lidx0*7680)+(ridx0<<2));
    var alu23 = (alu0+(gidx2*491520)+alu1+(ridx0<<10));
    var val0 = data1[(alu23+1)];
    var val1 = data1[(alu23+2)];
    var val2 = data1[(alu23+3)];
    var val3 = data1[(alu23+256)];
    var val4 = data1[(alu23+257)];
    var val5 = data1[(alu23+258)];
    var val6 = data1[(alu23+259)];
    var val7 = data1[(alu23+512)];
    var val8 = data1[(alu23+513)];
    var val9 = data1[(alu23+514)];
    var val10 = data1[(alu23+515)];
    var val11 = data1[(alu23+768)];
    var val12 = data1[(alu23+769)];
    var val13 = data1[(alu23+770)];
    var val14 = data1[(alu23+771)];
    var val15 = data1[alu23];
    var val16 = data2[(alu22+1)];
    var val17 = data2[(alu22+2)];
    var val18 = data2[(alu22+3)];
    var val19 = data2[(alu22+1920)];
    var val20 = data2[(alu22+1921)];
    var val21 = data2[(alu22+1922)];
    var val22 = data2[(alu22+1923)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu22+3840)];
    var val24 = data2[(alu22+3841)];
    var val25 = data2[(alu22+3842)];
    var val26 = data2[(alu22+3843)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu22+5760)];
    var val28 = data2[(alu22+5761)];
    var val29 = data2[(alu22+5762)];
    var val30 = data2[(alu22+5763)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu22];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[alu3];
  var val33 = data3[alu4];
  var val34 = data3[alu5];
  var val35 = data3[alu2];
  var val36 = data4[alu7];
  var val37 = data4[alu8];
  var val38 = data4[alu9];
  var val39 = data4[alu10];
  var val40 = data4[alu11];
  var val41 = data4[alu12];
  var val42 = data4[alu13];
  var val43 = data4[alu14];
  var val44 = data4[alu15];
  var val45 = data4[alu16];
  var val46 = data4[alu17];
  var val47 = data4[alu18];
  var val48 = data4[alu19];
  var val49 = data4[alu20];
  var val50 = data4[alu21];
  var val51 = data4[alu6];
  var val52 = data5[alu3];
  data0[alu10] = (val32+acc1+val39+val52);
  data0[alu11] = (val32+acc5+val40+val52);
  data0[alu12] = (val32+acc9+val41+val52);
  data0[alu13] = (val32+acc13+val42+val52);
  var val53 = data5[alu4];
  data0[alu14] = (val33+acc2+val43+val53);
  data0[alu15] = (val33+acc6+val44+val53);
  data0[alu16] = (val33+acc10+val45+val53);
  data0[alu17] = (val33+acc14+val46+val53);
  var val54 = data5[alu5];
  data0[alu18] = (val34+acc3+val47+val54);
  data0[alu19] = (val34+acc7+val48+val54);
  data0[alu20] = (val34+acc11+val49+val54);
  data0[alu21] = (val34+acc15+val50+val54);
  var val55 = data5[alu2];
  data0[alu7] = (val35+acc4+val36+val55);
  data0[alu8] = (val35+acc8+val37+val55);
  data0[alu9] = (val35+acc12+val38+val55);
  data0[alu6] = (val35+acc0+val51+val55);
}`;

const r_2_320_2_16_8_1280_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 320 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = (lidx1<<1);
  var alu1 = (lidx1<7);
  var alu2 = ((lidx1<1)!=true);
  var alu3 = (((gidx0+lidx0)<1)!=true);
  var alu4 = ((lidx0+(gidx0<<4))<31);
  var alu5 = (gidx1<<2);
  var alu6 = ((gidx1<<12)+(gidx2*1310720)+(gidx0<<9)+(lidx0<<5)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var alu7 = ((gidx1*46080)+(ridx0*9));
    var alu8 = ((gidx0<<3)+(gidx2*20480)+(ridx0<<4)+((lidx0+1)>>1));
    var alu9 = (alu0+(((alu8+40959)%40960)<<4));
    var alu10 = (alu0+((alu8%40960)<<4));
    var alu11 = ((gidx0<<7)+(gidx2*327680)+(ridx0<<8)+((lidx0>>1)<<4)+alu0);
    var val0 = select(0.0f, data1[(alu11+-1)], alu2);
    var val1 = data1[(alu11+1)];
    var val2 = select(0.0f, data1[(alu11+2)], alu1);
    var val3 = data1[alu11];
    var val4 = select(0.0f, data1[(alu9+-1)], (alu2&alu3));
    var val5 = select(0.0f, data1[(alu9+1)], alu3);
    var val6 = select(0.0f, data1[(alu9+2)], (alu1&alu3));
    var val7 = select(0.0f, data1[(alu10+-1)], (alu4&alu2));
    var val8 = select(0.0f, data1[(alu10+1)], alu4);
    var val9 = select(0.0f, data1[(alu10+2)], (alu1&alu4));
    var val10 = select(0.0f, data1[alu9], alu3);
    var val11 = select(0.0f, data1[alu10], alu4);
    var val12 = data2[(alu7+1)];
    var alu12 = (val5*val12);
    var alu13 = (val10*val12);
    var val13 = data2[(alu7+2)];
    var alu14 = (val5*val13);
    var val14 = data2[(alu7+3)];
    var val15 = data2[(alu7+4)];
    var alu15 = (val1*val15);
    var alu16 = (val3*val15);
    var val16 = data2[(alu7+5)];
    var alu17 = (val1*val16);
    var val17 = data2[(alu7+6)];
    var val18 = data2[(alu7+7)];
    var alu18 = (val8*val18);
    var alu19 = (val11*val18);
    var val19 = data2[(alu7+8)];
    var alu20 = (val8*val19);
    var val20 = data2[(alu7+11520)];
    var val21 = data2[(alu7+11521)];
    var alu21 = (val5*val21);
    var alu22 = (val10*val21);
    var val22 = data2[(alu7+11522)];
    var alu23 = (val5*val22);
    var val23 = data2[(alu7+11523)];
    var val24 = data2[(alu7+11524)];
    var alu24 = (val1*val24);
    var alu25 = (val3*val24);
    var val25 = data2[(alu7+11525)];
    var alu26 = (val1*val25);
    var val26 = data2[(alu7+11526)];
    var alu27 = ((val3*val23)+(val10*val20)+(val11*val26));
    var val27 = data2[(alu7+11527)];
    var alu28 = (val8*val27);
    var alu29 = (val11*val27);
    var val28 = data2[(alu7+11528)];
    var alu30 = (val8*val28);
    acc1 = (acc1+(val0*val23)+(val4*val20)+(val7*val26)+alu22+alu25+alu29+(val10*val22)+(val3*val25)+(val11*val28));
    acc5 = (acc5+alu27+alu22+alu25+alu29+alu23+alu26+alu30);
    acc9 = (acc9+alu27+alu21+alu24+alu28+alu23+alu26+alu30);
    acc13 = (acc13+(val1*val23)+(val5*val20)+(val8*val26)+alu21+alu24+alu28+(val6*val22)+(val2*val25)+(val9*val28));
    var val29 = data2[(alu7+23040)];
    var val30 = data2[(alu7+23041)];
    var alu35 = (val5*val30);
    var alu36 = (val10*val30);
    var val31 = data2[(alu7+23042)];
    var alu37 = (val5*val31);
    var val32 = data2[(alu7+23043)];
    var val33 = data2[(alu7+23044)];
    var alu38 = (val1*val33);
    var alu39 = (val3*val33);
    var val34 = data2[(alu7+23045)];
    var alu40 = (val1*val34);
    var val35 = data2[(alu7+23046)];
    var alu41 = ((val3*val32)+(val10*val29)+(val11*val35));
    var val36 = data2[(alu7+23047)];
    var alu42 = (val8*val36);
    var alu43 = (val11*val36);
    var val37 = data2[(alu7+23048)];
    var alu44 = (val8*val37);
    acc2 = (acc2+(val0*val32)+(val4*val29)+(val7*val35)+alu36+alu39+alu43+(val10*val31)+(val3*val34)+(val11*val37));
    acc6 = (acc6+alu41+alu36+alu39+alu43+alu37+alu40+alu44);
    acc10 = (acc10+alu41+alu35+alu38+alu42+alu37+alu40+alu44);
    acc14 = (acc14+(val1*val32)+(val5*val29)+(val8*val35)+alu35+alu38+alu42+(val6*val31)+(val2*val34)+(val9*val37));
    var val38 = data2[(alu7+34560)];
    var val39 = data2[(alu7+34561)];
    var alu49 = (val5*val39);
    var alu50 = (val10*val39);
    var val40 = data2[(alu7+34562)];
    var alu51 = (val5*val40);
    var val41 = data2[(alu7+34563)];
    var val42 = data2[(alu7+34564)];
    var alu52 = (val1*val42);
    var alu53 = (val3*val42);
    var val43 = data2[(alu7+34565)];
    var alu54 = (val1*val43);
    var val44 = data2[(alu7+34566)];
    var alu55 = ((val3*val41)+(val10*val38)+(val11*val44));
    var val45 = data2[(alu7+34567)];
    var alu56 = (val8*val45);
    var alu57 = (val11*val45);
    var val46 = data2[(alu7+34568)];
    var alu58 = (val8*val46);
    acc3 = (acc3+(val0*val41)+(val4*val38)+(val7*val44)+alu50+alu53+alu57+(val10*val40)+(val3*val43)+(val11*val46));
    acc7 = (acc7+alu55+alu50+alu53+alu57+alu51+alu54+alu58);
    acc11 = (acc11+alu55+alu49+alu52+alu56+alu51+alu54+alu58);
    acc15 = (acc15+(val1*val41)+(val5*val38)+(val8*val44)+alu49+alu52+alu56+(val6*val40)+(val2*val43)+(val9*val46));
    var val47 = data2[alu7];
    var alu63 = ((val3*val14)+(val10*val47)+(val11*val17));
    acc0 = (acc0+(val0*val14)+(val4*val47)+(val7*val17)+alu13+alu16+alu19+(val10*val13)+(val3*val16)+(val11*val19));
    acc4 = (acc4+alu63+alu13+alu16+alu19+alu14+alu17+alu20);
    acc8 = (acc8+alu63+alu12+alu15+alu18+alu14+alu17+alu20);
    acc12 = (acc12+(val1*val14)+(val5*val47)+(val8*val17)+alu12+alu15+alu18+(val6*val13)+(val2*val16)+(val9*val19));
  }
  var val48 = data3[(alu5+1)];
  data0[(alu6+1024)] = (val48+acc1);
  data0[(alu6+1025)] = (val48+acc5);
  data0[(alu6+1026)] = (val48+acc9);
  data0[(alu6+1027)] = (val48+acc13);
  var val49 = data3[(alu5+2)];
  data0[(alu6+2048)] = (val49+acc2);
  data0[(alu6+2049)] = (val49+acc6);
  data0[(alu6+2050)] = (val49+acc10);
  data0[(alu6+2051)] = (val49+acc14);
  var val50 = data3[(alu5+3)];
  data0[(alu6+3072)] = (val50+acc3);
  data0[(alu6+3073)] = (val50+acc7);
  data0[(alu6+3074)] = (val50+acc11);
  data0[(alu6+3075)] = (val50+acc15);
  var val51 = data3[alu5];
  data0[(alu6+1)] = (val51+acc4);
  data0[(alu6+2)] = (val51+acc8);
  data0[(alu6+3)] = (val51+acc12);
  data0[alu6] = (val51+acc0);
}`;

const E_2_240_16_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 240 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1<160);
  var alu1 = (alu0!=true);
  var alu2 = (gidx0<<6);
  var alu3 = (gidx1<<13);
  var alu4 = (lidx0<<10);
  var alu5 = (lidx1<<2);
  var alu6 = (alu3+(gidx2*655360)+alu2+alu4+alu5);
  var alu7 = (alu3+(gidx2*1310720)+alu2+alu4+alu5);
  var alu8 = (alu3+(gidx2*1966080)+alu2+alu4+alu5);
  var val0 = select(0.0f, data1[(alu7+1)], alu0);
  var val1 = select(0.0f, data1[(alu7+2)], alu0);
  var val2 = select(0.0f, data1[(alu7+3)], alu0);
  var val3 = select(0.0f, data1[alu7], alu0);
  var val4 = select(0.0f, data2[(alu6+-1310720)], alu1);
  data0[alu8] = (val3+val4);
  var val5 = select(0.0f, data2[(alu6+-1310719)], alu1);
  data0[(alu8+1)] = (val0+val5);
  var val6 = select(0.0f, data2[(alu6+-1310718)], alu1);
  data0[(alu8+2)] = (val1+val6);
  var val7 = select(0.0f, data2[(alu6+-1310717)], alu1);
  data0[(alu8+3)] = (val2+val7);
}`;

const r_512_32_60_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 512 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 60; ridx0++) {
    var alu0 = ((gidx0*7680)+(lidx0*240)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    acc0 = (acc0+val2+val1+val0+val3);
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_64_16_16n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 16; ridx0++) {
    var val0 = data1[((gidx0<<8)+(lidx0<<4)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*1.627604251552839e-05f);
  }
}`;

const r_8_4_8_16_60_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 8 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1<<11)+(lidx0<<8)+(lidx1<<2));
  var val0 = data2[(lidx0+(gidx1<<3))];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 60; ridx0++) {
    var alu1 = ((gidx0*15360)+(gidx1*491520)+(lidx0*61440)+(lidx1*960)+(ridx0<<2));
    var val1 = data1[(alu1+1)];
    var alu2 = (val1-val0);
    var val2 = data1[(alu1+2)];
    var alu3 = (val2-val0);
    var val3 = data1[(alu1+3)];
    var alu4 = (val3-val0);
    var val4 = data1[(alu1+240)];
    var alu5 = (val4-val0);
    var val5 = data1[(alu1+241)];
    var alu6 = (val5-val0);
    var val6 = data1[(alu1+242)];
    var alu7 = (val6-val0);
    var val7 = data1[(alu1+243)];
    var alu8 = (val7-val0);
    acc1 = (acc1+(alu5*alu5)+(alu6*alu6)+(alu7*alu7)+(alu8*alu8));
    var val8 = data1[(alu1+480)];
    var alu10 = (val8-val0);
    var val9 = data1[(alu1+481)];
    var alu11 = (val9-val0);
    var val10 = data1[(alu1+482)];
    var alu12 = (val10-val0);
    var val11 = data1[(alu1+483)];
    var alu13 = (val11-val0);
    acc2 = (acc2+(alu10*alu10)+(alu11*alu11)+(alu12*alu12)+(alu13*alu13));
    var val12 = data1[(alu1+720)];
    var alu15 = (val12-val0);
    var val13 = data1[(alu1+721)];
    var alu16 = (val13-val0);
    var val14 = data1[(alu1+722)];
    var alu17 = (val14-val0);
    var val15 = data1[(alu1+723)];
    var alu18 = (val15-val0);
    acc3 = (acc3+(alu15*alu15)+(alu16*alu16)+(alu17*alu17)+(alu18*alu18));
    var val16 = data1[alu1];
    var alu20 = (val16-val0);
    acc0 = (acc0+(alu2*alu2)+(alu20*alu20)+(alu3*alu3)+(alu4*alu4));
  }
  data0[(alu0+1)] = acc1;
  data0[(alu0+2)] = acc2;
  data0[(alu0+3)] = acc3;
  data0[alu0] = acc0;
}`;

const r_64_16_16n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 16; ridx0++) {
    var val0 = data1[((gidx0<<8)+(lidx0<<4)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = sqrt((1/((acc1*1.627604251552839e-05f)+1e-05f)));
  }
}`;

const E_2_240_16_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 240 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(alu0/60));
  var alu2 = ((gidx1<<13)+(gidx2*1966080)+(gidx0<<6)+(lidx0<<10)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_160_2_16_8_1920_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 160 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = (gidx0<<9);
  var alu1 = (lidx0<<5);
  var alu2 = (lidx1<<2);
  var alu3 = (lidx1<7);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = (((gidx0+lidx0)<1)!=true);
  var alu6 = ((lidx0+(gidx0<<4))<31);
  var alu7 = (gidx1<<2);
  var alu8 = (alu7+1);
  var alu9 = (alu7+2);
  var alu10 = (alu7+3);
  var alu11 = ((gidx1<<12)+(gidx2*655360)+alu0+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1920; ridx0++) {
    var alu12 = ((gidx1*69120)+(ridx0*9));
    var alu13 = (alu0+alu1+(gidx2*1966080)+(ridx0<<10)+alu2);
    var val0 = select(0.0f, data1[(alu13+-33)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu13+-32)], alu5);
    var val2 = select(0.0f, data1[(alu13+-31)], alu5);
    var val3 = select(0.0f, data1[(alu13+-30)], alu5);
    var val4 = select(0.0f, data1[(alu13+-29)], alu5);
    var val5 = select(0.0f, data1[(alu13+-28)], (alu3&alu5));
    var val6 = select(0.0f, data1[(alu13+-1)], alu4);
    var val7 = data1[(alu13+1)];
    var val8 = data1[(alu13+2)];
    var val9 = data1[(alu13+3)];
    var val10 = select(0.0f, data1[(alu13+4)], alu3);
    var val11 = select(0.0f, data1[(alu13+31)], (alu6&alu4));
    var val12 = select(0.0f, data1[(alu13+32)], alu6);
    var val13 = select(0.0f, data1[(alu13+33)], alu6);
    var val14 = select(0.0f, data1[(alu13+34)], alu6);
    var val15 = select(0.0f, data1[(alu13+35)], alu6);
    var val16 = select(0.0f, data1[(alu13+36)], (alu3&alu6));
    var val17 = data1[alu13];
    var val18 = data2[(alu12+1)];
    var val19 = data2[(alu12+2)];
    var val20 = data2[(alu12+3)];
    var val21 = data2[(alu12+4)];
    var val22 = data2[(alu12+5)];
    var val23 = data2[(alu12+6)];
    var val24 = data2[(alu12+7)];
    var val25 = data2[(alu12+8)];
    var val26 = data2[(alu12+17280)];
    var val27 = data2[(alu12+17281)];
    var val28 = data2[(alu12+17282)];
    var val29 = data2[(alu12+17283)];
    var val30 = data2[(alu12+17284)];
    var val31 = data2[(alu12+17285)];
    var val32 = data2[(alu12+17286)];
    var val33 = data2[(alu12+17287)];
    var val34 = data2[(alu12+17288)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu12+34560)];
    var val36 = data2[(alu12+34561)];
    var val37 = data2[(alu12+34562)];
    var val38 = data2[(alu12+34563)];
    var val39 = data2[(alu12+34564)];
    var val40 = data2[(alu12+34565)];
    var val41 = data2[(alu12+34566)];
    var val42 = data2[(alu12+34567)];
    var val43 = data2[(alu12+34568)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu12+51840)];
    var val45 = data2[(alu12+51841)];
    var val46 = data2[(alu12+51842)];
    var val47 = data2[(alu12+51843)];
    var val48 = data2[(alu12+51844)];
    var val49 = data2[(alu12+51845)];
    var val50 = data2[(alu12+51846)];
    var val51 = data2[(alu12+51847)];
    var val52 = data2[(alu12+51848)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu12];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[alu8];
  var val55 = data3[alu9];
  var val56 = data3[alu10];
  var val57 = data3[alu7];
  var val58 = data4[alu8];
  data0[(alu11+1024)] = (val58+val54+acc1);
  data0[(alu11+1025)] = (val58+val54+acc5);
  data0[(alu11+1026)] = (val58+val54+acc9);
  data0[(alu11+1027)] = (val58+val54+acc13);
  var val59 = data4[alu9];
  data0[(alu11+2048)] = (val59+val55+acc2);
  data0[(alu11+2049)] = (val59+val55+acc6);
  data0[(alu11+2050)] = (val59+val55+acc10);
  data0[(alu11+2051)] = (val59+val55+acc14);
  var val60 = data4[alu10];
  data0[(alu11+3072)] = (val60+val56+acc3);
  data0[(alu11+3073)] = (val60+val56+acc7);
  data0[(alu11+3074)] = (val60+val56+acc11);
  data0[(alu11+3075)] = (val60+val56+acc15);
  var val61 = data4[alu7];
  data0[(alu11+1)] = (val61+val57+acc4);
  data0[(alu11+2)] = (val61+val57+acc8);
  data0[(alu11+3)] = (val61+val57+acc12);
  data0[alu11] = (val61+val57+acc0);
}`;

const r_2_20_16_8_16_480_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 20 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1<<5)+(lidx0<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = ((gidx1<<15)+(gidx2*655360)+alu0+(lidx0<<12)+alu1);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+1024);
  var alu11 = (alu6+1025);
  var alu12 = (alu6+1026);
  var alu13 = (alu6+1027);
  var alu14 = (alu6+2048);
  var alu15 = (alu6+2049);
  var alu16 = (alu6+2050);
  var alu17 = (alu6+2051);
  var alu18 = (alu6+3072);
  var alu19 = (alu6+3073);
  var alu20 = (alu6+3074);
  var alu21 = (alu6+3075);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 480; ridx0++) {
    var alu22 = ((gidx1*61440)+(lidx0*7680)+(ridx0<<2));
    var alu23 = (alu0+(gidx2*1966080)+alu1+(ridx0<<12));
    var val0 = data1[(alu23+1)];
    var val1 = data1[(alu23+2)];
    var val2 = data1[(alu23+3)];
    var val3 = data1[(alu23+1024)];
    var val4 = data1[(alu23+1025)];
    var val5 = data1[(alu23+1026)];
    var val6 = data1[(alu23+1027)];
    var val7 = data1[(alu23+2048)];
    var val8 = data1[(alu23+2049)];
    var val9 = data1[(alu23+2050)];
    var val10 = data1[(alu23+2051)];
    var val11 = data1[(alu23+3072)];
    var val12 = data1[(alu23+3073)];
    var val13 = data1[(alu23+3074)];
    var val14 = data1[(alu23+3075)];
    var val15 = data1[alu23];
    var val16 = data2[(alu22+1)];
    var val17 = data2[(alu22+2)];
    var val18 = data2[(alu22+3)];
    var val19 = data2[(alu22+1920)];
    var val20 = data2[(alu22+1921)];
    var val21 = data2[(alu22+1922)];
    var val22 = data2[(alu22+1923)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu22+3840)];
    var val24 = data2[(alu22+3841)];
    var val25 = data2[(alu22+3842)];
    var val26 = data2[(alu22+3843)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu22+5760)];
    var val28 = data2[(alu22+5761)];
    var val29 = data2[(alu22+5762)];
    var val30 = data2[(alu22+5763)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu22];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[alu3];
  var val33 = data3[alu4];
  var val34 = data3[alu5];
  var val35 = data3[alu2];
  var val36 = data4[alu7];
  var val37 = data4[alu8];
  var val38 = data4[alu9];
  var val39 = data4[alu10];
  var val40 = data4[alu11];
  var val41 = data4[alu12];
  var val42 = data4[alu13];
  var val43 = data4[alu14];
  var val44 = data4[alu15];
  var val45 = data4[alu16];
  var val46 = data4[alu17];
  var val47 = data4[alu18];
  var val48 = data4[alu19];
  var val49 = data4[alu20];
  var val50 = data4[alu21];
  var val51 = data4[alu6];
  var val52 = data5[alu3];
  data0[alu10] = (val32+acc1+val39+val52);
  data0[alu11] = (val32+acc5+val40+val52);
  data0[alu12] = (val32+acc9+val41+val52);
  data0[alu13] = (val32+acc13+val42+val52);
  var val53 = data5[alu4];
  data0[alu14] = (val33+acc2+val43+val53);
  data0[alu15] = (val33+acc6+val44+val53);
  data0[alu16] = (val33+acc10+val45+val53);
  data0[alu17] = (val33+acc14+val46+val53);
  var val54 = data5[alu5];
  data0[alu18] = (val34+acc3+val47+val54);
  data0[alu19] = (val34+acc7+val48+val54);
  data0[alu20] = (val34+acc11+val49+val54);
  data0[alu21] = (val34+acc15+val50+val54);
  var val55 = data5[alu2];
  data0[alu7] = (val35+acc4+val36+val55);
  data0[alu8] = (val35+acc8+val37+val55);
  data0[alu9] = (val35+acc12+val38+val55);
  data0[alu6] = (val35+acc0+val51+val55);
}`;

const E_2_160_16_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 160 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1<80);
  var alu1 = (alu0!=true);
  var alu2 = (gidx0<<6);
  var alu3 = (gidx1<<13);
  var alu4 = (lidx0<<10);
  var alu5 = (lidx1<<2);
  var alu6 = (alu3+(gidx2*655360)+alu2+alu4+alu5);
  var alu7 = (alu3+(gidx2*1310720)+alu2+alu4+alu5);
  var val0 = select(0.0f, data1[(alu6+1)], alu0);
  var val1 = select(0.0f, data1[(alu6+2)], alu0);
  var val2 = select(0.0f, data1[(alu6+3)], alu0);
  var val3 = select(0.0f, data1[alu6], alu0);
  var val4 = select(0.0f, data2[(alu6+-655360)], alu1);
  data0[alu7] = (val3+val4);
  var val5 = select(0.0f, data2[(alu6+-655359)], alu1);
  data0[(alu7+1)] = (val0+val5);
  var val6 = select(0.0f, data2[(alu6+-655358)], alu1);
  data0[(alu7+2)] = (val1+val6);
  var val7 = select(0.0f, data2[(alu6+-655357)], alu1);
  data0[(alu7+3)] = (val2+val7);
}`;

const E_2_160_16_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 160 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(gidx1/5));
  var alu2 = ((gidx1<<13)+(gidx2*1310720)+(gidx0<<6)+(lidx0<<10)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_160_2_16_8_1280_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 160 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = (gidx0<<9);
  var alu1 = (lidx0<<5);
  var alu2 = (lidx1<<2);
  var alu3 = (lidx1<7);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = (((gidx0+lidx0)<1)!=true);
  var alu6 = ((lidx0+(gidx0<<4))<31);
  var alu7 = (gidx1<<2);
  var alu8 = (alu7+1);
  var alu9 = (alu7+2);
  var alu10 = (alu7+3);
  var alu11 = ((gidx1<<12)+(gidx2*655360)+alu0+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1280; ridx0++) {
    var alu12 = ((gidx1*46080)+(ridx0*9));
    var alu13 = (alu0+alu1+(gidx2*1310720)+(ridx0<<10)+alu2);
    var val0 = select(0.0f, data1[(alu13+-33)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu13+-32)], alu5);
    var val2 = select(0.0f, data1[(alu13+-31)], alu5);
    var val3 = select(0.0f, data1[(alu13+-30)], alu5);
    var val4 = select(0.0f, data1[(alu13+-29)], alu5);
    var val5 = select(0.0f, data1[(alu13+-28)], (alu3&alu5));
    var val6 = select(0.0f, data1[(alu13+-1)], alu4);
    var val7 = data1[(alu13+1)];
    var val8 = data1[(alu13+2)];
    var val9 = data1[(alu13+3)];
    var val10 = select(0.0f, data1[(alu13+4)], alu3);
    var val11 = select(0.0f, data1[(alu13+31)], (alu6&alu4));
    var val12 = select(0.0f, data1[(alu13+32)], alu6);
    var val13 = select(0.0f, data1[(alu13+33)], alu6);
    var val14 = select(0.0f, data1[(alu13+34)], alu6);
    var val15 = select(0.0f, data1[(alu13+35)], alu6);
    var val16 = select(0.0f, data1[(alu13+36)], (alu3&alu6));
    var val17 = data1[alu13];
    var val18 = data2[(alu12+1)];
    var val19 = data2[(alu12+2)];
    var val20 = data2[(alu12+3)];
    var val21 = data2[(alu12+4)];
    var val22 = data2[(alu12+5)];
    var val23 = data2[(alu12+6)];
    var val24 = data2[(alu12+7)];
    var val25 = data2[(alu12+8)];
    var val26 = data2[(alu12+11520)];
    var val27 = data2[(alu12+11521)];
    var val28 = data2[(alu12+11522)];
    var val29 = data2[(alu12+11523)];
    var val30 = data2[(alu12+11524)];
    var val31 = data2[(alu12+11525)];
    var val32 = data2[(alu12+11526)];
    var val33 = data2[(alu12+11527)];
    var val34 = data2[(alu12+11528)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu12+23040)];
    var val36 = data2[(alu12+23041)];
    var val37 = data2[(alu12+23042)];
    var val38 = data2[(alu12+23043)];
    var val39 = data2[(alu12+23044)];
    var val40 = data2[(alu12+23045)];
    var val41 = data2[(alu12+23046)];
    var val42 = data2[(alu12+23047)];
    var val43 = data2[(alu12+23048)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu12+34560)];
    var val45 = data2[(alu12+34561)];
    var val46 = data2[(alu12+34562)];
    var val47 = data2[(alu12+34563)];
    var val48 = data2[(alu12+34564)];
    var val49 = data2[(alu12+34565)];
    var val50 = data2[(alu12+34566)];
    var val51 = data2[(alu12+34567)];
    var val52 = data2[(alu12+34568)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu12];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[alu8];
  var val55 = data3[alu9];
  var val56 = data3[alu10];
  var val57 = data3[alu7];
  var val58 = data4[alu8];
  data0[(alu11+1024)] = (val58+val54+acc1);
  data0[(alu11+1025)] = (val58+val54+acc5);
  data0[(alu11+1026)] = (val58+val54+acc9);
  data0[(alu11+1027)] = (val58+val54+acc13);
  var val59 = data4[alu9];
  data0[(alu11+2048)] = (val59+val55+acc2);
  data0[(alu11+2049)] = (val59+val55+acc6);
  data0[(alu11+2050)] = (val59+val55+acc10);
  data0[(alu11+2051)] = (val59+val55+acc14);
  var val60 = data4[alu10];
  data0[(alu11+3072)] = (val60+val56+acc3);
  data0[(alu11+3073)] = (val60+val56+acc7);
  data0[(alu11+3074)] = (val60+val56+acc11);
  data0[(alu11+3075)] = (val60+val56+acc15);
  var val61 = data4[alu7];
  data0[(alu11+1)] = (val61+val57+acc4);
  data0[(alu11+2)] = (val61+val57+acc8);
  data0[(alu11+3)] = (val61+val57+acc12);
  data0[alu11] = (val61+val57+acc0);
}`;

const r_2_20_16_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 20 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1<<5)+(lidx0<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = ((gidx1<<15)+(gidx2*655360)+alu0+(lidx0<<12)+alu1);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+1024);
  var alu11 = (alu6+1025);
  var alu12 = (alu6+1026);
  var alu13 = (alu6+1027);
  var alu14 = (alu6+2048);
  var alu15 = (alu6+2049);
  var alu16 = (alu6+2050);
  var alu17 = (alu6+2051);
  var alu18 = (alu6+3072);
  var alu19 = (alu6+3073);
  var alu20 = (alu6+3074);
  var alu21 = (alu6+3075);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu22 = ((gidx1*40960)+(lidx0*5120)+(ridx0<<2));
    var alu23 = (alu0+(gidx2*1310720)+alu1+(ridx0<<12));
    var val0 = data1[(alu23+1)];
    var val1 = data1[(alu23+2)];
    var val2 = data1[(alu23+3)];
    var val3 = data1[(alu23+1024)];
    var val4 = data1[(alu23+1025)];
    var val5 = data1[(alu23+1026)];
    var val6 = data1[(alu23+1027)];
    var val7 = data1[(alu23+2048)];
    var val8 = data1[(alu23+2049)];
    var val9 = data1[(alu23+2050)];
    var val10 = data1[(alu23+2051)];
    var val11 = data1[(alu23+3072)];
    var val12 = data1[(alu23+3073)];
    var val13 = data1[(alu23+3074)];
    var val14 = data1[(alu23+3075)];
    var val15 = data1[alu23];
    var val16 = data2[(alu22+1)];
    var val17 = data2[(alu22+2)];
    var val18 = data2[(alu22+3)];
    var val19 = data2[(alu22+1280)];
    var val20 = data2[(alu22+1281)];
    var val21 = data2[(alu22+1282)];
    var val22 = data2[(alu22+1283)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu22+2560)];
    var val24 = data2[(alu22+2561)];
    var val25 = data2[(alu22+2562)];
    var val26 = data2[(alu22+2563)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu22+3840)];
    var val28 = data2[(alu22+3841)];
    var val29 = data2[(alu22+3842)];
    var val30 = data2[(alu22+3843)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu22];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[alu3];
  var val33 = data3[alu4];
  var val34 = data3[alu5];
  var val35 = data3[alu2];
  var val36 = data4[alu7];
  var val37 = data4[alu8];
  var val38 = data4[alu9];
  var val39 = data4[alu10];
  var val40 = data4[alu11];
  var val41 = data4[alu12];
  var val42 = data4[alu13];
  var val43 = data4[alu14];
  var val44 = data4[alu15];
  var val45 = data4[alu16];
  var val46 = data4[alu17];
  var val47 = data4[alu18];
  var val48 = data4[alu19];
  var val49 = data4[alu20];
  var val50 = data4[alu21];
  var val51 = data4[alu6];
  var val52 = data5[alu3];
  data0[alu10] = (val32+acc1+val39+val52);
  data0[alu11] = (val32+acc5+val40+val52);
  data0[alu12] = (val32+acc9+val41+val52);
  data0[alu13] = (val32+acc13+val42+val52);
  var val53 = data5[alu4];
  data0[alu14] = (val33+acc2+val43+val53);
  data0[alu15] = (val33+acc6+val44+val53);
  data0[alu16] = (val33+acc10+val45+val53);
  data0[alu17] = (val33+acc14+val46+val53);
  var val54 = data5[alu5];
  data0[alu18] = (val34+acc3+val47+val54);
  data0[alu19] = (val34+acc7+val48+val54);
  data0[alu20] = (val34+acc11+val49+val54);
  data0[alu21] = (val34+acc15+val50+val54);
  var val55 = data5[alu2];
  data0[alu7] = (val35+acc4+val36+val55);
  data0[alu8] = (val35+acc8+val37+val55);
  data0[alu9] = (val35+acc12+val38+val55);
  data0[alu6] = (val35+acc0+val51+val55);
}`;

const E_2_120_16_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 120 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1<80);
  var alu1 = (alu0!=true);
  var alu2 = (gidx0<<6);
  var alu3 = (gidx1<<13);
  var alu4 = (lidx0<<10);
  var alu5 = (lidx1<<2);
  var alu6 = (alu3+(gidx2*327680)+alu2+alu4+alu5);
  var alu7 = (alu3+(gidx2*655360)+alu2+alu4+alu5);
  var alu8 = (alu3+(gidx2*983040)+alu2+alu4+alu5);
  var val0 = select(0.0f, data1[(alu7+1)], alu0);
  var val1 = select(0.0f, data1[(alu7+2)], alu0);
  var val2 = select(0.0f, data1[(alu7+3)], alu0);
  var val3 = select(0.0f, data1[alu7], alu0);
  var val4 = select(0.0f, data2[(alu6+-655360)], alu1);
  data0[alu8] = (val3+val4);
  var val5 = select(0.0f, data2[(alu6+-655359)], alu1);
  data0[(alu8+1)] = (val0+val5);
  var val6 = select(0.0f, data2[(alu6+-655358)], alu1);
  data0[(alu8+2)] = (val1+val6);
  var val7 = select(0.0f, data2[(alu6+-655357)], alu1);
  data0[(alu8+3)] = (val2+val7);
}`;

const r_64_16_1920 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1920; ridx0++) {
    var val0 = data1[((gidx0*30720)+(lidx0*1920)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*3.255208503105678e-05f);
  }
}`;

const r_64_16_1920n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var val0 = data2[gidx0];
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1920; ridx0++) {
    var val1 = data1[((gidx0*30720)+(lidx0*1920)+ridx0)];
    var alu0 = (val1-val0);
    acc0 = (acc0+(alu0*alu0));
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val2 = temp0[ridx1];
      acc1 = (acc1+val2);
    }
    data0[gidx0] = sqrt((1/((acc1*3.255208503105678e-05f)+1e-05f)));
  }
}`;

const E_2_120_16_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 120 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(alu0/30));
  var alu2 = ((gidx1<<13)+(gidx2*983040)+(gidx0<<6)+(lidx0<<10)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_160_2_16_8_960_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 160 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 16 */
  var lidx1 = i32(lindex.y); /* 8 */
  var alu0 = (gidx0<<9);
  var alu1 = (lidx0<<5);
  var alu2 = (lidx1<<2);
  var alu3 = (lidx1<7);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = (((gidx0+lidx0)<1)!=true);
  var alu6 = ((lidx0+(gidx0<<4))<31);
  var alu7 = (gidx1<<2);
  var alu8 = (alu7+1);
  var alu9 = (alu7+2);
  var alu10 = (alu7+3);
  var alu11 = ((gidx1<<12)+(gidx2*655360)+alu0+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 960; ridx0++) {
    var alu12 = ((gidx1*34560)+(ridx0*9));
    var alu13 = (alu0+alu1+(gidx2*983040)+(ridx0<<10)+alu2);
    var val0 = select(0.0f, data1[(alu13+-33)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu13+-32)], alu5);
    var val2 = select(0.0f, data1[(alu13+-31)], alu5);
    var val3 = select(0.0f, data1[(alu13+-30)], alu5);
    var val4 = select(0.0f, data1[(alu13+-29)], alu5);
    var val5 = select(0.0f, data1[(alu13+-28)], (alu3&alu5));
    var val6 = select(0.0f, data1[(alu13+-1)], alu4);
    var val7 = data1[(alu13+1)];
    var val8 = data1[(alu13+2)];
    var val9 = data1[(alu13+3)];
    var val10 = select(0.0f, data1[(alu13+4)], alu3);
    var val11 = select(0.0f, data1[(alu13+31)], (alu6&alu4));
    var val12 = select(0.0f, data1[(alu13+32)], alu6);
    var val13 = select(0.0f, data1[(alu13+33)], alu6);
    var val14 = select(0.0f, data1[(alu13+34)], alu6);
    var val15 = select(0.0f, data1[(alu13+35)], alu6);
    var val16 = select(0.0f, data1[(alu13+36)], (alu3&alu6));
    var val17 = data1[alu13];
    var val18 = data2[(alu12+1)];
    var val19 = data2[(alu12+2)];
    var val20 = data2[(alu12+3)];
    var val21 = data2[(alu12+4)];
    var val22 = data2[(alu12+5)];
    var val23 = data2[(alu12+6)];
    var val24 = data2[(alu12+7)];
    var val25 = data2[(alu12+8)];
    var val26 = data2[(alu12+8640)];
    var val27 = data2[(alu12+8641)];
    var val28 = data2[(alu12+8642)];
    var val29 = data2[(alu12+8643)];
    var val30 = data2[(alu12+8644)];
    var val31 = data2[(alu12+8645)];
    var val32 = data2[(alu12+8646)];
    var val33 = data2[(alu12+8647)];
    var val34 = data2[(alu12+8648)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu12+17280)];
    var val36 = data2[(alu12+17281)];
    var val37 = data2[(alu12+17282)];
    var val38 = data2[(alu12+17283)];
    var val39 = data2[(alu12+17284)];
    var val40 = data2[(alu12+17285)];
    var val41 = data2[(alu12+17286)];
    var val42 = data2[(alu12+17287)];
    var val43 = data2[(alu12+17288)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu12+25920)];
    var val45 = data2[(alu12+25921)];
    var val46 = data2[(alu12+25922)];
    var val47 = data2[(alu12+25923)];
    var val48 = data2[(alu12+25924)];
    var val49 = data2[(alu12+25925)];
    var val50 = data2[(alu12+25926)];
    var val51 = data2[(alu12+25927)];
    var val52 = data2[(alu12+25928)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu12];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[alu8];
  var val55 = data3[alu9];
  var val56 = data3[alu10];
  var val57 = data3[alu7];
  var val58 = data4[alu8];
  data0[(alu11+1024)] = (val58+val54+acc1);
  data0[(alu11+1025)] = (val58+val54+acc5);
  data0[(alu11+1026)] = (val58+val54+acc9);
  data0[(alu11+1027)] = (val58+val54+acc13);
  var val59 = data4[alu9];
  data0[(alu11+2048)] = (val59+val55+acc2);
  data0[(alu11+2049)] = (val59+val55+acc6);
  data0[(alu11+2050)] = (val59+val55+acc10);
  data0[(alu11+2051)] = (val59+val55+acc14);
  var val60 = data4[alu10];
  data0[(alu11+3072)] = (val60+val56+acc3);
  data0[(alu11+3073)] = (val60+val56+acc7);
  data0[(alu11+3074)] = (val60+val56+acc11);
  data0[(alu11+3075)] = (val60+val56+acc15);
  var val61 = data4[alu7];
  data0[(alu11+1)] = (val61+val57+acc4);
  data0[(alu11+2)] = (val61+val57+acc8);
  data0[(alu11+3)] = (val61+val57+acc12);
  data0[alu11] = (val61+val57+acc0);
}`;

const r_2_20_16_8_16_240_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 16 */
  var gidx1 = i32(gindex.y); /* 20 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1<<5)+(lidx0<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = ((gidx1<<15)+(gidx2*655360)+alu0+(lidx0<<12)+alu1);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+1024);
  var alu11 = (alu6+1025);
  var alu12 = (alu6+1026);
  var alu13 = (alu6+1027);
  var alu14 = (alu6+2048);
  var alu15 = (alu6+2049);
  var alu16 = (alu6+2050);
  var alu17 = (alu6+2051);
  var alu18 = (alu6+3072);
  var alu19 = (alu6+3073);
  var alu20 = (alu6+3074);
  var alu21 = (alu6+3075);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 240; ridx0++) {
    var alu22 = ((gidx1*30720)+(lidx0*3840)+(ridx0<<2));
    var alu23 = (alu0+(gidx2*983040)+alu1+(ridx0<<12));
    var val0 = data1[(alu23+1)];
    var val1 = data1[(alu23+2)];
    var val2 = data1[(alu23+3)];
    var val3 = data1[(alu23+1024)];
    var val4 = data1[(alu23+1025)];
    var val5 = data1[(alu23+1026)];
    var val6 = data1[(alu23+1027)];
    var val7 = data1[(alu23+2048)];
    var val8 = data1[(alu23+2049)];
    var val9 = data1[(alu23+2050)];
    var val10 = data1[(alu23+2051)];
    var val11 = data1[(alu23+3072)];
    var val12 = data1[(alu23+3073)];
    var val13 = data1[(alu23+3074)];
    var val14 = data1[(alu23+3075)];
    var val15 = data1[alu23];
    var val16 = data2[(alu22+1)];
    var val17 = data2[(alu22+2)];
    var val18 = data2[(alu22+3)];
    var val19 = data2[(alu22+960)];
    var val20 = data2[(alu22+961)];
    var val21 = data2[(alu22+962)];
    var val22 = data2[(alu22+963)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu22+1920)];
    var val24 = data2[(alu22+1921)];
    var val25 = data2[(alu22+1922)];
    var val26 = data2[(alu22+1923)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu22+2880)];
    var val28 = data2[(alu22+2881)];
    var val29 = data2[(alu22+2882)];
    var val30 = data2[(alu22+2883)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu22];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[alu3];
  var val33 = data3[alu4];
  var val34 = data3[alu5];
  var val35 = data3[alu2];
  var val36 = data4[alu7];
  var val37 = data4[alu8];
  var val38 = data4[alu9];
  var val39 = data4[alu10];
  var val40 = data4[alu11];
  var val41 = data4[alu12];
  var val42 = data4[alu13];
  var val43 = data4[alu14];
  var val44 = data4[alu15];
  var val45 = data4[alu16];
  var val46 = data4[alu17];
  var val47 = data4[alu18];
  var val48 = data4[alu19];
  var val49 = data4[alu20];
  var val50 = data4[alu21];
  var val51 = data4[alu6];
  var val52 = data5[alu3];
  data0[alu10] = (val32+acc1+val39+val52);
  data0[alu11] = (val32+acc5+val40+val52);
  data0[alu12] = (val32+acc9+val41+val52);
  data0[alu13] = (val32+acc13+val42+val52);
  var val53 = data5[alu4];
  data0[alu14] = (val33+acc2+val43+val53);
  data0[alu15] = (val33+acc6+val44+val53);
  data0[alu16] = (val33+acc10+val45+val53);
  data0[alu17] = (val33+acc14+val46+val53);
  var val54 = data5[alu5];
  data0[alu18] = (val34+acc3+val47+val54);
  data0[alu19] = (val34+acc7+val48+val54);
  data0[alu20] = (val34+acc11+val49+val54);
  data0[alu21] = (val34+acc15+val50+val54);
  var val55 = data5[alu2];
  data0[alu7] = (val35+acc4+val36+val55);
  data0[alu8] = (val35+acc8+val37+val55);
  data0[alu9] = (val35+acc12+val38+val55);
  data0[alu6] = (val35+acc0+val51+val55);
}`;

const r_2_160_8_8_16_640_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 160 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx1<<1);
  var alu1 = ((lidx0+1)>>1);
  var alu2 = (lidx1<15);
  var alu3 = ((lidx1<1)!=true);
  var alu4 = (((gidx0+lidx0)<1)!=true);
  var alu5 = ((lidx0+(gidx0<<3))<63);
  var alu6 = (gidx1<<2);
  var alu7 = ((gidx1<<14)+(gidx2*2621440)+(gidx0<<9)+(lidx0<<6)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 640; ridx0++) {
    var alu8 = ((gidx1*23040)+(ridx0*9));
    var alu9 = (alu0+((((gidx0<<2)+(gidx2*20480)+(ridx0<<5)+alu1)%40960)<<5));
    var alu10 = ((gidx0<<7)+(gidx2*655360)+(ridx0<<10));
    var alu11 = (alu10+((lidx0>>1)<<5)+alu0);
    var alu12 = (alu10+(alu1<<5)+alu0);
    var val0 = select(0.0f, data1[(alu11+-1)], alu3);
    var val1 = data1[(alu11+1)];
    var val2 = select(0.0f, data1[(alu11+2)], alu2);
    var val3 = select(0.0f, data1[(alu12+-33)], (alu3&alu4));
    var val4 = select(0.0f, data1[(alu12+-32)], alu4);
    var val5 = select(0.0f, data1[(alu12+-31)], alu4);
    var val6 = select(0.0f, data1[(alu12+-30)], (alu2&alu4));
    var val7 = data1[alu11];
    var val8 = select(0.0f, data1[(alu9+-1)], (alu5&alu3));
    var val9 = select(0.0f, data1[(alu9+1)], alu5);
    var val10 = select(0.0f, data1[(alu9+2)], (alu2&alu5));
    var val11 = select(0.0f, data1[alu9], alu5);
    var val12 = data2[(alu8+1)];
    var alu13 = (val4*val12);
    var alu14 = (val5*val12);
    var val13 = data2[(alu8+2)];
    var alu15 = (val5*val13);
    var val14 = data2[(alu8+3)];
    var val15 = data2[(alu8+4)];
    var alu16 = (val1*val15);
    var alu17 = (val7*val15);
    var val16 = data2[(alu8+5)];
    var alu18 = (val1*val16);
    var val17 = data2[(alu8+6)];
    var val18 = data2[(alu8+7)];
    var alu19 = (val9*val18);
    var alu20 = (val11*val18);
    var val19 = data2[(alu8+8)];
    var alu21 = (val9*val19);
    var val20 = data2[(alu8+5760)];
    var val21 = data2[(alu8+5761)];
    var alu22 = (val4*val21);
    var alu23 = (val5*val21);
    var val22 = data2[(alu8+5762)];
    var alu24 = (val5*val22);
    var val23 = data2[(alu8+5763)];
    var val24 = data2[(alu8+5764)];
    var alu25 = (val1*val24);
    var alu26 = (val7*val24);
    var val25 = data2[(alu8+5765)];
    var alu27 = (val1*val25);
    var val26 = data2[(alu8+5766)];
    var alu28 = ((val4*val20)+(val7*val23)+(val11*val26));
    var val27 = data2[(alu8+5767)];
    var alu29 = (val9*val27);
    var alu30 = (val11*val27);
    var val28 = data2[(alu8+5768)];
    var alu31 = (val9*val28);
    acc1 = (acc1+(val0*val23)+(val3*val20)+(val8*val26)+alu22+alu26+alu30+(val4*val22)+(val7*val25)+(val11*val28));
    acc5 = (acc5+alu28+alu22+alu26+alu30+alu24+alu27+alu31);
    acc9 = (acc9+alu28+alu23+alu25+alu29+alu24+alu27+alu31);
    acc13 = (acc13+(val1*val23)+(val5*val20)+(val9*val26)+alu23+alu25+alu29+(val6*val22)+(val2*val25)+(val10*val28));
    var val29 = data2[(alu8+11520)];
    var val30 = data2[(alu8+11521)];
    var alu36 = (val4*val30);
    var alu37 = (val5*val30);
    var val31 = data2[(alu8+11522)];
    var alu38 = (val5*val31);
    var val32 = data2[(alu8+11523)];
    var val33 = data2[(alu8+11524)];
    var alu39 = (val1*val33);
    var alu40 = (val7*val33);
    var val34 = data2[(alu8+11525)];
    var alu41 = (val1*val34);
    var val35 = data2[(alu8+11526)];
    var alu42 = ((val4*val29)+(val7*val32)+(val11*val35));
    var val36 = data2[(alu8+11527)];
    var alu43 = (val9*val36);
    var alu44 = (val11*val36);
    var val37 = data2[(alu8+11528)];
    var alu45 = (val9*val37);
    acc2 = (acc2+(val0*val32)+(val3*val29)+(val8*val35)+alu36+alu40+alu44+(val4*val31)+(val7*val34)+(val11*val37));
    acc6 = (acc6+alu42+alu36+alu40+alu44+alu38+alu41+alu45);
    acc10 = (acc10+alu42+alu37+alu39+alu43+alu38+alu41+alu45);
    acc14 = (acc14+(val1*val32)+(val5*val29)+(val9*val35)+alu37+alu39+alu43+(val6*val31)+(val2*val34)+(val10*val37));
    var val38 = data2[(alu8+17280)];
    var val39 = data2[(alu8+17281)];
    var alu50 = (val4*val39);
    var alu51 = (val5*val39);
    var val40 = data2[(alu8+17282)];
    var alu52 = (val5*val40);
    var val41 = data2[(alu8+17283)];
    var val42 = data2[(alu8+17284)];
    var alu53 = (val1*val42);
    var alu54 = (val7*val42);
    var val43 = data2[(alu8+17285)];
    var alu55 = (val1*val43);
    var val44 = data2[(alu8+17286)];
    var alu56 = ((val4*val38)+(val7*val41)+(val11*val44));
    var val45 = data2[(alu8+17287)];
    var alu57 = (val9*val45);
    var alu58 = (val11*val45);
    var val46 = data2[(alu8+17288)];
    var alu59 = (val9*val46);
    acc3 = (acc3+(val0*val41)+(val3*val38)+(val8*val44)+alu50+alu54+alu58+(val4*val40)+(val7*val43)+(val11*val46));
    acc7 = (acc7+alu56+alu50+alu54+alu58+alu52+alu55+alu59);
    acc11 = (acc11+alu56+alu51+alu53+alu57+alu52+alu55+alu59);
    acc15 = (acc15+(val1*val41)+(val5*val38)+(val9*val44)+alu51+alu53+alu57+(val6*val40)+(val2*val43)+(val10*val46));
    var val47 = data2[alu8];
    var alu64 = ((val4*val47)+(val7*val14)+(val11*val17));
    acc0 = (acc0+(val0*val14)+(val3*val47)+(val8*val17)+alu13+alu17+alu20+(val4*val13)+(val7*val16)+(val11*val19));
    acc4 = (acc4+alu64+alu13+alu17+alu20+alu15+alu18+alu21);
    acc8 = (acc8+alu64+alu14+alu16+alu19+alu15+alu18+alu21);
    acc12 = (acc12+(val1*val14)+(val5*val47)+(val9*val17)+alu14+alu16+alu19+(val6*val13)+(val2*val16)+(val10*val19));
  }
  var val48 = data3[(alu6+1)];
  data0[(alu7+4096)] = (val48+acc1);
  data0[(alu7+4097)] = (val48+acc5);
  data0[(alu7+4098)] = (val48+acc9);
  data0[(alu7+4099)] = (val48+acc13);
  var val49 = data3[(alu6+2)];
  data0[(alu7+8192)] = (val49+acc2);
  data0[(alu7+8193)] = (val49+acc6);
  data0[(alu7+8194)] = (val49+acc10);
  data0[(alu7+8195)] = (val49+acc14);
  var val50 = data3[(alu6+3)];
  data0[(alu7+12288)] = (val50+acc3);
  data0[(alu7+12289)] = (val50+acc7);
  data0[(alu7+12290)] = (val50+acc11);
  data0[(alu7+12291)] = (val50+acc15);
  var val51 = data3[alu6];
  data0[(alu7+1)] = (val51+acc4);
  data0[(alu7+2)] = (val51+acc8);
  data0[(alu7+3)] = (val51+acc12);
  data0[alu7] = (val51+acc0);
}`;

const E_2_120_64_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 120 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1<80);
  var alu1 = (alu0!=true);
  var alu2 = (gidx0<<6);
  var alu3 = (gidx1<<15);
  var alu4 = (lidx0<<12);
  var alu5 = (lidx1<<2);
  var alu6 = (alu3+(gidx2*1310720)+alu2+alu4+alu5);
  var alu7 = (alu3+(gidx2*2621440)+alu2+alu4+alu5);
  var alu8 = (alu3+(gidx2*3932160)+alu2+alu4+alu5);
  var val0 = select(0.0f, data1[(alu7+1)], alu0);
  var val1 = select(0.0f, data1[(alu7+2)], alu0);
  var val2 = select(0.0f, data1[(alu7+3)], alu0);
  var val3 = select(0.0f, data1[alu7], alu0);
  var val4 = select(0.0f, data2[(alu6+-2621440)], alu1);
  data0[alu8] = (val3+val4);
  var val5 = select(0.0f, data2[(alu6+-2621439)], alu1);
  data0[(alu8+1)] = (val0+val5);
  var val6 = select(0.0f, data2[(alu6+-2621438)], alu1);
  data0[(alu8+2)] = (val1+val6);
  var val7 = select(0.0f, data2[(alu6+-2621437)], alu1);
  data0[(alu8+3)] = (val2+val7);
}`;

const r_512_32_120_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 512 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 120; ridx0++) {
    var alu0 = ((gidx0*15360)+(lidx0*480)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    acc0 = (acc0+val2+val1+val0+val3);
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_64_16_16n4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 16; ridx0++) {
    var val0 = data1[((gidx0<<8)+(lidx0<<4)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*8.138021257764194e-06f);
  }
}`;

const r_8_4_8_16_120_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 8 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1<<11)+(lidx0<<8)+(lidx1<<2));
  var val0 = data2[(lidx0+(gidx1<<3))];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 120; ridx0++) {
    var alu1 = ((gidx0*30720)+(gidx1*983040)+(lidx0*122880)+(lidx1*1920)+(ridx0<<2));
    var val1 = data1[(alu1+1)];
    var alu2 = (val1-val0);
    var val2 = data1[(alu1+2)];
    var alu3 = (val2-val0);
    var val3 = data1[(alu1+3)];
    var alu4 = (val3-val0);
    var val4 = data1[(alu1+480)];
    var alu5 = (val4-val0);
    var val5 = data1[(alu1+481)];
    var alu6 = (val5-val0);
    var val6 = data1[(alu1+482)];
    var alu7 = (val6-val0);
    var val7 = data1[(alu1+483)];
    var alu8 = (val7-val0);
    acc1 = (acc1+(alu5*alu5)+(alu6*alu6)+(alu7*alu7)+(alu8*alu8));
    var val8 = data1[(alu1+960)];
    var alu10 = (val8-val0);
    var val9 = data1[(alu1+961)];
    var alu11 = (val9-val0);
    var val10 = data1[(alu1+962)];
    var alu12 = (val10-val0);
    var val11 = data1[(alu1+963)];
    var alu13 = (val11-val0);
    acc2 = (acc2+(alu10*alu10)+(alu11*alu11)+(alu12*alu12)+(alu13*alu13));
    var val12 = data1[(alu1+1440)];
    var alu15 = (val12-val0);
    var val13 = data1[(alu1+1441)];
    var alu16 = (val13-val0);
    var val14 = data1[(alu1+1442)];
    var alu17 = (val14-val0);
    var val15 = data1[(alu1+1443)];
    var alu18 = (val15-val0);
    acc3 = (acc3+(alu15*alu15)+(alu16*alu16)+(alu17*alu17)+(alu18*alu18));
    var val16 = data1[alu1];
    var alu20 = (val16-val0);
    acc0 = (acc0+(alu2*alu2)+(alu20*alu20)+(alu3*alu3)+(alu4*alu4));
  }
  data0[(alu0+1)] = acc1;
  data0[(alu0+2)] = acc2;
  data0[(alu0+3)] = acc3;
  data0[alu0] = acc0;
}`;

const r_64_16_16n5 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 16; ridx0++) {
    var val0 = data1[((gidx0<<8)+(lidx0<<4)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = sqrt((1/((acc1*8.138021257764194e-06f)+1e-05f)));
  }
}`;

const E_2_120_64_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 120 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(alu0/30));
  var alu2 = ((gidx1<<15)+(gidx2*3932160)+(gidx0<<6)+(lidx0<<12)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_80_8_8_16_960_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 80 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<9);
  var alu1 = (lidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = (lidx1<15);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = (((gidx0+lidx0)<1)!=true);
  var alu6 = ((lidx0+(gidx0<<3))<63);
  var alu7 = (gidx1<<2);
  var alu8 = (alu7+1);
  var alu9 = (alu7+2);
  var alu10 = (alu7+3);
  var alu11 = ((gidx1<<14)+(gidx2*1310720)+alu0+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 960; ridx0++) {
    var alu12 = ((gidx1*34560)+(ridx0*9));
    var alu13 = (alu0+alu1+(gidx2*3932160)+(ridx0<<12)+alu2);
    var val0 = select(0.0f, data1[(alu13+-65)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu13+-64)], alu5);
    var val2 = select(0.0f, data1[(alu13+-63)], alu5);
    var val3 = select(0.0f, data1[(alu13+-62)], alu5);
    var val4 = select(0.0f, data1[(alu13+-61)], alu5);
    var val5 = select(0.0f, data1[(alu13+-60)], (alu3&alu5));
    var val6 = select(0.0f, data1[(alu13+-1)], alu4);
    var val7 = data1[(alu13+1)];
    var val8 = data1[(alu13+2)];
    var val9 = data1[(alu13+3)];
    var val10 = select(0.0f, data1[(alu13+4)], alu3);
    var val11 = select(0.0f, data1[(alu13+63)], (alu6&alu4));
    var val12 = select(0.0f, data1[(alu13+64)], alu6);
    var val13 = select(0.0f, data1[(alu13+65)], alu6);
    var val14 = select(0.0f, data1[(alu13+66)], alu6);
    var val15 = select(0.0f, data1[(alu13+67)], alu6);
    var val16 = select(0.0f, data1[(alu13+68)], (alu3&alu6));
    var val17 = data1[alu13];
    var val18 = data2[(alu12+1)];
    var val19 = data2[(alu12+2)];
    var val20 = data2[(alu12+3)];
    var val21 = data2[(alu12+4)];
    var val22 = data2[(alu12+5)];
    var val23 = data2[(alu12+6)];
    var val24 = data2[(alu12+7)];
    var val25 = data2[(alu12+8)];
    var val26 = data2[(alu12+8640)];
    var val27 = data2[(alu12+8641)];
    var val28 = data2[(alu12+8642)];
    var val29 = data2[(alu12+8643)];
    var val30 = data2[(alu12+8644)];
    var val31 = data2[(alu12+8645)];
    var val32 = data2[(alu12+8646)];
    var val33 = data2[(alu12+8647)];
    var val34 = data2[(alu12+8648)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu12+17280)];
    var val36 = data2[(alu12+17281)];
    var val37 = data2[(alu12+17282)];
    var val38 = data2[(alu12+17283)];
    var val39 = data2[(alu12+17284)];
    var val40 = data2[(alu12+17285)];
    var val41 = data2[(alu12+17286)];
    var val42 = data2[(alu12+17287)];
    var val43 = data2[(alu12+17288)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu12+25920)];
    var val45 = data2[(alu12+25921)];
    var val46 = data2[(alu12+25922)];
    var val47 = data2[(alu12+25923)];
    var val48 = data2[(alu12+25924)];
    var val49 = data2[(alu12+25925)];
    var val50 = data2[(alu12+25926)];
    var val51 = data2[(alu12+25927)];
    var val52 = data2[(alu12+25928)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu12];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[alu8];
  var val55 = data3[alu9];
  var val56 = data3[alu10];
  var val57 = data3[alu7];
  var val58 = data4[alu8];
  data0[(alu11+4096)] = (val58+val54+acc1);
  data0[(alu11+4097)] = (val58+val54+acc5);
  data0[(alu11+4098)] = (val58+val54+acc9);
  data0[(alu11+4099)] = (val58+val54+acc13);
  var val59 = data4[alu9];
  data0[(alu11+8192)] = (val59+val55+acc2);
  data0[(alu11+8193)] = (val59+val55+acc6);
  data0[(alu11+8194)] = (val59+val55+acc10);
  data0[(alu11+8195)] = (val59+val55+acc14);
  var val60 = data4[alu10];
  data0[(alu11+12288)] = (val60+val56+acc3);
  data0[(alu11+12289)] = (val60+val56+acc7);
  data0[(alu11+12290)] = (val60+val56+acc11);
  data0[(alu11+12291)] = (val60+val56+acc15);
  var val61 = data4[alu7];
  data0[(alu11+1)] = (val61+val57+acc4);
  data0[(alu11+2)] = (val61+val57+acc8);
  data0[(alu11+3)] = (val61+val57+acc12);
  data0[alu11] = (val61+val57+acc0);
}`;

const r_2_80_8_8_16_320_4_4_3_3n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 80 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx2*1310720);
  var alu1 = (gidx0<<9);
  var alu2 = (lidx0<<6);
  var alu3 = (lidx1<<2);
  var alu4 = (lidx1<15);
  var alu5 = ((lidx1<1)!=true);
  var alu6 = (((gidx0+lidx0)<1)!=true);
  var alu7 = ((lidx0+(gidx0<<3))<63);
  var alu8 = ((gidx1<<14)+alu0+alu1+alu2+alu3);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu9 = ((gidx1*11520)+(ridx0*9));
    var alu10 = (alu1+alu2+alu0+(ridx0<<12)+alu3);
    var val0 = select(0.0f, data1[(alu10+-65)], (alu5&alu6));
    var val1 = select(0.0f, data1[(alu10+-64)], alu6);
    var val2 = select(0.0f, data1[(alu10+-63)], alu6);
    var val3 = select(0.0f, data1[(alu10+-62)], alu6);
    var val4 = select(0.0f, data1[(alu10+-61)], alu6);
    var val5 = select(0.0f, data1[(alu10+-60)], (alu4&alu6));
    var val6 = select(0.0f, data1[(alu10+-1)], alu5);
    var val7 = data1[(alu10+1)];
    var val8 = data1[(alu10+2)];
    var val9 = data1[(alu10+3)];
    var val10 = select(0.0f, data1[(alu10+4)], alu4);
    var val11 = select(0.0f, data1[(alu10+63)], (alu7&alu5));
    var val12 = select(0.0f, data1[(alu10+64)], alu7);
    var val13 = select(0.0f, data1[(alu10+65)], alu7);
    var val14 = select(0.0f, data1[(alu10+66)], alu7);
    var val15 = select(0.0f, data1[(alu10+67)], alu7);
    var val16 = select(0.0f, data1[(alu10+68)], (alu4&alu7));
    var val17 = data1[alu10];
    var val18 = data2[(alu9+1)];
    var val19 = data2[(alu9+2)];
    var val20 = data2[(alu9+3)];
    var val21 = data2[(alu9+4)];
    var val22 = data2[(alu9+5)];
    var val23 = data2[(alu9+6)];
    var val24 = data2[(alu9+7)];
    var val25 = data2[(alu9+8)];
    var val26 = data2[(alu9+2880)];
    var val27 = data2[(alu9+2881)];
    var val28 = data2[(alu9+2882)];
    var val29 = data2[(alu9+2883)];
    var val30 = data2[(alu9+2884)];
    var val31 = data2[(alu9+2885)];
    var val32 = data2[(alu9+2886)];
    var val33 = data2[(alu9+2887)];
    var val34 = data2[(alu9+2888)];
    acc4 = (acc4+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc6 = (acc6+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc7 = (acc7+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu9+5760)];
    var val36 = data2[(alu9+5761)];
    var val37 = data2[(alu9+5762)];
    var val38 = data2[(alu9+5763)];
    var val39 = data2[(alu9+5764)];
    var val40 = data2[(alu9+5765)];
    var val41 = data2[(alu9+5766)];
    var val42 = data2[(alu9+5767)];
    var val43 = data2[(alu9+5768)];
    acc8 = (acc8+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc9 = (acc9+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc11 = (acc11+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu9+8640)];
    var val45 = data2[(alu9+8641)];
    var val46 = data2[(alu9+8642)];
    var val47 = data2[(alu9+8643)];
    var val48 = data2[(alu9+8644)];
    var val49 = data2[(alu9+8645)];
    var val50 = data2[(alu9+8646)];
    var val51 = data2[(alu9+8647)];
    var val52 = data2[(alu9+8648)];
    acc12 = (acc12+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc13 = (acc13+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc14 = (acc14+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu9];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc1 = (acc1+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc2 = (acc2+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc3 = (acc3+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  data0[(alu8+1)] = acc1;
  data0[(alu8+2)] = acc2;
  data0[(alu8+3)] = acc3;
  data0[(alu8+4096)] = acc4;
  data0[(alu8+4097)] = acc5;
  data0[(alu8+4098)] = acc6;
  data0[(alu8+4099)] = acc7;
  data0[(alu8+8192)] = acc8;
  data0[(alu8+8193)] = acc9;
  data0[(alu8+8194)] = acc10;
  data0[(alu8+8195)] = acc11;
  data0[(alu8+12288)] = acc12;
  data0[(alu8+12289)] = acc13;
  data0[(alu8+12290)] = acc14;
  data0[(alu8+12291)] = acc15;
  data0[alu8] = acc0;
}`;

const r_2_10_64_8_16_240_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 10 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1<<5)+(lidx0<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = ((gidx1<<17)+(gidx2*1310720)+alu0+(lidx0<<14)+alu1);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+4096);
  var alu11 = (alu6+4097);
  var alu12 = (alu6+4098);
  var alu13 = (alu6+4099);
  var alu14 = (alu6+8192);
  var alu15 = (alu6+8193);
  var alu16 = (alu6+8194);
  var alu17 = (alu6+8195);
  var alu18 = (alu6+12288);
  var alu19 = (alu6+12289);
  var alu20 = (alu6+12290);
  var alu21 = (alu6+12291);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 240; ridx0++) {
    var alu22 = ((gidx1*30720)+(lidx0*3840)+(ridx0<<2));
    var alu23 = (alu0+(gidx2*3932160)+alu1+(ridx0<<14));
    var val0 = data1[(alu23+1)];
    var val1 = data1[(alu23+2)];
    var val2 = data1[(alu23+3)];
    var val3 = data1[(alu23+4096)];
    var val4 = data1[(alu23+4097)];
    var val5 = data1[(alu23+4098)];
    var val6 = data1[(alu23+4099)];
    var val7 = data1[(alu23+8192)];
    var val8 = data1[(alu23+8193)];
    var val9 = data1[(alu23+8194)];
    var val10 = data1[(alu23+8195)];
    var val11 = data1[(alu23+12288)];
    var val12 = data1[(alu23+12289)];
    var val13 = data1[(alu23+12290)];
    var val14 = data1[(alu23+12291)];
    var val15 = data1[alu23];
    var val16 = data2[(alu22+1)];
    var val17 = data2[(alu22+2)];
    var val18 = data2[(alu22+3)];
    var val19 = data2[(alu22+960)];
    var val20 = data2[(alu22+961)];
    var val21 = data2[(alu22+962)];
    var val22 = data2[(alu22+963)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu22+1920)];
    var val24 = data2[(alu22+1921)];
    var val25 = data2[(alu22+1922)];
    var val26 = data2[(alu22+1923)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu22+2880)];
    var val28 = data2[(alu22+2881)];
    var val29 = data2[(alu22+2882)];
    var val30 = data2[(alu22+2883)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu22];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[alu3];
  var val33 = data3[alu4];
  var val34 = data3[alu5];
  var val35 = data3[alu2];
  var val36 = data4[alu7];
  var val37 = data4[alu8];
  var val38 = data4[alu9];
  var val39 = data4[alu10];
  var val40 = data4[alu11];
  var val41 = data4[alu12];
  var val42 = data4[alu13];
  var val43 = data4[alu14];
  var val44 = data4[alu15];
  var val45 = data4[alu16];
  var val46 = data4[alu17];
  var val47 = data4[alu18];
  var val48 = data4[alu19];
  var val49 = data4[alu20];
  var val50 = data4[alu21];
  var val51 = data4[alu6];
  var val52 = data5[alu3];
  data0[alu10] = (val32+acc1+val39+val52);
  data0[alu11] = (val32+acc5+val40+val52);
  data0[alu12] = (val32+acc9+val41+val52);
  data0[alu13] = (val32+acc13+val42+val52);
  var val53 = data5[alu4];
  data0[alu14] = (val33+acc2+val43+val53);
  data0[alu15] = (val33+acc6+val44+val53);
  data0[alu16] = (val33+acc10+val45+val53);
  data0[alu17] = (val33+acc14+val46+val53);
  var val54 = data5[alu5];
  data0[alu18] = (val34+acc3+val47+val54);
  data0[alu19] = (val34+acc7+val48+val54);
  data0[alu20] = (val34+acc11+val49+val54);
  data0[alu21] = (val34+acc15+val50+val54);
  var val55 = data5[alu2];
  data0[alu7] = (val35+acc4+val36+val55);
  data0[alu8] = (val35+acc8+val37+val55);
  data0[alu9] = (val35+acc12+val38+val55);
  data0[alu6] = (val35+acc0+val51+val55);
}`;

const E_2_80_64_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 80 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx1<40);
  var alu1 = (alu0!=true);
  var alu2 = (gidx0<<6);
  var alu3 = (gidx1<<15);
  var alu4 = (lidx0<<12);
  var alu5 = (lidx1<<2);
  var alu6 = (alu3+(gidx2*1310720)+alu2+alu4+alu5);
  var alu7 = (alu3+(gidx2*2621440)+alu2+alu4+alu5);
  var val0 = select(0.0f, data1[(alu6+1)], alu0);
  var val1 = select(0.0f, data1[(alu6+2)], alu0);
  var val2 = select(0.0f, data1[(alu6+3)], alu0);
  var val3 = select(0.0f, data1[alu6], alu0);
  var val4 = select(0.0f, data2[(alu6+-1310720)], alu1);
  data0[alu7] = (val3+val4);
  var val5 = select(0.0f, data2[(alu6+-1310719)], alu1);
  data0[(alu7+1)] = (val0+val5);
  var val6 = select(0.0f, data2[(alu6+-1310718)], alu1);
  data0[(alu7+2)] = (val1+val6);
  var val7 = select(0.0f, data2[(alu6+-1310717)], alu1);
  data0[(alu7+3)] = (val2+val7);
}`;

const r_512_32_80_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 512 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu0 = ((gidx0*10240)+(lidx0*320)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    acc0 = (acc0+val2+val1+val0+val3);
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_64_16_16n6 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 16; ridx0++) {
    var val0 = data1[((gidx0<<8)+(lidx0<<4)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = (acc1*1.220703143189894e-05f);
  }
}`;

const r_8_4_8_16_80_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 8 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1<<11)+(lidx0<<8)+(lidx1<<2));
  var val0 = data2[(lidx0+(gidx1<<3))];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 80; ridx0++) {
    var alu1 = ((gidx0*20480)+(gidx1*655360)+(lidx0*81920)+(lidx1*1280)+(ridx0<<2));
    var val1 = data1[(alu1+1)];
    var alu2 = (val1-val0);
    var val2 = data1[(alu1+2)];
    var alu3 = (val2-val0);
    var val3 = data1[(alu1+3)];
    var alu4 = (val3-val0);
    var val4 = data1[(alu1+320)];
    var alu5 = (val4-val0);
    var val5 = data1[(alu1+321)];
    var alu6 = (val5-val0);
    var val6 = data1[(alu1+322)];
    var alu7 = (val6-val0);
    var val7 = data1[(alu1+323)];
    var alu8 = (val7-val0);
    acc1 = (acc1+(alu5*alu5)+(alu6*alu6)+(alu7*alu7)+(alu8*alu8));
    var val8 = data1[(alu1+640)];
    var alu10 = (val8-val0);
    var val9 = data1[(alu1+641)];
    var alu11 = (val9-val0);
    var val10 = data1[(alu1+642)];
    var alu12 = (val10-val0);
    var val11 = data1[(alu1+643)];
    var alu13 = (val11-val0);
    acc2 = (acc2+(alu10*alu10)+(alu11*alu11)+(alu12*alu12)+(alu13*alu13));
    var val12 = data1[(alu1+960)];
    var alu15 = (val12-val0);
    var val13 = data1[(alu1+961)];
    var alu16 = (val13-val0);
    var val14 = data1[(alu1+962)];
    var alu17 = (val14-val0);
    var val15 = data1[(alu1+963)];
    var alu18 = (val15-val0);
    acc3 = (acc3+(alu15*alu15)+(alu16*alu16)+(alu17*alu17)+(alu18*alu18));
    var val16 = data1[alu1];
    var alu20 = (val16-val0);
    acc0 = (acc0+(alu2*alu2)+(alu20*alu20)+(alu3*alu3)+(alu4*alu4));
  }
  data0[(alu0+1)] = acc1;
  data0[(alu0+2)] = acc2;
  data0[(alu0+3)] = acc3;
  data0[alu0] = acc0;
}`;

const r_64_16_16n7 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 16>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var lidx0 = i32(lindex.x); /* 16 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 16; ridx0++) {
    var val0 = data1[((gidx0<<8)+(lidx0<<4)+ridx0)];
    acc0 = (acc0+val0);
  }
  temp0[lidx0] = acc0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc1 = 0.0f;
    for (var ridx1 = 0; ridx1 < 16; ridx1++) {
      var val1 = temp0[ridx1];
      acc1 = (acc1+val1);
    }
    data0[gidx0] = sqrt((1/((acc1*1.220703143189894e-05f)+1e-05f)));
  }
}`;

const E_2_80_64_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 80 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx2<<5)+(alu0/20));
  var alu2 = ((gidx1<<15)+(gidx2*2621440)+(gidx0<<6)+(lidx0<<12)+(lidx1<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var val0 = data1[alu3];
  var val1 = data1[alu4];
  var val2 = data1[alu5];
  var val3 = data1[alu2];
  var val4 = data2[alu1];
  var val5 = data3[alu1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu5] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu2] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_2_80_8_8_16_640_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 80 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<9);
  var alu1 = (lidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = (lidx1<15);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = (((gidx0+lidx0)<1)!=true);
  var alu6 = ((lidx0+(gidx0<<3))<63);
  var alu7 = (gidx1<<2);
  var alu8 = (alu7+1);
  var alu9 = (alu7+2);
  var alu10 = (alu7+3);
  var alu11 = ((gidx1<<14)+(gidx2*1310720)+alu0+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 640; ridx0++) {
    var alu12 = ((gidx1*23040)+(ridx0*9));
    var alu13 = (alu0+alu1+(gidx2*2621440)+(ridx0<<12)+alu2);
    var val0 = select(0.0f, data1[(alu13+-65)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu13+-64)], alu5);
    var val2 = select(0.0f, data1[(alu13+-63)], alu5);
    var val3 = select(0.0f, data1[(alu13+-62)], alu5);
    var val4 = select(0.0f, data1[(alu13+-61)], alu5);
    var val5 = select(0.0f, data1[(alu13+-60)], (alu3&alu5));
    var val6 = select(0.0f, data1[(alu13+-1)], alu4);
    var val7 = data1[(alu13+1)];
    var val8 = data1[(alu13+2)];
    var val9 = data1[(alu13+3)];
    var val10 = select(0.0f, data1[(alu13+4)], alu3);
    var val11 = select(0.0f, data1[(alu13+63)], (alu6&alu4));
    var val12 = select(0.0f, data1[(alu13+64)], alu6);
    var val13 = select(0.0f, data1[(alu13+65)], alu6);
    var val14 = select(0.0f, data1[(alu13+66)], alu6);
    var val15 = select(0.0f, data1[(alu13+67)], alu6);
    var val16 = select(0.0f, data1[(alu13+68)], (alu3&alu6));
    var val17 = data1[alu13];
    var val18 = data2[(alu12+1)];
    var val19 = data2[(alu12+2)];
    var val20 = data2[(alu12+3)];
    var val21 = data2[(alu12+4)];
    var val22 = data2[(alu12+5)];
    var val23 = data2[(alu12+6)];
    var val24 = data2[(alu12+7)];
    var val25 = data2[(alu12+8)];
    var val26 = data2[(alu12+5760)];
    var val27 = data2[(alu12+5761)];
    var val28 = data2[(alu12+5762)];
    var val29 = data2[(alu12+5763)];
    var val30 = data2[(alu12+5764)];
    var val31 = data2[(alu12+5765)];
    var val32 = data2[(alu12+5766)];
    var val33 = data2[(alu12+5767)];
    var val34 = data2[(alu12+5768)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu12+11520)];
    var val36 = data2[(alu12+11521)];
    var val37 = data2[(alu12+11522)];
    var val38 = data2[(alu12+11523)];
    var val39 = data2[(alu12+11524)];
    var val40 = data2[(alu12+11525)];
    var val41 = data2[(alu12+11526)];
    var val42 = data2[(alu12+11527)];
    var val43 = data2[(alu12+11528)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu12+17280)];
    var val45 = data2[(alu12+17281)];
    var val46 = data2[(alu12+17282)];
    var val47 = data2[(alu12+17283)];
    var val48 = data2[(alu12+17284)];
    var val49 = data2[(alu12+17285)];
    var val50 = data2[(alu12+17286)];
    var val51 = data2[(alu12+17287)];
    var val52 = data2[(alu12+17288)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu12];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[alu8];
  var val55 = data3[alu9];
  var val56 = data3[alu10];
  var val57 = data3[alu7];
  var val58 = data4[alu8];
  data0[(alu11+4096)] = (val58+val54+acc1);
  data0[(alu11+4097)] = (val58+val54+acc5);
  data0[(alu11+4098)] = (val58+val54+acc9);
  data0[(alu11+4099)] = (val58+val54+acc13);
  var val59 = data4[alu9];
  data0[(alu11+8192)] = (val59+val55+acc2);
  data0[(alu11+8193)] = (val59+val55+acc6);
  data0[(alu11+8194)] = (val59+val55+acc10);
  data0[(alu11+8195)] = (val59+val55+acc14);
  var val60 = data4[alu10];
  data0[(alu11+12288)] = (val60+val56+acc3);
  data0[(alu11+12289)] = (val60+val56+acc7);
  data0[(alu11+12290)] = (val60+val56+acc11);
  data0[(alu11+12291)] = (val60+val56+acc15);
  var val61 = data4[alu7];
  data0[(alu11+1)] = (val61+val57+acc4);
  data0[(alu11+2)] = (val61+val57+acc8);
  data0[(alu11+3)] = (val61+val57+acc12);
  data0[alu11] = (val61+val57+acc0);
}`;

const r_2_10_64_8_16_160_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 10 */
  var gidx2 = i32(gindex.z); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1<<5)+(lidx0<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = ((gidx1<<17)+(gidx2*1310720)+alu0+(lidx0<<14)+alu1);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+4096);
  var alu11 = (alu6+4097);
  var alu12 = (alu6+4098);
  var alu13 = (alu6+4099);
  var alu14 = (alu6+8192);
  var alu15 = (alu6+8193);
  var alu16 = (alu6+8194);
  var alu17 = (alu6+8195);
  var alu18 = (alu6+12288);
  var alu19 = (alu6+12289);
  var alu20 = (alu6+12290);
  var alu21 = (alu6+12291);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 160; ridx0++) {
    var alu22 = ((gidx1*20480)+(lidx0*2560)+(ridx0<<2));
    var alu23 = (alu0+(gidx2*2621440)+alu1+(ridx0<<14));
    var val0 = data1[(alu23+1)];
    var val1 = data1[(alu23+2)];
    var val2 = data1[(alu23+3)];
    var val3 = data1[(alu23+4096)];
    var val4 = data1[(alu23+4097)];
    var val5 = data1[(alu23+4098)];
    var val6 = data1[(alu23+4099)];
    var val7 = data1[(alu23+8192)];
    var val8 = data1[(alu23+8193)];
    var val9 = data1[(alu23+8194)];
    var val10 = data1[(alu23+8195)];
    var val11 = data1[(alu23+12288)];
    var val12 = data1[(alu23+12289)];
    var val13 = data1[(alu23+12290)];
    var val14 = data1[(alu23+12291)];
    var val15 = data1[alu23];
    var val16 = data2[(alu22+1)];
    var val17 = data2[(alu22+2)];
    var val18 = data2[(alu22+3)];
    var val19 = data2[(alu22+640)];
    var val20 = data2[(alu22+641)];
    var val21 = data2[(alu22+642)];
    var val22 = data2[(alu22+643)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu22+1280)];
    var val24 = data2[(alu22+1281)];
    var val25 = data2[(alu22+1282)];
    var val26 = data2[(alu22+1283)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu22+1920)];
    var val28 = data2[(alu22+1921)];
    var val29 = data2[(alu22+1922)];
    var val30 = data2[(alu22+1923)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu22];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[alu3];
  var val33 = data3[alu4];
  var val34 = data3[alu5];
  var val35 = data3[alu2];
  var val36 = data4[alu7];
  var val37 = data4[alu8];
  var val38 = data4[alu9];
  var val39 = data4[alu10];
  var val40 = data4[alu11];
  var val41 = data4[alu12];
  var val42 = data4[alu13];
  var val43 = data4[alu14];
  var val44 = data4[alu15];
  var val45 = data4[alu16];
  var val46 = data4[alu17];
  var val47 = data4[alu18];
  var val48 = data4[alu19];
  var val49 = data4[alu20];
  var val50 = data4[alu21];
  var val51 = data4[alu6];
  var val52 = data5[alu3];
  data0[alu10] = (val32+acc1+val39+val52);
  data0[alu11] = (val32+acc5+val40+val52);
  data0[alu12] = (val32+acc9+val41+val52);
  data0[alu13] = (val32+acc13+val42+val52);
  var val53 = data5[alu4];
  data0[alu14] = (val33+acc2+val43+val53);
  data0[alu15] = (val33+acc6+val44+val53);
  data0[alu16] = (val33+acc10+val45+val53);
  data0[alu17] = (val33+acc14+val46+val53);
  var val54 = data5[alu5];
  data0[alu18] = (val34+acc3+val47+val54);
  data0[alu19] = (val34+acc7+val48+val54);
  data0[alu20] = (val34+acc11+val49+val54);
  data0[alu21] = (val34+acc15+val50+val54);
  var val55 = data5[alu2];
  data0[alu7] = (val35+acc4+val36+val55);
  data0[alu8] = (val35+acc8+val37+val55);
  data0[alu9] = (val35+acc12+val38+val55);
  data0[alu6] = (val35+acc0+val51+val55);
}`;

const r_2_8_8_16_320_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 2 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<9);
  var alu1 = (lidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = (lidx1<15);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = (((gidx0+lidx0)<1)!=true);
  var alu6 = ((lidx0+(gidx0<<3))<63);
  var alu7 = (alu0+(gidx1<<14)+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 320; ridx0++) {
    var alu8 = (ridx0*9);
    var alu9 = (alu0+alu1+(gidx1*1310720)+(ridx0<<12)+alu2);
    var val0 = select(0.0f, data1[(alu9+-65)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu9+-64)], alu5);
    var val2 = select(0.0f, data1[(alu9+-63)], alu5);
    var val3 = select(0.0f, data1[(alu9+-62)], alu5);
    var val4 = select(0.0f, data1[(alu9+-61)], alu5);
    var val5 = select(0.0f, data1[(alu9+-60)], (alu3&alu5));
    var val6 = select(0.0f, data1[(alu9+-1)], alu4);
    var val7 = data1[(alu9+1)];
    var val8 = data1[(alu9+2)];
    var val9 = data1[(alu9+3)];
    var val10 = select(0.0f, data1[(alu9+4)], alu3);
    var val11 = select(0.0f, data1[(alu9+63)], (alu6&alu4));
    var val12 = select(0.0f, data1[(alu9+64)], alu6);
    var val13 = select(0.0f, data1[(alu9+65)], alu6);
    var val14 = select(0.0f, data1[(alu9+66)], alu6);
    var val15 = select(0.0f, data1[(alu9+67)], alu6);
    var val16 = select(0.0f, data1[(alu9+68)], (alu3&alu6));
    var val17 = data1[alu9];
    var val18 = data2[(alu8+1)];
    var val19 = data2[(alu8+2)];
    var val20 = data2[(alu8+3)];
    var val21 = data2[(alu8+4)];
    var val22 = data2[(alu8+5)];
    var val23 = data2[(alu8+6)];
    var val24 = data2[(alu8+7)];
    var val25 = data2[(alu8+8)];
    var val26 = data2[(alu8+2880)];
    var val27 = data2[(alu8+2881)];
    var val28 = data2[(alu8+2882)];
    var val29 = data2[(alu8+2883)];
    var val30 = data2[(alu8+2884)];
    var val31 = data2[(alu8+2885)];
    var val32 = data2[(alu8+2886)];
    var val33 = data2[(alu8+2887)];
    var val34 = data2[(alu8+2888)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu8+5760)];
    var val36 = data2[(alu8+5761)];
    var val37 = data2[(alu8+5762)];
    var val38 = data2[(alu8+5763)];
    var val39 = data2[(alu8+5764)];
    var val40 = data2[(alu8+5765)];
    var val41 = data2[(alu8+5766)];
    var val42 = data2[(alu8+5767)];
    var val43 = data2[(alu8+5768)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu8+8640)];
    var val45 = data2[(alu8+8641)];
    var val46 = data2[(alu8+8642)];
    var val47 = data2[(alu8+8643)];
    var val48 = data2[(alu8+8644)];
    var val49 = data2[(alu8+8645)];
    var val50 = data2[(alu8+8646)];
    var val51 = data2[(alu8+8647)];
    var val52 = data2[(alu8+8648)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu8];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[0];
  data0[(alu7+1)] = (val54+acc4);
  data0[(alu7+2)] = (val54+acc8);
  data0[(alu7+3)] = (val54+acc12);
  data0[alu7] = (val54+acc0);
  var val55 = data3[1];
  data0[(alu7+4096)] = (val55+acc1);
  data0[(alu7+4097)] = (val55+acc5);
  data0[(alu7+4098)] = (val55+acc9);
  data0[(alu7+4099)] = (val55+acc13);
  var val56 = data3[2];
  data0[(alu7+8192)] = (val56+acc2);
  data0[(alu7+8193)] = (val56+acc6);
  data0[(alu7+8194)] = (val56+acc10);
  data0[(alu7+8195)] = (val56+acc14);
  var val57 = data3[3];
  data0[(alu7+12288)] = (val57+acc3);
  data0[(alu7+12289)] = (val57+acc7);
  data0[(alu7+12290)] = (val57+acc11);
  data0[(alu7+12291)] = (val57+acc15);
}`;

const E_128_32_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@group(0) @binding(6)var<storage,read_write>data6:array<f32>;
@group(0) @binding(7)var<storage,read_write>data7:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 128 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (alu0+3);
  var val0 = data1[0];
  var val1 = data2[alu1];
  var val2 = data2[alu2];
  var val3 = data2[alu3];
  var val4 = data2[alu0];
  var val5 = data3[0];
  var val6 = data4[alu1];
  var val7 = data4[alu2];
  var val8 = data4[alu3];
  var val9 = data4[(alu0+16384)];
  var val10 = data4[(alu0+16385)];
  var val11 = data4[(alu0+16386)];
  var val12 = data4[(alu0+16387)];
  var val13 = data4[alu0];
  var val14 = data5[0];
  var alu4 = (val13+(val14*(val9-val13)));
  var alu5 = (val6+(val14*(val10-val6)));
  var alu6 = (val7+(val14*(val11-val7)));
  var alu7 = (val8+(val14*(val12-val8)));
  var val15 = data6[0];
  var alu8 = (1/val15);
  var val16 = data7[0];
  data0[alu1] = ((val0*alu8*(val1-(val5*alu5)))+(val16*alu5));
  data0[alu2] = ((val0*alu8*(val2-(val5*alu6)))+(val16*alu6));
  data0[alu3] = ((val0*alu8*(val3-(val5*alu7)))+(val16*alu7));
  data0[alu0] = ((val0*alu8*(val4-(val5*alu4)))+(val16*alu4));
}`;

    return {
      "setup": async (device, safetensor) => {
        const metadata = getTensorMetadata(safetensor[0]);

        const buf_0 = createEmptyBuf(device, 4);;
    const input5 = createEmptyBuf(device, 4);;
    const buf_1 = createEmptyBuf(device, 4);;
    const input4 = createEmptyBuf(device, 4);;
    const buf_2 = createEmptyBuf(device, 640);;
    const input3 = createEmptyBuf(device, 4);;
    const buf_3 = createEmptyBuf(device, 640);;
    const buf_4 = createEmptyBuf(device, 473088);;
    const input0 = createEmptyBuf(device, 236544);;
    const input1 = createEmptyBuf(device, 236544);;
    const buf_5 = createEmptyBuf(device, 4);;
    const buf_6 = createEmptyBuf(device, 4);;
    const buf_7 = createEmptyBuf(device, 10485760);;
    const input2 = createEmptyBuf(device, 65536);;
    const buf_8 = createWeightBuf(device, 46080, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.0.0.weight'], 'model.diffusion_model.input_blocks.0.0.weight'));
    const buf_9 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.0.0.bias'], 'model.diffusion_model.input_blocks.0.0.bias'));
    const buf_10 = createEmptyBuf(device, 1280);;
    const buf_11 = createEmptyBuf(device, 197120);;
    const buf_12 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_13 = createEmptyBuf(device, 197120);;
    const buf_14 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_15 = createEmptyBuf(device, 197120);;
    const buf_16 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_17 = createEmptyBuf(device, 197120);;
    const buf_18 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_19 = createEmptyBuf(device, 394240);;
    const buf_20 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_21 = createEmptyBuf(device, 394240);;
    const buf_22 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_23 = createEmptyBuf(device, 394240);;
    const buf_24 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_25 = createEmptyBuf(device, 394240);;
    const buf_26 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_27 = createEmptyBuf(device, 788480);;
    const buf_28 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_29 = createEmptyBuf(device, 788480);;
    const buf_30 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_31 = createEmptyBuf(device, 788480);;
    const buf_32 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_33 = createEmptyBuf(device, 788480);;
    const buf_34 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_35 = createEmptyBuf(device, 788480);;
    const buf_36 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_37 = createEmptyBuf(device, 788480);;
    const buf_38 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_39 = createEmptyBuf(device, 788480);;
    const buf_40 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_41 = createEmptyBuf(device, 788480);;
    const buf_42 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_43 = createEmptyBuf(device, 788480);;
    const buf_44 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_45 = createEmptyBuf(device, 788480);;
    const buf_46 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_47 = createEmptyBuf(device, 788480);;
    const buf_48 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_49 = createEmptyBuf(device, 788480);;
    const buf_50 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_51 = createEmptyBuf(device, 394240);;
    const buf_52 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_53 = createEmptyBuf(device, 394240);;
    const buf_54 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_55 = createEmptyBuf(device, 394240);;
    const buf_56 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_57 = createEmptyBuf(device, 394240);;
    const buf_58 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_59 = createEmptyBuf(device, 394240);;
    const buf_60 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_61 = createEmptyBuf(device, 394240);;
    const buf_62 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_63 = createEmptyBuf(device, 197120);;
    const buf_64 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_65 = createEmptyBuf(device, 197120);;
    const buf_66 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_67 = createEmptyBuf(device, 197120);;
    const buf_68 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_69 = createEmptyBuf(device, 197120);;
    const buf_70 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_71 = createEmptyBuf(device, 197120);;
    const buf_72 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_73 = createEmptyBuf(device, 197120);;
    const buf_74 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_75 = createEmptyBuf(device, 65536);;
    const buf_76 = createEmptyBuf(device, 5120);;
    const buf_77 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.time_embed.0.weight'], 'model.diffusion_model.time_embed.0.weight'));
    const buf_78 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.time_embed.0.bias'], 'model.diffusion_model.time_embed.0.bias'));
    const buf_79 = createEmptyBuf(device, 256);;
    const buf_80 = createEmptyBuf(device, 5120);;
    const buf_81 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.time_embed.2.weight'], 'model.diffusion_model.time_embed.2.weight'));
    const buf_82 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.time_embed.2.bias'], 'model.diffusion_model.time_embed.2.bias'));
    const buf_83 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.1.0.emb_layers.1.weight'));
    const buf_84 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.1.0.emb_layers.1.bias'));
    const buf_85 = createEmptyBuf(device, 1280);;
    const buf_86 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.2.0.emb_layers.1.weight'));
    const buf_87 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.2.0.emb_layers.1.bias'));
    const buf_88 = createEmptyBuf(device, 2560);;
    const buf_89 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.4.0.emb_layers.1.weight'));
    const buf_90 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.4.0.emb_layers.1.bias'));
    const buf_91 = createEmptyBuf(device, 2560);;
    const buf_92 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.5.0.emb_layers.1.weight'));
    const buf_93 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.5.0.emb_layers.1.bias'));
    const buf_94 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.7.0.emb_layers.1.weight'));
    const buf_95 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.7.0.emb_layers.1.bias'));
    const buf_96 = createEmptyBuf(device, 5120);;
    const buf_97 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.8.0.emb_layers.1.weight'));
    const buf_98 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.8.0.emb_layers.1.bias'));
    const buf_99 = createEmptyBuf(device, 5120);;
    const buf_100 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.10.0.emb_layers.1.weight'));
    const buf_101 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.10.0.emb_layers.1.bias'));
    const buf_102 = createEmptyBuf(device, 5120);;
    const buf_103 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.11.0.emb_layers.1.weight'));
    const buf_104 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.11.0.emb_layers.1.bias'));
    const buf_105 = createEmptyBuf(device, 5120);;
    const buf_106 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.emb_layers.1.weight'], 'model.diffusion_model.middle_block.0.emb_layers.1.weight'));
    const buf_107 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.emb_layers.1.bias'], 'model.diffusion_model.middle_block.0.emb_layers.1.bias'));
    const buf_108 = createEmptyBuf(device, 5120);;
    const buf_109 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.emb_layers.1.weight'], 'model.diffusion_model.middle_block.2.emb_layers.1.weight'));
    const buf_110 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.emb_layers.1.bias'], 'model.diffusion_model.middle_block.2.emb_layers.1.bias'));
    const buf_111 = createEmptyBuf(device, 5120);;
    const buf_112 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.0.0.emb_layers.1.weight'));
    const buf_113 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.0.0.emb_layers.1.bias'));
    const buf_114 = createEmptyBuf(device, 5120);;
    const buf_115 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.1.0.emb_layers.1.weight'));
    const buf_116 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.1.0.emb_layers.1.bias'));
    const buf_117 = createEmptyBuf(device, 5120);;
    const buf_118 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.2.0.emb_layers.1.weight'));
    const buf_119 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.2.0.emb_layers.1.bias'));
    const buf_120 = createEmptyBuf(device, 5120);;
    const buf_121 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.3.0.emb_layers.1.weight'));
    const buf_122 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.3.0.emb_layers.1.bias'));
    const buf_123 = createEmptyBuf(device, 5120);;
    const buf_124 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.4.0.emb_layers.1.weight'));
    const buf_125 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.4.0.emb_layers.1.bias'));
    const buf_126 = createEmptyBuf(device, 5120);;
    const buf_127 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.5.0.emb_layers.1.weight'));
    const buf_128 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.5.0.emb_layers.1.bias'));
    const buf_129 = createEmptyBuf(device, 2560);;
    const buf_130 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.6.0.emb_layers.1.weight'));
    const buf_131 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.6.0.emb_layers.1.bias'));
    const buf_132 = createEmptyBuf(device, 2560);;
    const buf_133 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.7.0.emb_layers.1.weight'));
    const buf_134 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.7.0.emb_layers.1.bias'));
    const buf_135 = createEmptyBuf(device, 2560);;
    const buf_136 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.8.0.emb_layers.1.weight'));
    const buf_137 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.8.0.emb_layers.1.bias'));
    const buf_138 = createEmptyBuf(device, 1280);;
    const buf_139 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.9.0.emb_layers.1.weight'));
    const buf_140 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.9.0.emb_layers.1.bias'));
    const buf_141 = createEmptyBuf(device, 1280);;
    const buf_142 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.10.0.emb_layers.1.weight'));
    const buf_143 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.10.0.emb_layers.1.bias'));
    const buf_144 = createEmptyBuf(device, 1280);;
    const buf_145 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.11.0.emb_layers.1.weight'));
    const buf_146 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.11.0.emb_layers.1.bias'));
    const buf_147 = createEmptyBuf(device, 256);;
    const buf_148 = createEmptyBuf(device, 10485760);;
    const buf_149 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.1.0.in_layers.0.weight'));
    const buf_150 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.1.0.in_layers.0.bias'));
    const buf_151 = createEmptyBuf(device, 10485760);;
    const buf_152 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.1.0.in_layers.2.weight'));
    const buf_153 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.1.0.in_layers.2.bias'));
    const buf_154 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.1.0.out_layers.0.weight'));
    const buf_155 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.1.0.out_layers.0.bias'));
    const buf_156 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.1.0.out_layers.3.weight'));
    const buf_157 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.1.0.out_layers.3.bias'));
    const buf_158 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.norm.weight'], 'model.diffusion_model.input_blocks.1.1.norm.weight'));
    const buf_159 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.norm.bias'], 'model.diffusion_model.input_blocks.1.1.norm.bias'));
    const buf_160 = createEmptyBuf(device, 10485760);;
    const buf_161 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.proj_in.weight'], 'model.diffusion_model.input_blocks.1.1.proj_in.weight'));
    const buf_162 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.proj_in.bias'], 'model.diffusion_model.input_blocks.1.1.proj_in.bias'));
    const buf_163 = createEmptyBuf(device, 32768);;
    const buf_164 = createEmptyBuf(device, 32768);;
    const buf_165 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm1.weight'));
    const buf_166 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm1.bias'));
    const buf_167 = createEmptyBuf(device, 10485760);;
    const buf_168 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_169 = createEmptyBuf(device, 10485760);;
    const buf_170 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_171 = createEmptyBuf(device, 10485760);;
    const buf_172 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_173 = createEmptyBuf(device, 1073741824);;
    const buf_174 = createEmptyBuf(device, 262144);;
    const buf_175 = createEmptyBuf(device, 262144);;
    const buf_176 = createEmptyBuf(device, 1073741824);;
    const buf_177 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_178 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_179 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm2.weight'));
    const buf_180 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm2.bias'));
    const buf_181 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_182 = createEmptyBuf(device, 20185088);;
    const buf_183 = createEmptyBuf(device, 20185088);;
    const buf_184 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_185 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_186 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm3.weight'));
    const buf_187 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm3.bias'));
    const buf_188 = createEmptyBuf(device, 83886080);;
    const buf_189 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_190 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_191 = createEmptyBuf(device, 41943040);;
    const buf_192 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_193 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_194 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.proj_out.weight'], 'model.diffusion_model.input_blocks.1.1.proj_out.weight'));
    const buf_195 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.proj_out.bias'], 'model.diffusion_model.input_blocks.1.1.proj_out.bias'));
    const buf_196 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.2.0.in_layers.0.weight'));
    const buf_197 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.2.0.in_layers.0.bias'));
    const buf_198 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.2.0.in_layers.2.weight'));
    const buf_199 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.2.0.in_layers.2.bias'));
    const buf_200 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.2.0.out_layers.0.weight'));
    const buf_201 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.2.0.out_layers.0.bias'));
    const buf_202 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.2.0.out_layers.3.weight'));
    const buf_203 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.2.0.out_layers.3.bias'));
    const buf_204 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.norm.weight'], 'model.diffusion_model.input_blocks.2.1.norm.weight'));
    const buf_205 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.norm.bias'], 'model.diffusion_model.input_blocks.2.1.norm.bias'));
    const buf_206 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.proj_in.weight'], 'model.diffusion_model.input_blocks.2.1.proj_in.weight'));
    const buf_207 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.proj_in.bias'], 'model.diffusion_model.input_blocks.2.1.proj_in.bias'));
    const buf_208 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm1.weight'));
    const buf_209 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm1.bias'));
    const buf_210 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_211 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_212 = createEmptyBuf(device, 10485760);;
    const buf_213 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_214 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_215 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_216 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm2.weight'));
    const buf_217 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm2.bias'));
    const buf_218 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_219 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_220 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_221 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm3.weight'));
    const buf_222 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm3.bias'));
    const buf_223 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_224 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_225 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_226 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_227 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.proj_out.weight'], 'model.diffusion_model.input_blocks.2.1.proj_out.weight'));
    const buf_228 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.proj_out.bias'], 'model.diffusion_model.input_blocks.2.1.proj_out.bias'));
    const buf_229 = createEmptyBuf(device, 2621440);;
    const buf_230 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.3.0.op.weight'], 'model.diffusion_model.input_blocks.3.0.op.weight'));
    const buf_231 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.3.0.op.bias'], 'model.diffusion_model.input_blocks.3.0.op.bias'));
    const buf_232 = createEmptyBuf(device, 2621440);;
    const buf_233 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.4.0.in_layers.0.weight'));
    const buf_234 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.4.0.in_layers.0.bias'));
    const buf_235 = createEmptyBuf(device, 5242880);;
    const buf_236 = createWeightBuf(device, 7372800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.4.0.in_layers.2.weight'));
    const buf_237 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.4.0.in_layers.2.bias'));
    const buf_238 = createEmptyBuf(device, 5242880);;
    const buf_239 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.4.0.out_layers.0.weight'));
    const buf_240 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.4.0.out_layers.0.bias'));
    const buf_241 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.4.0.out_layers.3.weight'));
    const buf_242 = createWeightBuf(device, 819200, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.skip_connection.weight'], 'model.diffusion_model.input_blocks.4.0.skip_connection.weight'));
    const buf_243 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.skip_connection.bias'], 'model.diffusion_model.input_blocks.4.0.skip_connection.bias'));
    const buf_244 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.4.0.out_layers.3.bias'));
    const buf_245 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.norm.weight'], 'model.diffusion_model.input_blocks.4.1.norm.weight'));
    const buf_246 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.norm.bias'], 'model.diffusion_model.input_blocks.4.1.norm.bias'));
    const buf_247 = createEmptyBuf(device, 5242880);;
    const buf_248 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.proj_in.weight'], 'model.diffusion_model.input_blocks.4.1.proj_in.weight'));
    const buf_249 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.proj_in.bias'], 'model.diffusion_model.input_blocks.4.1.proj_in.bias'));
    const buf_250 = createEmptyBuf(device, 8192);;
    const buf_251 = createEmptyBuf(device, 8192);;
    const buf_252 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm1.weight'));
    const buf_253 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm1.bias'));
    const buf_254 = createEmptyBuf(device, 5242880);;
    const buf_255 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_256 = createEmptyBuf(device, 5242880);;
    const buf_257 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_258 = createEmptyBuf(device, 5242880);;
    const buf_259 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_260 = createEmptyBuf(device, 67108864);;
    const buf_261 = createEmptyBuf(device, 65536);;
    const buf_262 = createEmptyBuf(device, 67108864);;
    const buf_263 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_264 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_265 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm2.weight'));
    const buf_266 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm2.bias'));
    const buf_267 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_268 = createEmptyBuf(device, 5046272);;
    const buf_269 = createEmptyBuf(device, 5046272);;
    const buf_270 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_271 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_272 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm3.weight'));
    const buf_273 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm3.bias'));
    const buf_274 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_275 = createWeightBuf(device, 20480, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_276 = createEmptyBuf(device, 20971520);;
    const buf_277 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_278 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_279 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.proj_out.weight'], 'model.diffusion_model.input_blocks.4.1.proj_out.weight'));
    const buf_280 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.proj_out.bias'], 'model.diffusion_model.input_blocks.4.1.proj_out.bias'));
    const buf_281 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.5.0.in_layers.0.weight'));
    const buf_282 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.5.0.in_layers.0.bias'));
    const buf_283 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.5.0.in_layers.2.weight'));
    const buf_284 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.5.0.in_layers.2.bias'));
    const buf_285 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.5.0.out_layers.0.weight'));
    const buf_286 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.5.0.out_layers.0.bias'));
    const buf_287 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.5.0.out_layers.3.weight'));
    const buf_288 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.5.0.out_layers.3.bias'));
    const buf_289 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.norm.weight'], 'model.diffusion_model.input_blocks.5.1.norm.weight'));
    const buf_290 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.norm.bias'], 'model.diffusion_model.input_blocks.5.1.norm.bias'));
    const buf_291 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.proj_in.weight'], 'model.diffusion_model.input_blocks.5.1.proj_in.weight'));
    const buf_292 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.proj_in.bias'], 'model.diffusion_model.input_blocks.5.1.proj_in.bias'));
    const buf_293 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm1.weight'));
    const buf_294 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm1.bias'));
    const buf_295 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_296 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_297 = createEmptyBuf(device, 5242880);;
    const buf_298 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_299 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_300 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_301 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm2.weight'));
    const buf_302 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm2.bias'));
    const buf_303 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_304 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_305 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_306 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm3.weight'));
    const buf_307 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm3.bias'));
    const buf_308 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_309 = createWeightBuf(device, 20480, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_310 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_311 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_312 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.proj_out.weight'], 'model.diffusion_model.input_blocks.5.1.proj_out.weight'));
    const buf_313 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.proj_out.bias'], 'model.diffusion_model.input_blocks.5.1.proj_out.bias'));
    const buf_314 = createEmptyBuf(device, 1310720);;
    const buf_315 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.6.0.op.weight'], 'model.diffusion_model.input_blocks.6.0.op.weight'));
    const buf_316 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.6.0.op.bias'], 'model.diffusion_model.input_blocks.6.0.op.bias'));
    const buf_317 = createEmptyBuf(device, 1310720);;
    const buf_318 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.7.0.in_layers.0.weight'));
    const buf_319 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.7.0.in_layers.0.bias'));
    const buf_320 = createWeightBuf(device, 29491200, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.7.0.in_layers.2.weight'));
    const buf_321 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.7.0.in_layers.2.bias'));
    const buf_322 = createEmptyBuf(device, 2621440);;
    const buf_323 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.7.0.out_layers.0.weight'));
    const buf_324 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.7.0.out_layers.0.bias'));
    const buf_325 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.7.0.out_layers.3.weight'));
    const buf_326 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.skip_connection.weight'], 'model.diffusion_model.input_blocks.7.0.skip_connection.weight'));
    const buf_327 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.skip_connection.bias'], 'model.diffusion_model.input_blocks.7.0.skip_connection.bias'));
    const buf_328 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.7.0.out_layers.3.bias'));
    const buf_329 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.norm.weight'], 'model.diffusion_model.input_blocks.7.1.norm.weight'));
    const buf_330 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.norm.bias'], 'model.diffusion_model.input_blocks.7.1.norm.bias'));
    const buf_331 = createEmptyBuf(device, 2621440);;
    const buf_332 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.proj_in.weight'], 'model.diffusion_model.input_blocks.7.1.proj_in.weight'));
    const buf_333 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.proj_in.bias'], 'model.diffusion_model.input_blocks.7.1.proj_in.bias'));
    const buf_334 = createEmptyBuf(device, 2048);;
    const buf_335 = createEmptyBuf(device, 2048);;
    const buf_336 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm1.weight'));
    const buf_337 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm1.bias'));
    const buf_338 = createEmptyBuf(device, 2621440);;
    const buf_339 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_340 = createEmptyBuf(device, 2621440);;
    const buf_341 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_342 = createEmptyBuf(device, 2621440);;
    const buf_343 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_344 = createEmptyBuf(device, 4194304);;
    const buf_345 = createEmptyBuf(device, 16384);;
    const buf_346 = createEmptyBuf(device, 16384);;
    const buf_347 = createEmptyBuf(device, 4194304);;
    const buf_348 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_349 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_350 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm2.weight'));
    const buf_351 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm2.bias'));
    const buf_352 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_353 = createEmptyBuf(device, 1261568);;
    const buf_354 = createEmptyBuf(device, 1261568);;
    const buf_355 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_356 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_357 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm3.weight'));
    const buf_358 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm3.bias'));
    const buf_359 = createWeightBuf(device, 52428800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_360 = createWeightBuf(device, 40960, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_361 = createWeightBuf(device, 26214400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_362 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_363 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.proj_out.weight'], 'model.diffusion_model.input_blocks.7.1.proj_out.weight'));
    const buf_364 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.proj_out.bias'], 'model.diffusion_model.input_blocks.7.1.proj_out.bias'));
    const buf_365 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.8.0.in_layers.0.weight'));
    const buf_366 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.8.0.in_layers.0.bias'));
    const buf_367 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.8.0.in_layers.2.weight'));
    const buf_368 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.8.0.in_layers.2.bias'));
    const buf_369 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.8.0.out_layers.0.weight'));
    const buf_370 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.8.0.out_layers.0.bias'));
    const buf_371 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.8.0.out_layers.3.weight'));
    const buf_372 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.8.0.out_layers.3.bias'));
    const buf_373 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.norm.weight'], 'model.diffusion_model.input_blocks.8.1.norm.weight'));
    const buf_374 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.norm.bias'], 'model.diffusion_model.input_blocks.8.1.norm.bias'));
    const buf_375 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.proj_in.weight'], 'model.diffusion_model.input_blocks.8.1.proj_in.weight'));
    const buf_376 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.proj_in.bias'], 'model.diffusion_model.input_blocks.8.1.proj_in.bias'));
    const buf_377 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm1.weight'));
    const buf_378 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm1.bias'));
    const buf_379 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_380 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_381 = createEmptyBuf(device, 2621440);;
    const buf_382 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_383 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_384 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_385 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm2.weight'));
    const buf_386 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm2.bias'));
    const buf_387 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_388 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_389 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_390 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm3.weight'));
    const buf_391 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm3.bias'));
    const buf_392 = createWeightBuf(device, 52428800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_393 = createWeightBuf(device, 40960, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_394 = createWeightBuf(device, 26214400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_395 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_396 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.proj_out.weight'], 'model.diffusion_model.input_blocks.8.1.proj_out.weight'));
    const buf_397 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.proj_out.bias'], 'model.diffusion_model.input_blocks.8.1.proj_out.bias'));
    const buf_398 = createEmptyBuf(device, 655360);;
    const buf_399 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.9.0.op.weight'], 'model.diffusion_model.input_blocks.9.0.op.weight'));
    const buf_400 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.9.0.op.bias'], 'model.diffusion_model.input_blocks.9.0.op.bias'));
    const buf_401 = createEmptyBuf(device, 655360);;
    const buf_402 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.10.0.in_layers.0.weight'));
    const buf_403 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.10.0.in_layers.0.bias'));
    const buf_404 = createEmptyBuf(device, 655360);;
    const buf_405 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.10.0.in_layers.2.weight'));
    const buf_406 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.10.0.in_layers.2.bias'));
    const buf_407 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.10.0.out_layers.0.weight'));
    const buf_408 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.10.0.out_layers.0.bias'));
    const buf_409 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.10.0.out_layers.3.weight'));
    const buf_410 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.10.0.out_layers.3.bias'));
    const buf_411 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.11.0.in_layers.0.weight'));
    const buf_412 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.11.0.in_layers.0.bias'));
    const buf_413 = createEmptyBuf(device, 655360);;
    const buf_414 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.11.0.in_layers.2.weight'));
    const buf_415 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.11.0.in_layers.2.bias'));
    const buf_416 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.11.0.out_layers.0.weight'));
    const buf_417 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.11.0.out_layers.0.bias'));
    const buf_418 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.11.0.out_layers.3.weight'));
    const buf_419 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.11.0.out_layers.3.bias'));
    const buf_420 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.in_layers.0.weight'], 'model.diffusion_model.middle_block.0.in_layers.0.weight'));
    const buf_421 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.in_layers.0.bias'], 'model.diffusion_model.middle_block.0.in_layers.0.bias'));
    const buf_422 = createEmptyBuf(device, 655360);;
    const buf_423 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.in_layers.2.weight'], 'model.diffusion_model.middle_block.0.in_layers.2.weight'));
    const buf_424 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.in_layers.2.bias'], 'model.diffusion_model.middle_block.0.in_layers.2.bias'));
    const buf_425 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.out_layers.0.weight'], 'model.diffusion_model.middle_block.0.out_layers.0.weight'));
    const buf_426 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.out_layers.0.bias'], 'model.diffusion_model.middle_block.0.out_layers.0.bias'));
    const buf_427 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.out_layers.3.weight'], 'model.diffusion_model.middle_block.0.out_layers.3.weight'));
    const buf_428 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.out_layers.3.bias'], 'model.diffusion_model.middle_block.0.out_layers.3.bias'));
    const buf_429 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.norm.weight'], 'model.diffusion_model.middle_block.1.norm.weight'));
    const buf_430 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.norm.bias'], 'model.diffusion_model.middle_block.1.norm.bias'));
    const buf_431 = createEmptyBuf(device, 655360);;
    const buf_432 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.proj_in.weight'], 'model.diffusion_model.middle_block.1.proj_in.weight'));
    const buf_433 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.proj_in.bias'], 'model.diffusion_model.middle_block.1.proj_in.bias'));
    const buf_434 = createEmptyBuf(device, 512);;
    const buf_435 = createEmptyBuf(device, 512);;
    const buf_436 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.norm1.weight'));
    const buf_437 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.norm1.bias'));
    const buf_438 = createEmptyBuf(device, 655360);;
    const buf_439 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_440 = createEmptyBuf(device, 655360);;
    const buf_441 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_442 = createEmptyBuf(device, 655360);;
    const buf_443 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_444 = createEmptyBuf(device, 4096);;
    const buf_445 = createEmptyBuf(device, 4096);;
    const buf_446 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_447 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_448 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.norm2.weight'));
    const buf_449 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.norm2.bias'));
    const buf_450 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_451 = createEmptyBuf(device, 315392);;
    const buf_452 = createEmptyBuf(device, 315392);;
    const buf_453 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_454 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_455 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.norm3.weight'));
    const buf_456 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.norm3.bias'));
    const buf_457 = createWeightBuf(device, 52428800, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_458 = createWeightBuf(device, 40960, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_459 = createWeightBuf(device, 26214400, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_460 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_461 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.proj_out.weight'], 'model.diffusion_model.middle_block.1.proj_out.weight'));
    const buf_462 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.proj_out.bias'], 'model.diffusion_model.middle_block.1.proj_out.bias'));
    const buf_463 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.in_layers.0.weight'], 'model.diffusion_model.middle_block.2.in_layers.0.weight'));
    const buf_464 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.in_layers.0.bias'], 'model.diffusion_model.middle_block.2.in_layers.0.bias'));
    const buf_465 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.in_layers.2.weight'], 'model.diffusion_model.middle_block.2.in_layers.2.weight'));
    const buf_466 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.in_layers.2.bias'], 'model.diffusion_model.middle_block.2.in_layers.2.bias'));
    const buf_467 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.out_layers.0.weight'], 'model.diffusion_model.middle_block.2.out_layers.0.weight'));
    const buf_468 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.out_layers.0.bias'], 'model.diffusion_model.middle_block.2.out_layers.0.bias'));
    const buf_469 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.out_layers.3.weight'], 'model.diffusion_model.middle_block.2.out_layers.3.weight'));
    const buf_470 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.out_layers.3.bias'], 'model.diffusion_model.middle_block.2.out_layers.3.bias'));
    const buf_471 = createEmptyBuf(device, 1310720);;
    const buf_472 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.0.0.in_layers.0.weight'));
    const buf_473 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.0.0.in_layers.0.bias'));
    const buf_474 = createWeightBuf(device, 117964800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.0.0.in_layers.2.weight'));
    const buf_475 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.0.0.in_layers.2.bias'));
    const buf_476 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.0.0.out_layers.0.weight'));
    const buf_477 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.0.0.out_layers.0.bias'));
    const buf_478 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.0.0.out_layers.3.weight'));
    const buf_479 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.0.0.skip_connection.weight'));
    const buf_480 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.0.0.skip_connection.bias'));
    const buf_481 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.0.0.out_layers.3.bias'));
    const buf_482 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.1.0.in_layers.0.weight'));
    const buf_483 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.1.0.in_layers.0.bias'));
    const buf_484 = createWeightBuf(device, 117964800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.1.0.in_layers.2.weight'));
    const buf_485 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.1.0.in_layers.2.bias'));
    const buf_486 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.1.0.out_layers.0.weight'));
    const buf_487 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.1.0.out_layers.0.bias'));
    const buf_488 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.1.0.out_layers.3.weight'));
    const buf_489 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.1.0.skip_connection.weight'));
    const buf_490 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.1.0.skip_connection.bias'));
    const buf_491 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.1.0.out_layers.3.bias'));
    const buf_492 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.2.0.in_layers.0.weight'));
    const buf_493 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.2.0.in_layers.0.bias'));
    const buf_494 = createWeightBuf(device, 117964800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.2.0.in_layers.2.weight'));
    const buf_495 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.2.0.in_layers.2.bias'));
    const buf_496 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.2.0.out_layers.0.weight'));
    const buf_497 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.2.0.out_layers.0.bias'));
    const buf_498 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.2.0.out_layers.3.weight'));
    const buf_499 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.2.0.skip_connection.weight'));
    const buf_500 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.2.0.skip_connection.bias'));
    const buf_501 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.2.0.out_layers.3.bias'));
    const buf_502 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.1.conv.weight'], 'model.diffusion_model.output_blocks.2.1.conv.weight'));
    const buf_503 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.1.conv.bias'], 'model.diffusion_model.output_blocks.2.1.conv.bias'));
    const buf_504 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.3.0.in_layers.0.weight'));
    const buf_505 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.3.0.in_layers.0.bias'));
    const buf_506 = createWeightBuf(device, 117964800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.3.0.in_layers.2.weight'));
    const buf_507 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.3.0.in_layers.2.bias'));
    const buf_508 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.3.0.out_layers.0.weight'));
    const buf_509 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.3.0.out_layers.0.bias'));
    const buf_510 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.3.0.out_layers.3.weight'));
    const buf_511 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.3.0.skip_connection.weight'));
    const buf_512 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.3.0.skip_connection.bias'));
    const buf_513 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.3.0.out_layers.3.bias'));
    const buf_514 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.norm.weight'], 'model.diffusion_model.output_blocks.3.1.norm.weight'));
    const buf_515 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.norm.bias'], 'model.diffusion_model.output_blocks.3.1.norm.bias'));
    const buf_516 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.proj_in.weight'], 'model.diffusion_model.output_blocks.3.1.proj_in.weight'));
    const buf_517 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.proj_in.bias'], 'model.diffusion_model.output_blocks.3.1.proj_in.bias'));
    const buf_518 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm1.weight'));
    const buf_519 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm1.bias'));
    const buf_520 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_521 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_522 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_523 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_524 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_525 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm2.weight'));
    const buf_526 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm2.bias'));
    const buf_527 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_528 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_529 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_530 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm3.weight'));
    const buf_531 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm3.bias'));
    const buf_532 = createWeightBuf(device, 52428800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_533 = createWeightBuf(device, 40960, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_534 = createWeightBuf(device, 26214400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_535 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_536 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.proj_out.weight'], 'model.diffusion_model.output_blocks.3.1.proj_out.weight'));
    const buf_537 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.proj_out.bias'], 'model.diffusion_model.output_blocks.3.1.proj_out.bias'));
    const buf_538 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.4.0.in_layers.0.weight'));
    const buf_539 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.4.0.in_layers.0.bias'));
    const buf_540 = createWeightBuf(device, 117964800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.4.0.in_layers.2.weight'));
    const buf_541 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.4.0.in_layers.2.bias'));
    const buf_542 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.4.0.out_layers.0.weight'));
    const buf_543 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.4.0.out_layers.0.bias'));
    const buf_544 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.4.0.out_layers.3.weight'));
    const buf_545 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.4.0.skip_connection.weight'));
    const buf_546 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.4.0.skip_connection.bias'));
    const buf_547 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.4.0.out_layers.3.bias'));
    const buf_548 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.norm.weight'], 'model.diffusion_model.output_blocks.4.1.norm.weight'));
    const buf_549 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.norm.bias'], 'model.diffusion_model.output_blocks.4.1.norm.bias'));
    const buf_550 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.proj_in.weight'], 'model.diffusion_model.output_blocks.4.1.proj_in.weight'));
    const buf_551 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.proj_in.bias'], 'model.diffusion_model.output_blocks.4.1.proj_in.bias'));
    const buf_552 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm1.weight'));
    const buf_553 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm1.bias'));
    const buf_554 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_555 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_556 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_557 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_558 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_559 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm2.weight'));
    const buf_560 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm2.bias'));
    const buf_561 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_562 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_563 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_564 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm3.weight'));
    const buf_565 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm3.bias'));
    const buf_566 = createWeightBuf(device, 52428800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_567 = createWeightBuf(device, 40960, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_568 = createWeightBuf(device, 26214400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_569 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_570 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.proj_out.weight'], 'model.diffusion_model.output_blocks.4.1.proj_out.weight'));
    const buf_571 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.proj_out.bias'], 'model.diffusion_model.output_blocks.4.1.proj_out.bias'));
    const buf_572 = createEmptyBuf(device, 3932160);;
    const buf_573 = createEmptyBuf(device, 3932160);;
    const buf_574 = createWeightBuf(device, 7680, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.5.0.in_layers.0.weight'));
    const buf_575 = createWeightBuf(device, 7680, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.5.0.in_layers.0.bias'));
    const buf_576 = createWeightBuf(device, 88473600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.5.0.in_layers.2.weight'));
    const buf_577 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.5.0.in_layers.2.bias'));
    const buf_578 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.5.0.out_layers.0.weight'));
    const buf_579 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.5.0.out_layers.0.bias'));
    const buf_580 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.5.0.out_layers.3.weight'));
    const buf_581 = createWeightBuf(device, 9830400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.5.0.skip_connection.weight'));
    const buf_582 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.5.0.skip_connection.bias'));
    const buf_583 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.5.0.out_layers.3.bias'));
    const buf_584 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.norm.weight'], 'model.diffusion_model.output_blocks.5.1.norm.weight'));
    const buf_585 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.norm.bias'], 'model.diffusion_model.output_blocks.5.1.norm.bias'));
    const buf_586 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.proj_in.weight'], 'model.diffusion_model.output_blocks.5.1.proj_in.weight'));
    const buf_587 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.proj_in.bias'], 'model.diffusion_model.output_blocks.5.1.proj_in.bias'));
    const buf_588 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm1.weight'));
    const buf_589 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm1.bias'));
    const buf_590 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_591 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_592 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_593 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_594 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_595 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm2.weight'));
    const buf_596 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm2.bias'));
    const buf_597 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_598 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_599 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_600 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm3.weight'));
    const buf_601 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm3.bias'));
    const buf_602 = createWeightBuf(device, 52428800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_603 = createWeightBuf(device, 40960, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_604 = createWeightBuf(device, 26214400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_605 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_606 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.proj_out.weight'], 'model.diffusion_model.output_blocks.5.1.proj_out.weight'));
    const buf_607 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.proj_out.bias'], 'model.diffusion_model.output_blocks.5.1.proj_out.bias'));
    const buf_608 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.2.conv.weight'], 'model.diffusion_model.output_blocks.5.2.conv.weight'));
    const buf_609 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.2.conv.bias'], 'model.diffusion_model.output_blocks.5.2.conv.bias'));
    const buf_610 = createEmptyBuf(device, 15728640);;
    const buf_611 = createEmptyBuf(device, 15728640);;
    const buf_612 = createWeightBuf(device, 7680, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.6.0.in_layers.0.weight'));
    const buf_613 = createWeightBuf(device, 7680, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.6.0.in_layers.0.bias'));
    const buf_614 = createWeightBuf(device, 44236800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.6.0.in_layers.2.weight'));
    const buf_615 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.6.0.in_layers.2.bias'));
    const buf_616 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.6.0.out_layers.0.weight'));
    const buf_617 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.6.0.out_layers.0.bias'));
    const buf_618 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.6.0.out_layers.3.weight'));
    const buf_619 = createWeightBuf(device, 4915200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.6.0.skip_connection.weight'));
    const buf_620 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.6.0.skip_connection.bias'));
    const buf_621 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.6.0.out_layers.3.bias'));
    const buf_622 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.norm.weight'], 'model.diffusion_model.output_blocks.6.1.norm.weight'));
    const buf_623 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.norm.bias'], 'model.diffusion_model.output_blocks.6.1.norm.bias'));
    const buf_624 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.proj_in.weight'], 'model.diffusion_model.output_blocks.6.1.proj_in.weight'));
    const buf_625 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.proj_in.bias'], 'model.diffusion_model.output_blocks.6.1.proj_in.bias'));
    const buf_626 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm1.weight'));
    const buf_627 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm1.bias'));
    const buf_628 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_629 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_630 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_631 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_632 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_633 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm2.weight'));
    const buf_634 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm2.bias'));
    const buf_635 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_636 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_637 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_638 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm3.weight'));
    const buf_639 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm3.bias'));
    const buf_640 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_641 = createWeightBuf(device, 20480, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_642 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_643 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_644 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.proj_out.weight'], 'model.diffusion_model.output_blocks.6.1.proj_out.weight'));
    const buf_645 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.proj_out.bias'], 'model.diffusion_model.output_blocks.6.1.proj_out.bias'));
    const buf_646 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.7.0.in_layers.0.weight'));
    const buf_647 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.7.0.in_layers.0.bias'));
    const buf_648 = createWeightBuf(device, 29491200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.7.0.in_layers.2.weight'));
    const buf_649 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.7.0.in_layers.2.bias'));
    const buf_650 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.7.0.out_layers.0.weight'));
    const buf_651 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.7.0.out_layers.0.bias'));
    const buf_652 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.7.0.out_layers.3.weight'));
    const buf_653 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.7.0.skip_connection.weight'));
    const buf_654 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.7.0.skip_connection.bias'));
    const buf_655 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.7.0.out_layers.3.bias'));
    const buf_656 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.norm.weight'], 'model.diffusion_model.output_blocks.7.1.norm.weight'));
    const buf_657 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.norm.bias'], 'model.diffusion_model.output_blocks.7.1.norm.bias'));
    const buf_658 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.proj_in.weight'], 'model.diffusion_model.output_blocks.7.1.proj_in.weight'));
    const buf_659 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.proj_in.bias'], 'model.diffusion_model.output_blocks.7.1.proj_in.bias'));
    const buf_660 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm1.weight'));
    const buf_661 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm1.bias'));
    const buf_662 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_663 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_664 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_665 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_666 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_667 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm2.weight'));
    const buf_668 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm2.bias'));
    const buf_669 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_670 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_671 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_672 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm3.weight'));
    const buf_673 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm3.bias'));
    const buf_674 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_675 = createWeightBuf(device, 20480, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_676 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_677 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_678 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.proj_out.weight'], 'model.diffusion_model.output_blocks.7.1.proj_out.weight'));
    const buf_679 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.proj_out.bias'], 'model.diffusion_model.output_blocks.7.1.proj_out.bias'));
    const buf_680 = createEmptyBuf(device, 7864320);;
    const buf_681 = createEmptyBuf(device, 7864320);;
    const buf_682 = createWeightBuf(device, 3840, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.8.0.in_layers.0.weight'));
    const buf_683 = createWeightBuf(device, 3840, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.8.0.in_layers.0.bias'));
    const buf_684 = createWeightBuf(device, 22118400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.8.0.in_layers.2.weight'));
    const buf_685 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.8.0.in_layers.2.bias'));
    const buf_686 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.8.0.out_layers.0.weight'));
    const buf_687 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.8.0.out_layers.0.bias'));
    const buf_688 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.8.0.out_layers.3.weight'));
    const buf_689 = createWeightBuf(device, 2457600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.8.0.skip_connection.weight'));
    const buf_690 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.8.0.skip_connection.bias'));
    const buf_691 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.8.0.out_layers.3.bias'));
    const buf_692 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.norm.weight'], 'model.diffusion_model.output_blocks.8.1.norm.weight'));
    const buf_693 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.norm.bias'], 'model.diffusion_model.output_blocks.8.1.norm.bias'));
    const buf_694 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.proj_in.weight'], 'model.diffusion_model.output_blocks.8.1.proj_in.weight'));
    const buf_695 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.proj_in.bias'], 'model.diffusion_model.output_blocks.8.1.proj_in.bias'));
    const buf_696 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm1.weight'));
    const buf_697 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm1.bias'));
    const buf_698 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_699 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_700 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_701 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_702 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_703 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm2.weight'));
    const buf_704 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm2.bias'));
    const buf_705 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_706 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_707 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_708 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm3.weight'));
    const buf_709 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm3.bias'));
    const buf_710 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_711 = createWeightBuf(device, 20480, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_712 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_713 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_714 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.proj_out.weight'], 'model.diffusion_model.output_blocks.8.1.proj_out.weight'));
    const buf_715 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.proj_out.bias'], 'model.diffusion_model.output_blocks.8.1.proj_out.bias'));
    const buf_716 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.2.conv.weight'], 'model.diffusion_model.output_blocks.8.2.conv.weight'));
    const buf_717 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.2.conv.bias'], 'model.diffusion_model.output_blocks.8.2.conv.bias'));
    const buf_718 = createEmptyBuf(device, 31457280);;
    const buf_719 = createEmptyBuf(device, 31457280);;
    const buf_720 = createWeightBuf(device, 3840, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.9.0.in_layers.0.weight'));
    const buf_721 = createWeightBuf(device, 3840, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.9.0.in_layers.0.bias'));
    const buf_722 = createWeightBuf(device, 11059200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.9.0.in_layers.2.weight'));
    const buf_723 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.9.0.in_layers.2.bias'));
    const buf_724 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.9.0.out_layers.0.weight'));
    const buf_725 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.9.0.out_layers.0.bias'));
    const buf_726 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.9.0.out_layers.3.weight'));
    const buf_727 = createWeightBuf(device, 1228800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.9.0.skip_connection.weight'));
    const buf_728 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.9.0.skip_connection.bias'));
    const buf_729 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.9.0.out_layers.3.bias'));
    const buf_730 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.norm.weight'], 'model.diffusion_model.output_blocks.9.1.norm.weight'));
    const buf_731 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.norm.bias'], 'model.diffusion_model.output_blocks.9.1.norm.bias'));
    const buf_732 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.proj_in.weight'], 'model.diffusion_model.output_blocks.9.1.proj_in.weight'));
    const buf_733 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.proj_in.bias'], 'model.diffusion_model.output_blocks.9.1.proj_in.bias'));
    const buf_734 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm1.weight'));
    const buf_735 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm1.bias'));
    const buf_736 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_737 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_738 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_739 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_740 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_741 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm2.weight'));
    const buf_742 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm2.bias'));
    const buf_743 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_744 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_745 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_746 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm3.weight'));
    const buf_747 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm3.bias'));
    const buf_748 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_749 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_750 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_751 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_752 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.proj_out.weight'], 'model.diffusion_model.output_blocks.9.1.proj_out.weight'));
    const buf_753 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.proj_out.bias'], 'model.diffusion_model.output_blocks.9.1.proj_out.bias'));
    const buf_754 = createEmptyBuf(device, 20971520);;
    const buf_755 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.10.0.in_layers.0.weight'));
    const buf_756 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.10.0.in_layers.0.bias'));
    const buf_757 = createWeightBuf(device, 7372800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.10.0.in_layers.2.weight'));
    const buf_758 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.10.0.in_layers.2.bias'));
    const buf_759 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.10.0.out_layers.0.weight'));
    const buf_760 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.10.0.out_layers.0.bias'));
    const buf_761 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.10.0.out_layers.3.weight'));
    const buf_762 = createWeightBuf(device, 819200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.10.0.skip_connection.weight'));
    const buf_763 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.10.0.skip_connection.bias'));
    const buf_764 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.10.0.out_layers.3.bias'));
    const buf_765 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.norm.weight'], 'model.diffusion_model.output_blocks.10.1.norm.weight'));
    const buf_766 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.norm.bias'], 'model.diffusion_model.output_blocks.10.1.norm.bias'));
    const buf_767 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.proj_in.weight'], 'model.diffusion_model.output_blocks.10.1.proj_in.weight'));
    const buf_768 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.proj_in.bias'], 'model.diffusion_model.output_blocks.10.1.proj_in.bias'));
    const buf_769 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm1.weight'));
    const buf_770 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm1.bias'));
    const buf_771 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_772 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_773 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_774 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_775 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_776 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm2.weight'));
    const buf_777 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm2.bias'));
    const buf_778 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_779 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_780 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_781 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm3.weight'));
    const buf_782 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm3.bias'));
    const buf_783 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_784 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_785 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_786 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_787 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.proj_out.weight'], 'model.diffusion_model.output_blocks.10.1.proj_out.weight'));
    const buf_788 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.proj_out.bias'], 'model.diffusion_model.output_blocks.10.1.proj_out.bias'));
    const buf_789 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.11.0.in_layers.0.weight'));
    const buf_790 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.11.0.in_layers.0.bias'));
    const buf_791 = createWeightBuf(device, 7372800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.11.0.in_layers.2.weight'));
    const buf_792 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.11.0.in_layers.2.bias'));
    const buf_793 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.11.0.out_layers.0.weight'));
    const buf_794 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.11.0.out_layers.0.bias'));
    const buf_795 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.11.0.out_layers.3.weight'));
    const buf_796 = createWeightBuf(device, 819200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.11.0.skip_connection.weight'));
    const buf_797 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.11.0.skip_connection.bias'));
    const buf_798 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.11.0.out_layers.3.bias'));
    const buf_799 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.norm.weight'], 'model.diffusion_model.output_blocks.11.1.norm.weight'));
    const buf_800 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.norm.bias'], 'model.diffusion_model.output_blocks.11.1.norm.bias'));
    const buf_801 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.proj_in.weight'], 'model.diffusion_model.output_blocks.11.1.proj_in.weight'));
    const buf_802 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.proj_in.bias'], 'model.diffusion_model.output_blocks.11.1.proj_in.bias'));
    const buf_803 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm1.weight'));
    const buf_804 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm1.bias'));
    const buf_805 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_806 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_807 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_808 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_809 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_810 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm2.weight'));
    const buf_811 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm2.bias'));
    const buf_812 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_813 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_814 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_815 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm3.weight'));
    const buf_816 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm3.bias'));
    const buf_817 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_818 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_819 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_820 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_821 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.proj_out.weight'], 'model.diffusion_model.output_blocks.11.1.proj_out.weight'));
    const buf_822 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.proj_out.bias'], 'model.diffusion_model.output_blocks.11.1.proj_out.bias'));
    const buf_823 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.out.0.weight'], 'model.diffusion_model.out.0.weight'));
    const buf_824 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.out.0.bias'], 'model.diffusion_model.out.0.bias'));
    const buf_825 = createEmptyBuf(device, 131072);;
    const buf_826 = createWeightBuf(device, 46080, getTensorBuffer(safetensor, metadata['model.diffusion_model.out.2.weight'], 'model.diffusion_model.out.2.weight'));
    const buf_827 = createWeightBuf(device, 16, getTensorBuffer(safetensor, metadata['model.diffusion_model.out.2.bias'], 'model.diffusion_model.out.2.bias'));
    const output0 = createEmptyBuf(device, 65536);;
    const input6 = createEmptyBuf(device, 4);;

        const gpuWriteBuffer0 = device.createBuffer({size:input0.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
    const gpuWriteBuffer1 = device.createBuffer({size:input1.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
    const gpuWriteBuffer2 = device.createBuffer({size:input2.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
    const gpuWriteBuffer3 = device.createBuffer({size:input3.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
    const gpuWriteBuffer4 = device.createBuffer({size:input4.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
    const gpuWriteBuffer5 = device.createBuffer({size:input5.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
    const gpuWriteBuffer6 = device.createBuffer({size:input6.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
        const gpuReadBuffer = device.createBuffer({ size: output0.size, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ });

        const kernels = [E_n63, E_n64, r2_160_16_10, E_1848_32_2, E_n63, E_n64, r_2_80_8_8_16_4_4_4_3_3, E_5_16_4, r_77_5_2_16_192_4_4, r_77_5_2_16_192_4_4, r_77_5_2_16_192_4_4, r_77_5_2_16_192_4_4, r_77_10_2_16_192_4_4, r_77_10_2_16_192_4_4, r_77_10_2_16_192_4_4, r_77_10_2_16_192_4_4, r_77_20_2_16_192_4_4, r_77_20_2_16_192_4_4, r_77_20_2_16_192_4_4, r_77_20_2_16_192_4_4, r_77_20_2_16_192_4_4, r_77_20_2_16_192_4_4, r_77_20_2_16_192_4_4, r_77_20_2_16_192_4_4, r_77_20_2_16_192_4_4, r_77_20_2_16_192_4_4, r_77_20_2_16_192_4_4, r_77_20_2_16_192_4_4, r_77_10_2_16_192_4_4, r_77_10_2_16_192_4_4, r_77_10_2_16_192_4_4, r_77_10_2_16_192_4_4, r_77_10_2_16_192_4_4, r_77_10_2_16_192_4_4, r_77_5_2_16_192_4_4, r_77_5_2_16_192_4_4, r_77_5_2_16_192_4_4, r_77_5_2_16_192_4_4, r_77_5_2_16_192_4_4, r_77_5_2_16_192_4_4, r_512_32_40_4, r_80_4_8_40_4, r_64_16_16, r_80_4_8_160_4, r_8_4_8_16_40_4_4, r_20_4_8_160_4, r_20_4_8_160_4, r_40_4_8_160_4, r_40_4_8_160_4, r_80_4_8_160_4n1, r_80_4_8_160_4n1, r_80_4_8_160_4n1, r_80_4_8_160_4n1, r_80_4_8_160_4n1, r_80_4_8_160_4n1, r_80_4_8_160_4n1, r_80_4_8_160_4n1, r_80_4_8_160_4n1, r_80_4_8_160_4n1, r_80_4_8_160_4n1, r_80_4_8_160_4n1, r_40_4_8_160_4, r_40_4_8_160_4, r_40_4_8_160_4, r_20_4_8_160_4, r_20_4_8_160_4, r_20_4_8_160_4, r_64_16_16n1, E_2_40_64_8_16_4, r_2_80_8_8_16_320_4_4_3_3, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_40_64_8_16_4, r_2_80_8_8_16_320_4_4_3_3n1, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_40_64_8_16_4n1, r_2_10_64_8_16_80_4_4_4, r_64_2_16_80_4_4, r_64_2_16_80_4_4n1, E_2_128_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_2_8_128_64_8_16_10_4_4_4, r_2048_32_1024_4, r_512_32_1024_4_4, E_8192_64_8_16_4, r_2_2_64_5_4_16_2_1024_4_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_2_64_77_8_16_10_4_4, r_2048_32_77, r_512_32_77_4, E_512_77_32_4, r_2_2_64_5_4_16_2_77_4_4, r_2_128_5_8_16_80_4_4_4n1, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_40_8_16_80_4_4_4, E_1024_20_8_16_4, r_256_5_8_16_320_4_4_4, r_2_10_64_8_16_80_4_4_4n1, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_40_64_8_16_4, r_2_80_8_8_16_320_4_4_3_3, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_40_64_8_16_4, r_2_80_8_8_16_320_4_4_3_3n1, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_40_64_8_16_4n1, r_2_10_64_8_16_80_4_4_4, r_64_2_16_80_4_4, r_64_2_16_80_4_4n1, E_2_128_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_2_8_128_64_8_16_10_4_4_4, r_2048_32_1024_4, r_512_32_1024_4_4, E_8192_64_8_16_4, r_2_2_64_5_4_16_2_1024_4_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_2_64_77_8_16_10_4_4, r_2048_32_77, r_512_32_77_4, E_512_77_32_4, r_2_2_64_5_4_16_2_77_4_4, r_2_128_5_8_16_80_4_4_4n1, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_40_8_16_80_4_4_4, E_1024_20_8_16_4, r_256_5_8_16_320_4_4_4, r_2_10_64_8_16_80_4_4_4n1, r_2_80_2_16_8_320_4_4_3_3, r_64_16_640, r_64_16_640n1, E_2_40_16_8_16_4, r_2_160_2_16_8_320_4_4_3_3, r_64_16_1280, r_64_16_1280n1, E_2_80_16_8_16_4, r_2_160_2_16_8_640_4_4_3_3, r_2_20_16_8_16_80_4_4_4, r_64_16_1280, r_64_16_1280n1, E_2_80_16_8_16_4n1, r_2_20_16_8_16_160_4_4_4, r_2_1024_16_40, r_2_1024_16_40n1, E_2_32_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_2_8_32_16_8_16_20_4_4_4, r_512_32_256_4, r_128_32_256_4_4, E_2048_16_8_16_4, r_2_4_16_5_2_16_4_256_4_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_2_16_77_8_16_20_4_4, r_512_32_77, r_128_32_77_4, E_128_77_32_4, r_2_4_16_5_2_16_4_77_4_4, r_2_32_10_8_16_160_4_4_4n1, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_80_8_16_160_4_4_4, E_256_40_8_16_4, r_64_10_8_16_640_4_4_4, r_2_20_16_8_16_160_4_4_4n1, r_64_16_1280, r_64_16_1280n1, E_2_80_16_8_16_4, r_2_160_2_16_8_640_4_4_3_3n1, r_64_16_1280, r_64_16_1280n1, E_2_80_16_8_16_4, r_2_160_2_16_8_640_4_4_3_3n2, r_64_16_1280, r_64_16_1280n1, E_2_80_16_8_16_4n1, r_2_20_16_8_16_160_4_4_4, r_2_1024_16_40, r_2_1024_16_40n1, E_2_32_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_2_8_32_16_8_16_20_4_4_4, r_512_32_256_4, r_128_32_256_4_4, E_2048_16_8_16_4, r_2_4_16_5_2_16_4_256_4_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_2_16_77_8_16_20_4_4, r_512_32_77, r_128_32_77_4, E_128_77_32_4, r_2_4_16_5_2_16_4_77_4_4, r_2_32_10_8_16_160_4_4_4n1, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_80_8_16_160_4_4_4, E_256_40_8_16_4, r_64_10_8_16_640_4_4_4, r_2_20_16_8_16_160_4_4_4n1, r_2_80_2_16_4_640_4_4_3_3, r_64_16_320, r_64_16_320n1, E_2_80_4_8_16_4, r_2_160_2_16_4_640_4_4_3_3, r_64_16_640, r_64_16_640n1, E_2_160_4_8_16_4, r_2_160_2_16_4_1280_4_4_3_3, r_2_40_4_8_16_160_4_4_4, r_64_16_640, r_64_16_640n1, E_2_160_4_8_16_4n1, r_2_40_4_8_16_320_4_4_4, r_2_256_16_80, r_2_256_16_80n1, E_2_8_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_2_8_8_4_8_16_40_4_4_4, r_128_32_64_4, r_32_32_64_4_4, E_512_4_8_16_4, r_2_8_4_5_16_8_64_4_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_2_4_77_8_16_40_4_4, r_128_32_77, r_32_32_77_4, E_32_77_32_4, r_2_8_4_5_16_8_77_4_4, r_2_8_20_8_16_320_4_4_4n1, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_160_8_16_320_4_4_4, E_64_80_8_16_4, r_16_20_8_16_1280_4_4_4, r_2_40_4_8_16_320_4_4_4n1, r_64_16_640, r_64_16_640n1, E_2_160_4_8_16_4, r_2_160_2_16_4_1280_4_4_3_3n1, r_64_16_640, r_64_16_640n1, E_2_160_4_8_16_4, r_2_160_2_16_4_1280_4_4_3_3n2, r_64_16_640, r_64_16_640n1, E_2_160_4_8_16_4n1, r_2_40_4_8_16_320_4_4_4, r_2_256_16_80, r_2_256_16_80n1, E_2_8_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_2_8_8_4_8_16_40_4_4_4, r_128_32_64_4, r_32_32_64_4_4, E_512_4_8_16_4, r_2_8_4_5_16_8_64_4_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_2_4_77_8_16_40_4_4, r_128_32_77, r_32_32_77_4, E_32_77_32_4, r_2_8_4_5_16_8_77_4_4, r_2_8_20_8_16_320_4_4_4n1, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_160_8_16_320_4_4_4, E_64_80_8_16_4, r_16_20_8_16_1280_4_4_4, r_2_40_4_8_16_320_4_4_4n1, r_2_40_8_8_2_1280_4_4_3_3, r_64_16_160, r_64_16_160n1, E_2_160_8_16_4, r_2_40_8_8_2_1280_4_4_3_3n1, r_64_16_160, r_64_16_160n1, E_2_160_8_16_4, r_2_40_8_8_2_1280_4_4_3_3n2, r_64_16_160, r_64_16_160n1, E_2_160_8_16_4, r_2_40_8_8_2_1280_4_4_3_3n1, r_64_16_160, r_64_16_160n1, E_2_160_8_16_4, r_2_40_8_8_2_1280_4_4_3_3n2, r_64_16_160, r_64_16_160n1, E_2_160_8_16_4, r_2_40_8_8_2_1280_4_4_3_3n1, r_64_16_160, r_64_16_160n1, E_2_160_8_16_4, r_2_40_8_8_2_1280_4_4_3_3n2, r_64_16_160, r_64_16_160n1, E_2_160_8_16_4n1, r_2_40_8_16_320_4_4_4, r_2_64_16_80, r_2_64_16_80n1, E_2_2_20_8_16_4_4, r_4_20_8_16_320_4_4_4, r_4_20_8_16_320_4_4_4, r_4_20_8_16_320_4_4_4, r_2_8_2_8_16_40_4_4_4, r_1024_16_4, r_1024_16_4n1, E_128_8_16_4, r_2_8_5_16_8_16_4_4_4, r_2_2_20_8_16_320_4_4_4, r_128_16_80, r_128_16_80n1, E_4_20_8_16_4_4, r_4_20_8_16_320_4_4_4, r_2_77_8_16_40_4_4, r_32_32_77, r_8_32_77_4, E_8_77_32_4, r_2_8_5_16_8_77_4_4, r_2_2_20_8_16_320_4_4_4n1, r_128_16_80, r_128_16_80n1, E_4_20_8_16_4_4, r_4_160_8_16_320_4_4_4, E_16_80_8_16_4, r_4_20_8_16_1280_4_4_4, r_2_40_8_16_320_4_4_4n1, r_64_16_160, r_64_16_160n1, E_2_160_8_16_4, r_2_40_8_8_2_1280_4_4_3_3n1, r_64_16_160, r_64_16_160n1, E_2_160_8_16_4, r_2_40_8_8_2_1280_4_4_3_3n2, E_2_320_8_16_4, r_64_16_320, r_64_16_320n1, E_2_320_8_16_4n1, r_2_40_8_8_2_2560_4_4_3_3, r_64_16_160, r_64_16_160n1, E_2_160_8_16_4, r_2_40_8_8_2_1280_4_4_3_3n3, r_2_40_8_16_640_4_4_4, E_2_320_8_16_4, r_64_16_320, r_64_16_320n1, E_2_320_8_16_4n1, r_2_40_8_8_2_2560_4_4_3_3, r_64_16_160, r_64_16_160n1, E_2_160_8_16_4, r_2_40_8_8_2_1280_4_4_3_3n3, r_2_40_8_16_640_4_4_4, E_2_320_8_16_4, r_64_16_320, r_64_16_320n1, E_2_320_8_16_4n1, r_2_40_8_8_2_2560_4_4_3_3, r_64_16_160, r_64_16_160n1, E_2_160_8_16_4, r_2_40_8_8_2_1280_4_4_3_3n3, r_2_40_8_16_640_4_4_4, r_2_160_2_16_4_1280_4_4_3_3n3, E_2_320_4_8_16_4, r_64_16_1280, r_64_16_1280n1, E_2_320_4_8_16_4n1, r_2_160_2_16_4_2560_4_4_3_3, r_64_16_640, r_64_16_640n1, E_2_160_4_8_16_4, r_2_160_2_16_4_1280_4_4_3_3, r_2_40_4_8_16_640_4_4_4, r_64_16_640, r_64_16_640n1, E_2_160_4_8_16_4n1, r_2_40_4_8_16_320_4_4_4, r_2_256_16_80, r_2_256_16_80n1, E_2_8_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_2_8_8_4_8_16_40_4_4_4, r_128_32_64_4, r_32_32_64_4_4, E_512_4_8_16_4, r_2_8_4_5_16_8_64_4_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_2_4_77_8_16_40_4_4, r_128_32_77, r_32_32_77_4, E_32_77_32_4, r_2_8_4_5_16_8_77_4_4, r_2_8_20_8_16_320_4_4_4n1, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_160_8_16_320_4_4_4, E_64_80_8_16_4, r_16_20_8_16_1280_4_4_4, r_2_40_4_8_16_320_4_4_4n1, E_2_320_4_8_16_4, r_64_16_1280, r_64_16_1280n1, E_2_320_4_8_16_4n1, r_2_160_2_16_4_2560_4_4_3_3, r_64_16_640, r_64_16_640n1, E_2_160_4_8_16_4, r_2_160_2_16_4_1280_4_4_3_3, r_2_40_4_8_16_640_4_4_4, r_64_16_640, r_64_16_640n1, E_2_160_4_8_16_4n1, r_2_40_4_8_16_320_4_4_4, r_2_256_16_80, r_2_256_16_80n1, E_2_8_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_2_8_8_4_8_16_40_4_4_4, r_128_32_64_4, r_32_32_64_4_4, E_512_4_8_16_4, r_2_8_4_5_16_8_64_4_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_2_4_77_8_16_40_4_4, r_128_32_77, r_32_32_77_4, E_32_77_32_4, r_2_8_4_5_16_8_77_4_4, r_2_8_20_8_16_320_4_4_4n1, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_160_8_16_320_4_4_4, E_64_80_8_16_4, r_16_20_8_16_1280_4_4_4, r_2_40_4_8_16_320_4_4_4n1, E_2_240_4_8_16_4, r_64_16_960, r_64_16_960n1, E_2_240_4_8_16_4n1, r_2_160_2_16_4_1920_4_4_3_3, r_64_16_640, r_64_16_640n1, E_2_160_4_8_16_4, r_2_160_2_16_4_1280_4_4_3_3, r_2_40_4_8_16_480_4_4_4, r_64_16_640, r_64_16_640n1, E_2_160_4_8_16_4n1, r_2_40_4_8_16_320_4_4_4, r_2_256_16_80, r_2_256_16_80n1, E_2_8_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_2_8_8_4_8_16_40_4_4_4, r_128_32_64_4, r_32_32_64_4_4, E_512_4_8_16_4, r_2_8_4_5_16_8_64_4_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_2_4_77_8_16_40_4_4, r_128_32_77, r_32_32_77_4, E_32_77_32_4, r_2_8_4_5_16_8_77_4_4, r_2_8_20_8_16_320_4_4_4n1, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_160_8_16_320_4_4_4, E_64_80_8_16_4, r_16_20_8_16_1280_4_4_4, r_2_40_4_8_16_320_4_4_4n1, r_2_320_2_16_8_1280_4_4_3_3, E_2_240_16_8_16_4, r_512_32_60_4, r_64_16_16n2, r_8_4_8_16_60_4_4, r_64_16_16n3, E_2_240_16_8_16_4n1, r_2_160_2_16_8_1920_4_4_3_3, r_64_16_1280, r_64_16_1280n1, E_2_80_16_8_16_4, r_2_160_2_16_8_640_4_4_3_3, r_2_20_16_8_16_480_4_4_4, r_64_16_1280, r_64_16_1280n1, E_2_80_16_8_16_4n1, r_2_20_16_8_16_160_4_4_4, r_2_1024_16_40, r_2_1024_16_40n1, E_2_32_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_2_8_32_16_8_16_20_4_4_4, r_512_32_256_4, r_128_32_256_4_4, E_2048_16_8_16_4, r_2_4_16_5_2_16_4_256_4_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_2_16_77_8_16_20_4_4, r_512_32_77, r_128_32_77_4, E_128_77_32_4, r_2_4_16_5_2_16_4_77_4_4, r_2_32_10_8_16_160_4_4_4n1, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_80_8_16_160_4_4_4, E_256_40_8_16_4, r_64_10_8_16_640_4_4_4, r_2_20_16_8_16_160_4_4_4n1, E_2_160_16_8_16_4, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_160_16_8_16_4n1, r_2_160_2_16_8_1280_4_4_3_3, r_64_16_1280, r_64_16_1280n1, E_2_80_16_8_16_4, r_2_160_2_16_8_640_4_4_3_3, r_2_20_16_8_16_320_4_4_4, r_64_16_1280, r_64_16_1280n1, E_2_80_16_8_16_4n1, r_2_20_16_8_16_160_4_4_4, r_2_1024_16_40, r_2_1024_16_40n1, E_2_32_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_2_8_32_16_8_16_20_4_4_4, r_512_32_256_4, r_128_32_256_4_4, E_2048_16_8_16_4, r_2_4_16_5_2_16_4_256_4_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_2_16_77_8_16_20_4_4, r_512_32_77, r_128_32_77_4, E_128_77_32_4, r_2_4_16_5_2_16_4_77_4_4, r_2_32_10_8_16_160_4_4_4n1, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_80_8_16_160_4_4_4, E_256_40_8_16_4, r_64_10_8_16_640_4_4_4, r_2_20_16_8_16_160_4_4_4n1, E_2_120_16_8_16_4, r_64_16_1920, r_64_16_1920n1, E_2_120_16_8_16_4n1, r_2_160_2_16_8_960_4_4_3_3, r_64_16_1280, r_64_16_1280n1, E_2_80_16_8_16_4, r_2_160_2_16_8_640_4_4_3_3, r_2_20_16_8_16_240_4_4_4, r_64_16_1280, r_64_16_1280n1, E_2_80_16_8_16_4n1, r_2_20_16_8_16_160_4_4_4, r_2_1024_16_40, r_2_1024_16_40n1, E_2_32_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_2_8_32_16_8_16_20_4_4_4, r_512_32_256_4, r_128_32_256_4_4, E_2048_16_8_16_4, r_2_4_16_5_2_16_4_256_4_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_2_16_77_8_16_20_4_4, r_512_32_77, r_128_32_77_4, E_128_77_32_4, r_2_4_16_5_2_16_4_77_4_4, r_2_32_10_8_16_160_4_4_4n1, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_80_8_16_160_4_4_4, E_256_40_8_16_4, r_64_10_8_16_640_4_4_4, r_2_20_16_8_16_160_4_4_4n1, r_2_160_8_8_16_640_4_4_3_3, E_2_120_64_8_16_4, r_512_32_120_4, r_64_16_16n4, r_8_4_8_16_120_4_4, r_64_16_16n5, E_2_120_64_8_16_4n1, r_2_80_8_8_16_960_4_4_3_3, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_40_64_8_16_4, r_2_80_8_8_16_320_4_4_3_3n2, r_2_10_64_8_16_240_4_4_4, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_40_64_8_16_4n1, r_2_10_64_8_16_80_4_4_4, r_64_2_16_80_4_4, r_64_2_16_80_4_4n1, E_2_128_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_2_8_128_64_8_16_10_4_4_4, r_2048_32_1024_4, r_512_32_1024_4_4, E_8192_64_8_16_4, r_2_2_64_5_4_16_2_1024_4_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_2_64_77_8_16_10_4_4, r_2048_32_77, r_512_32_77_4, E_512_77_32_4, r_2_2_64_5_4_16_2_77_4_4, r_2_128_5_8_16_80_4_4_4n1, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_40_8_16_80_4_4_4, E_1024_20_8_16_4, r_256_5_8_16_320_4_4_4, r_2_10_64_8_16_80_4_4_4n1, E_2_80_64_8_16_4, r_512_32_80_4, r_64_16_16n6, r_8_4_8_16_80_4_4, r_64_16_16n7, E_2_80_64_8_16_4n1, r_2_80_8_8_16_640_4_4_3_3, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_40_64_8_16_4, r_2_80_8_8_16_320_4_4_3_3n2, r_2_10_64_8_16_160_4_4_4, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_40_64_8_16_4n1, r_2_10_64_8_16_80_4_4_4, r_64_2_16_80_4_4, r_64_2_16_80_4_4n1, E_2_128_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_2_8_128_64_8_16_10_4_4_4, r_2048_32_1024_4, r_512_32_1024_4_4, E_8192_64_8_16_4, r_2_2_64_5_4_16_2_1024_4_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_2_64_77_8_16_10_4_4, r_2048_32_77, r_512_32_77_4, E_512_77_32_4, r_2_2_64_5_4_16_2_77_4_4, r_2_128_5_8_16_80_4_4_4n1, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_40_8_16_80_4_4_4, E_1024_20_8_16_4, r_256_5_8_16_320_4_4_4, r_2_10_64_8_16_80_4_4_4n1, E_2_80_64_8_16_4, r_512_32_80_4, r_64_16_16n6, r_8_4_8_16_80_4_4, r_64_16_16n7, E_2_80_64_8_16_4n1, r_2_80_8_8_16_640_4_4_3_3, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_40_64_8_16_4, r_2_80_8_8_16_320_4_4_3_3n2, r_2_10_64_8_16_160_4_4_4, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_40_64_8_16_4n1, r_2_10_64_8_16_80_4_4_4, r_64_2_16_80_4_4, r_64_2_16_80_4_4n1, E_2_128_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_2_8_128_64_8_16_10_4_4_4, r_2048_32_1024_4, r_512_32_1024_4_4, E_8192_64_8_16_4, r_2_2_64_5_4_16_2_1024_4_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_2_64_77_8_16_10_4_4, r_2048_32_77, r_512_32_77_4, E_512_77_32_4, r_2_2_64_5_4_16_2_77_4_4, r_2_128_5_8_16_80_4_4_4n1, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_40_8_16_80_4_4_4, E_1024_20_8_16_4, r_256_5_8_16_320_4_4_4, r_2_10_64_8_16_80_4_4_4n1, r_512_32_40_4, r_64_16_16, r_8_4_8_16_40_4_4, r_64_16_16n1, E_2_40_64_8_16_4, r_2_8_8_16_320_4_4_3_3, E_128_32_4n2];
        const piplines = await Promise.all(kernels.map(name => device.createComputePipelineAsync({layout: "auto", compute: { module: device.createShaderModule({ code: name }), entryPoint: "main" }})));

        return async (data0,data1,data2,data3,data4,data5,data6) => {
            const commandEncoder = device.createCommandEncoder();

            await gpuWriteBuffer0.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer0.getMappedRange()).set(data0);
    gpuWriteBuffer0.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer0, 0, input0, 0, gpuWriteBuffer0.size);
    await gpuWriteBuffer1.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer1.getMappedRange()).set(data1);
    gpuWriteBuffer1.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer1, 0, input1, 0, gpuWriteBuffer1.size);
    await gpuWriteBuffer2.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer2.getMappedRange()).set(data2);
    gpuWriteBuffer2.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer2, 0, input2, 0, gpuWriteBuffer2.size);
    await gpuWriteBuffer3.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer3.getMappedRange()).set(data3);
    gpuWriteBuffer3.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer3, 0, input3, 0, gpuWriteBuffer3.size);
    await gpuWriteBuffer4.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer4.getMappedRange()).set(data4);
    gpuWriteBuffer4.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer4, 0, input4, 0, gpuWriteBuffer4.size);
    await gpuWriteBuffer5.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer5.getMappedRange()).set(data5);
    gpuWriteBuffer5.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer5, 0, input5, 0, gpuWriteBuffer5.size);
    await gpuWriteBuffer6.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer6.getMappedRange()).set(data6);
    gpuWriteBuffer6.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer6, 0, input6, 0, gpuWriteBuffer6.size);

            addComputePass(device, commandEncoder, piplines[0], [buf_0, input5], [1, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1], [buf_1, input4], [1, 1, 1]);
        addComputePass(device, commandEncoder, piplines[2], [buf_2, input3, buf_3], [160, 1, 1]);
        addComputePass(device, commandEncoder, piplines[3], [buf_4, input0, input1], [1848, 1, 1]);
        addComputePass(device, commandEncoder, piplines[4], [buf_5, input4], [1, 1, 1]);
        addComputePass(device, commandEncoder, piplines[5], [buf_6, input5], [1, 1, 1]);
        addComputePass(device, commandEncoder, piplines[6], [buf_7, input2, buf_8, buf_9], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[7], [buf_10, buf_2, buf_3], [5, 1, 1]);
        addComputePass(device, commandEncoder, piplines[8], [buf_11, buf_4, buf_12], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[9], [buf_13, buf_4, buf_14], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[10], [buf_15, buf_4, buf_16], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[11], [buf_17, buf_4, buf_18], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[12], [buf_19, buf_4, buf_20], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[13], [buf_21, buf_4, buf_22], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[14], [buf_23, buf_4, buf_24], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[15], [buf_25, buf_4, buf_26], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[16], [buf_27, buf_4, buf_28], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[17], [buf_29, buf_4, buf_30], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[18], [buf_31, buf_4, buf_32], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[19], [buf_33, buf_4, buf_34], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[20], [buf_35, buf_4, buf_36], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[21], [buf_37, buf_4, buf_38], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[22], [buf_39, buf_4, buf_40], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[23], [buf_41, buf_4, buf_42], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[24], [buf_43, buf_4, buf_44], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[25], [buf_45, buf_4, buf_46], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[26], [buf_47, buf_4, buf_48], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[27], [buf_49, buf_4, buf_50], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[28], [buf_51, buf_4, buf_52], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[29], [buf_53, buf_4, buf_54], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[30], [buf_55, buf_4, buf_56], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[31], [buf_57, buf_4, buf_58], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[32], [buf_59, buf_4, buf_60], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[33], [buf_61, buf_4, buf_62], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[34], [buf_63, buf_4, buf_64], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[35], [buf_65, buf_4, buf_66], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[36], [buf_67, buf_4, buf_68], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[37], [buf_69, buf_4, buf_70], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[38], [buf_71, buf_4, buf_72], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[39], [buf_73, buf_4, buf_74], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[40], [buf_75, buf_7], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[41], [buf_76, buf_10, buf_77, buf_78], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[42], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[43], [buf_80, buf_76, buf_81, buf_82], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[44], [buf_75, buf_7, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[45], [buf_10, buf_80, buf_83, buf_84], [20, 1, 1]);
        addComputePass(device, commandEncoder, piplines[46], [buf_85, buf_80, buf_86, buf_87], [20, 1, 1]);
        addComputePass(device, commandEncoder, piplines[47], [buf_88, buf_80, buf_89, buf_90], [40, 1, 1]);
        addComputePass(device, commandEncoder, piplines[48], [buf_91, buf_80, buf_92, buf_93], [40, 1, 1]);
        addComputePass(device, commandEncoder, piplines[49], [buf_76, buf_80, buf_94, buf_95], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[50], [buf_96, buf_80, buf_97, buf_98], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[51], [buf_99, buf_80, buf_100, buf_101], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[52], [buf_102, buf_80, buf_103, buf_104], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[53], [buf_105, buf_80, buf_106, buf_107], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[54], [buf_108, buf_80, buf_109, buf_110], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[55], [buf_111, buf_80, buf_112, buf_113], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[56], [buf_114, buf_80, buf_115, buf_116], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[57], [buf_117, buf_80, buf_118, buf_119], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[58], [buf_120, buf_80, buf_121, buf_122], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[59], [buf_123, buf_80, buf_124, buf_125], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[60], [buf_126, buf_80, buf_127, buf_128], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[61], [buf_129, buf_80, buf_130, buf_131], [40, 1, 1]);
        addComputePass(device, commandEncoder, piplines[62], [buf_132, buf_80, buf_133, buf_134], [40, 1, 1]);
        addComputePass(device, commandEncoder, piplines[63], [buf_135, buf_80, buf_136, buf_137], [40, 1, 1]);
        addComputePass(device, commandEncoder, piplines[64], [buf_138, buf_80, buf_139, buf_140], [20, 1, 1]);
        addComputePass(device, commandEncoder, piplines[65], [buf_141, buf_80, buf_142, buf_143], [20, 1, 1]);
        addComputePass(device, commandEncoder, piplines[66], [buf_144, buf_80, buf_145, buf_146], [20, 1, 1]);
        addComputePass(device, commandEncoder, piplines[67], [buf_147, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[68], [buf_148, buf_7, buf_79, buf_147, buf_149, buf_150], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[69], [buf_151, buf_148, buf_152, buf_153, buf_10], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[70], [buf_75, buf_151], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[71], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[72], [buf_75, buf_151, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[73], [buf_147, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[74], [buf_148, buf_151, buf_79, buf_147, buf_154, buf_155], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[75], [buf_151, buf_7, buf_148, buf_156, buf_157], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[76], [buf_75, buf_151], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[77], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[78], [buf_75, buf_151, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[79], [buf_147, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[80], [buf_148, buf_151, buf_79, buf_147, buf_158, buf_159], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[81], [buf_160, buf_148, buf_161, buf_162], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[82], [buf_163, buf_160], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[83], [buf_164, buf_160, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[84], [buf_148, buf_160, buf_163, buf_164, buf_165, buf_166], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[85], [buf_167, buf_148, buf_168], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[86], [buf_169, buf_148, buf_170], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[87], [buf_171, buf_148, buf_172], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[88], [buf_173, buf_167, buf_169], [8192, 8, 2]);
        addComputePass(device, commandEncoder, piplines[89], [buf_174, buf_173], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[90], [buf_175, buf_173, buf_174], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[91], [buf_176, buf_173, buf_174, buf_175], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[92], [buf_148, buf_176, buf_171], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[93], [buf_167, buf_160, buf_148, buf_177, buf_178], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[94], [buf_163, buf_167], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[95], [buf_164, buf_167, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[96], [buf_160, buf_167, buf_163, buf_164, buf_179, buf_180], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[97], [buf_169, buf_160, buf_181], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[98], [buf_182, buf_169, buf_11], [77, 64, 2]);
        addComputePass(device, commandEncoder, piplines[99], [buf_174, buf_182], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[100], [buf_175, buf_182, buf_174], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[101], [buf_183, buf_182, buf_174, buf_175], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[102], [buf_171, buf_183, buf_13], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[103], [buf_148, buf_167, buf_171, buf_184, buf_185], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[104], [buf_163, buf_148], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[105], [buf_164, buf_148, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[106], [buf_167, buf_148, buf_163, buf_164, buf_186, buf_187], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[107], [buf_188, buf_167, buf_189, buf_190], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[108], [buf_191, buf_188], [20, 1024, 1]);
        addComputePass(device, commandEncoder, piplines[109], [buf_160, buf_148, buf_191, buf_192, buf_193], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[110], [buf_169, buf_160, buf_194, buf_195, buf_151], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[111], [buf_75, buf_169], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[112], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[113], [buf_75, buf_169, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[114], [buf_147, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[115], [buf_151, buf_169, buf_79, buf_147, buf_196, buf_197], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[116], [buf_171, buf_151, buf_198, buf_199, buf_85], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[117], [buf_75, buf_171], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[118], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[119], [buf_75, buf_171, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[120], [buf_147, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[121], [buf_148, buf_171, buf_79, buf_147, buf_200, buf_201], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[122], [buf_167, buf_169, buf_148, buf_202, buf_203], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[123], [buf_75, buf_167], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[124], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[125], [buf_75, buf_167, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[126], [buf_147, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[127], [buf_160, buf_167, buf_79, buf_147, buf_204, buf_205], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[128], [buf_151, buf_160, buf_206, buf_207], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[129], [buf_163, buf_151], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[130], [buf_164, buf_151, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[131], [buf_171, buf_151, buf_163, buf_164, buf_208, buf_209], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[132], [buf_148, buf_171, buf_210], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[133], [buf_160, buf_171, buf_211], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[134], [buf_212, buf_171, buf_213], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[135], [buf_173, buf_148, buf_160], [8192, 8, 2]);
        addComputePass(device, commandEncoder, piplines[136], [buf_174, buf_173], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[137], [buf_175, buf_173, buf_174], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[138], [buf_176, buf_173, buf_174, buf_175], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[139], [buf_171, buf_176, buf_212], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[140], [buf_148, buf_151, buf_171, buf_214, buf_215], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[141], [buf_163, buf_148], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[142], [buf_164, buf_148, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[143], [buf_151, buf_148, buf_163, buf_164, buf_216, buf_217], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[144], [buf_160, buf_151, buf_218], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[145], [buf_182, buf_160, buf_15], [77, 64, 2]);
        addComputePass(device, commandEncoder, piplines[146], [buf_174, buf_182], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[147], [buf_175, buf_182, buf_174], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[148], [buf_183, buf_182, buf_174, buf_175], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[149], [buf_212, buf_183, buf_17], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[150], [buf_171, buf_148, buf_212, buf_219, buf_220], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[151], [buf_163, buf_171], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[152], [buf_164, buf_171, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[153], [buf_148, buf_171, buf_163, buf_164, buf_221, buf_222], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[154], [buf_188, buf_148, buf_223, buf_224], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[155], [buf_191, buf_188], [20, 1024, 1]);
        addComputePass(device, commandEncoder, piplines[156], [buf_151, buf_171, buf_191, buf_225, buf_226], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[157], [buf_160, buf_151, buf_227, buf_228, buf_167], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[158], [buf_229, buf_160, buf_230, buf_231], [2, 80, 2]);
        addComputePass(device, commandEncoder, piplines[159], [buf_79, buf_229], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[160], [buf_147, buf_229, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[161], [buf_232, buf_229, buf_79, buf_147, buf_233, buf_234], [16, 40, 2]);
        addComputePass(device, commandEncoder, piplines[162], [buf_235, buf_232, buf_236, buf_237, buf_88], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[163], [buf_79, buf_235], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[164], [buf_147, buf_235, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[165], [buf_238, buf_235, buf_79, buf_147, buf_239, buf_240], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[166], [buf_235, buf_238, buf_241], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[167], [buf_238, buf_229, buf_242, buf_243, buf_235, buf_244], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[168], [buf_79, buf_238], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[169], [buf_147, buf_238, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[170], [buf_235, buf_238, buf_79, buf_147, buf_245, buf_246], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[171], [buf_247, buf_235, buf_248, buf_249], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[172], [buf_250, buf_247], [1024, 2, 1]);
        addComputePass(device, commandEncoder, piplines[173], [buf_251, buf_247, buf_250], [1024, 2, 1]);
        addComputePass(device, commandEncoder, piplines[174], [buf_235, buf_247, buf_250, buf_251, buf_252, buf_253], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[175], [buf_254, buf_235, buf_255], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[176], [buf_256, buf_235, buf_257], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[177], [buf_258, buf_235, buf_259], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[178], [buf_260, buf_254, buf_256], [512, 8, 2]);
        addComputePass(device, commandEncoder, piplines[179], [buf_75, buf_260], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[180], [buf_261, buf_260, buf_75], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[181], [buf_262, buf_260, buf_75, buf_261], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[182], [buf_235, buf_262, buf_258], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[183], [buf_254, buf_247, buf_235, buf_263, buf_264], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[184], [buf_250, buf_254], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[185], [buf_251, buf_254, buf_250], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[186], [buf_247, buf_254, buf_250, buf_251, buf_265, buf_266], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[187], [buf_256, buf_247, buf_267], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[188], [buf_268, buf_256, buf_19], [77, 16, 2]);
        addComputePass(device, commandEncoder, piplines[189], [buf_75, buf_268], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[190], [buf_261, buf_268, buf_75], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[191], [buf_269, buf_268, buf_75, buf_261], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[192], [buf_258, buf_269, buf_21], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[193], [buf_235, buf_254, buf_258, buf_270, buf_271], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[194], [buf_250, buf_235], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[195], [buf_251, buf_235, buf_250], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[196], [buf_254, buf_235, buf_250, buf_251, buf_272, buf_273], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[197], [buf_191, buf_254, buf_274, buf_275], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[198], [buf_276, buf_191], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[199], [buf_247, buf_235, buf_276, buf_277, buf_278], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[200], [buf_256, buf_247, buf_279, buf_280, buf_238], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[201], [buf_79, buf_256], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[202], [buf_147, buf_256, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[203], [buf_238, buf_256, buf_79, buf_147, buf_281, buf_282], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[204], [buf_258, buf_238, buf_283, buf_284, buf_91], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[205], [buf_79, buf_258], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[206], [buf_147, buf_258, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[207], [buf_235, buf_258, buf_79, buf_147, buf_285, buf_286], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[208], [buf_254, buf_256, buf_235, buf_287, buf_288], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[209], [buf_79, buf_254], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[210], [buf_147, buf_254, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[211], [buf_247, buf_254, buf_79, buf_147, buf_289, buf_290], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[212], [buf_238, buf_247, buf_291, buf_292], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[213], [buf_250, buf_238], [1024, 2, 1]);
        addComputePass(device, commandEncoder, piplines[214], [buf_251, buf_238, buf_250], [1024, 2, 1]);
        addComputePass(device, commandEncoder, piplines[215], [buf_258, buf_238, buf_250, buf_251, buf_293, buf_294], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[216], [buf_235, buf_258, buf_295], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[217], [buf_247, buf_258, buf_296], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[218], [buf_297, buf_258, buf_298], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[219], [buf_260, buf_235, buf_247], [512, 8, 2]);
        addComputePass(device, commandEncoder, piplines[220], [buf_75, buf_260], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[221], [buf_261, buf_260, buf_75], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[222], [buf_262, buf_260, buf_75, buf_261], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[223], [buf_258, buf_262, buf_297], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[224], [buf_235, buf_238, buf_258, buf_299, buf_300], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[225], [buf_250, buf_235], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[226], [buf_251, buf_235, buf_250], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[227], [buf_238, buf_235, buf_250, buf_251, buf_301, buf_302], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[228], [buf_247, buf_238, buf_303], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[229], [buf_268, buf_247, buf_23], [77, 16, 2]);
        addComputePass(device, commandEncoder, piplines[230], [buf_75, buf_268], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[231], [buf_261, buf_268, buf_75], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[232], [buf_269, buf_268, buf_75, buf_261], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[233], [buf_297, buf_269, buf_25], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[234], [buf_258, buf_235, buf_297, buf_304, buf_305], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[235], [buf_250, buf_258], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[236], [buf_251, buf_258, buf_250], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[237], [buf_235, buf_258, buf_250, buf_251, buf_306, buf_307], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[238], [buf_191, buf_235, buf_308, buf_309], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[239], [buf_276, buf_191], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[240], [buf_238, buf_258, buf_276, buf_310, buf_311], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[241], [buf_247, buf_238, buf_312, buf_313, buf_254], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[242], [buf_314, buf_247, buf_315, buf_316], [80, 2, 1]);
        addComputePass(device, commandEncoder, piplines[243], [buf_79, buf_314], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[244], [buf_147, buf_314, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[245], [buf_317, buf_314, buf_79, buf_147, buf_318, buf_319], [4, 80, 2]);
        addComputePass(device, commandEncoder, piplines[246], [buf_232, buf_317, buf_320, buf_321, buf_76], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[247], [buf_79, buf_232], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[248], [buf_147, buf_232, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[249], [buf_322, buf_232, buf_79, buf_147, buf_323, buf_324], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[250], [buf_232, buf_322, buf_325], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[251], [buf_322, buf_314, buf_326, buf_327, buf_232, buf_328], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[252], [buf_79, buf_322], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[253], [buf_147, buf_322, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[254], [buf_232, buf_322, buf_79, buf_147, buf_329, buf_330], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[255], [buf_331, buf_232, buf_332, buf_333], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[256], [buf_334, buf_331], [256, 2, 1]);
        addComputePass(device, commandEncoder, piplines[257], [buf_335, buf_331, buf_334], [256, 2, 1]);
        addComputePass(device, commandEncoder, piplines[258], [buf_232, buf_331, buf_334, buf_335, buf_336, buf_337], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[259], [buf_338, buf_232, buf_339], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[260], [buf_340, buf_232, buf_341], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[261], [buf_342, buf_232, buf_343], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[262], [buf_344, buf_338, buf_340], [32, 8, 2]);
        addComputePass(device, commandEncoder, piplines[263], [buf_345, buf_344], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[264], [buf_346, buf_344, buf_345], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[265], [buf_347, buf_344, buf_345, buf_346], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[266], [buf_232, buf_347, buf_342], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[267], [buf_338, buf_331, buf_232, buf_348, buf_349], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[268], [buf_334, buf_338], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[269], [buf_335, buf_338, buf_334], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[270], [buf_331, buf_338, buf_334, buf_335, buf_350, buf_351], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[271], [buf_340, buf_331, buf_352], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[272], [buf_353, buf_340, buf_27], [77, 4, 2]);
        addComputePass(device, commandEncoder, piplines[273], [buf_345, buf_353], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[274], [buf_346, buf_353, buf_345], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[275], [buf_354, buf_353, buf_345, buf_346], [77, 32, 1]);
        addComputePass(device, commandEncoder, piplines[276], [buf_342, buf_354, buf_29], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[277], [buf_232, buf_338, buf_342, buf_355, buf_356], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[278], [buf_334, buf_232], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[279], [buf_335, buf_232, buf_334], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[280], [buf_338, buf_232, buf_334, buf_335, buf_357, buf_358], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[281], [buf_276, buf_338, buf_359, buf_360], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[282], [buf_167, buf_276], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[283], [buf_331, buf_232, buf_167, buf_361, buf_362], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[284], [buf_340, buf_331, buf_363, buf_364, buf_322], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[285], [buf_79, buf_340], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[286], [buf_147, buf_340, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[287], [buf_322, buf_340, buf_79, buf_147, buf_365, buf_366], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[288], [buf_342, buf_322, buf_367, buf_368, buf_96], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[289], [buf_79, buf_342], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[290], [buf_147, buf_342, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[291], [buf_232, buf_342, buf_79, buf_147, buf_369, buf_370], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[292], [buf_338, buf_340, buf_232, buf_371, buf_372], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[293], [buf_79, buf_338], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[294], [buf_147, buf_338, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[295], [buf_331, buf_338, buf_79, buf_147, buf_373, buf_374], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[296], [buf_322, buf_331, buf_375, buf_376], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[297], [buf_334, buf_322], [256, 2, 1]);
        addComputePass(device, commandEncoder, piplines[298], [buf_335, buf_322, buf_334], [256, 2, 1]);
        addComputePass(device, commandEncoder, piplines[299], [buf_342, buf_322, buf_334, buf_335, buf_377, buf_378], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[300], [buf_232, buf_342, buf_379], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[301], [buf_331, buf_342, buf_380], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[302], [buf_381, buf_342, buf_382], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[303], [buf_344, buf_232, buf_331], [32, 8, 2]);
        addComputePass(device, commandEncoder, piplines[304], [buf_345, buf_344], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[305], [buf_346, buf_344, buf_345], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[306], [buf_347, buf_344, buf_345, buf_346], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[307], [buf_342, buf_347, buf_381], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[308], [buf_232, buf_322, buf_342, buf_383, buf_384], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[309], [buf_334, buf_232], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[310], [buf_335, buf_232, buf_334], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[311], [buf_322, buf_232, buf_334, buf_335, buf_385, buf_386], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[312], [buf_331, buf_322, buf_387], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[313], [buf_353, buf_331, buf_31], [77, 4, 2]);
        addComputePass(device, commandEncoder, piplines[314], [buf_345, buf_353], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[315], [buf_346, buf_353, buf_345], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[316], [buf_354, buf_353, buf_345, buf_346], [77, 32, 1]);
        addComputePass(device, commandEncoder, piplines[317], [buf_381, buf_354, buf_33], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[318], [buf_342, buf_232, buf_381, buf_388, buf_389], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[319], [buf_334, buf_342], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[320], [buf_335, buf_342, buf_334], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[321], [buf_232, buf_342, buf_334, buf_335, buf_390, buf_391], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[322], [buf_276, buf_232, buf_392, buf_393], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[323], [buf_212, buf_276], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[324], [buf_322, buf_342, buf_212, buf_394, buf_395], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[325], [buf_331, buf_322, buf_396, buf_397, buf_338], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[326], [buf_398, buf_331, buf_399, buf_400], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[327], [buf_79, buf_398], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[328], [buf_147, buf_398, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[329], [buf_401, buf_398, buf_79, buf_147, buf_402, buf_403], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[330], [buf_404, buf_401, buf_405, buf_406, buf_99], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[331], [buf_79, buf_404], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[332], [buf_147, buf_404, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[333], [buf_401, buf_404, buf_79, buf_147, buf_407, buf_408], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[334], [buf_404, buf_398, buf_401, buf_409, buf_410], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[335], [buf_79, buf_404], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[336], [buf_147, buf_404, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[337], [buf_401, buf_404, buf_79, buf_147, buf_411, buf_412], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[338], [buf_413, buf_401, buf_414, buf_415, buf_102], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[339], [buf_79, buf_413], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[340], [buf_147, buf_413, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[341], [buf_401, buf_413, buf_79, buf_147, buf_416, buf_417], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[342], [buf_413, buf_404, buf_401, buf_418, buf_419], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[343], [buf_79, buf_413], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[344], [buf_147, buf_413, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[345], [buf_401, buf_413, buf_79, buf_147, buf_420, buf_421], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[346], [buf_422, buf_401, buf_423, buf_424, buf_105], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[347], [buf_79, buf_422], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[348], [buf_147, buf_422, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[349], [buf_401, buf_422, buf_79, buf_147, buf_425, buf_426], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[350], [buf_422, buf_413, buf_401, buf_427, buf_428], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[351], [buf_79, buf_422], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[352], [buf_147, buf_422, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[353], [buf_401, buf_422, buf_79, buf_147, buf_429, buf_430], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[354], [buf_431, buf_401, buf_432, buf_433], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[355], [buf_434, buf_431], [64, 2, 1]);
        addComputePass(device, commandEncoder, piplines[356], [buf_435, buf_431, buf_434], [64, 2, 1]);
        addComputePass(device, commandEncoder, piplines[357], [buf_401, buf_431, buf_434, buf_435, buf_436, buf_437], [20, 2, 2]);
        addComputePass(device, commandEncoder, piplines[358], [buf_438, buf_401, buf_439], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[359], [buf_440, buf_401, buf_441], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[360], [buf_442, buf_401, buf_443], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[361], [buf_174, buf_438, buf_440], [2, 8, 2]);
        addComputePass(device, commandEncoder, piplines[362], [buf_444, buf_174], [1024, 1, 1]);
        addComputePass(device, commandEncoder, piplines[363], [buf_445, buf_174, buf_444], [1024, 1, 1]);
        addComputePass(device, commandEncoder, piplines[364], [buf_175, buf_174, buf_444, buf_445], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[365], [buf_401, buf_175, buf_442], [5, 8, 2]);
        addComputePass(device, commandEncoder, piplines[366], [buf_438, buf_431, buf_401, buf_446, buf_447], [20, 2, 2]);
        addComputePass(device, commandEncoder, piplines[367], [buf_434, buf_438], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[368], [buf_435, buf_438, buf_434], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[369], [buf_431, buf_438, buf_434, buf_435, buf_448, buf_449], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[370], [buf_440, buf_431, buf_450], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[371], [buf_451, buf_440, buf_35], [77, 2, 1]);
        addComputePass(device, commandEncoder, piplines[372], [buf_444, buf_451], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[373], [buf_445, buf_451, buf_444], [8, 1, 1]);
        addComputePass(device, commandEncoder, piplines[374], [buf_452, buf_451, buf_444, buf_445], [77, 8, 1]);
        addComputePass(device, commandEncoder, piplines[375], [buf_442, buf_452, buf_37], [5, 8, 2]);
        addComputePass(device, commandEncoder, piplines[376], [buf_401, buf_438, buf_442, buf_453, buf_454], [20, 2, 2]);
        addComputePass(device, commandEncoder, piplines[377], [buf_434, buf_401], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[378], [buf_435, buf_401, buf_434], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[379], [buf_438, buf_401, buf_434, buf_435, buf_455, buf_456], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[380], [buf_254, buf_438, buf_457, buf_458], [160, 4, 1]);
        addComputePass(device, commandEncoder, piplines[381], [buf_338, buf_254], [80, 16, 1]);
        addComputePass(device, commandEncoder, piplines[382], [buf_431, buf_401, buf_338, buf_459, buf_460], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[383], [buf_440, buf_431, buf_461, buf_462, buf_422], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[384], [buf_79, buf_440], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[385], [buf_147, buf_440, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[386], [buf_422, buf_440, buf_79, buf_147, buf_463, buf_464], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[387], [buf_442, buf_422, buf_465, buf_466, buf_108], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[388], [buf_79, buf_442], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[389], [buf_147, buf_442, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[390], [buf_401, buf_442, buf_79, buf_147, buf_467, buf_468], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[391], [buf_438, buf_440, buf_401, buf_469, buf_470], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[392], [buf_317, buf_438, buf_413], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[393], [buf_79, buf_317], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[394], [buf_147, buf_317, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[395], [buf_471, buf_317, buf_79, buf_147, buf_472, buf_473], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[396], [buf_413, buf_471, buf_474, buf_475, buf_111], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[397], [buf_79, buf_413], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[398], [buf_147, buf_413, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[399], [buf_431, buf_413, buf_79, buf_147, buf_476, buf_477], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[400], [buf_440, buf_431, buf_478], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[401], [buf_422, buf_317, buf_479, buf_480, buf_440, buf_481], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[402], [buf_317, buf_422, buf_404], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[403], [buf_79, buf_317], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[404], [buf_147, buf_317, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[405], [buf_471, buf_317, buf_79, buf_147, buf_482, buf_483], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[406], [buf_404, buf_471, buf_484, buf_485, buf_114], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[407], [buf_79, buf_404], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[408], [buf_147, buf_404, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[409], [buf_442, buf_404, buf_79, buf_147, buf_486, buf_487], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[410], [buf_401, buf_442, buf_488], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[411], [buf_438, buf_317, buf_489, buf_490, buf_401, buf_491], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[412], [buf_317, buf_438, buf_398], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[413], [buf_79, buf_317], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[414], [buf_147, buf_317, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[415], [buf_471, buf_317, buf_79, buf_147, buf_492, buf_493], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[416], [buf_398, buf_471, buf_494, buf_495, buf_117], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[417], [buf_79, buf_398], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[418], [buf_147, buf_398, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[419], [buf_413, buf_398, buf_79, buf_147, buf_496, buf_497], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[420], [buf_431, buf_413, buf_498], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[421], [buf_440, buf_317, buf_499, buf_500, buf_431, buf_501], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[422], [buf_381, buf_440, buf_502, buf_503], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[423], [buf_297, buf_381, buf_331], [4, 320, 2]);
        addComputePass(device, commandEncoder, piplines[424], [buf_79, buf_297], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[425], [buf_147, buf_297, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[426], [buf_258, buf_297, buf_79, buf_147, buf_504, buf_505], [4, 320, 2]);
        addComputePass(device, commandEncoder, piplines[427], [buf_342, buf_258, buf_506, buf_507, buf_120], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[428], [buf_79, buf_342], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[429], [buf_147, buf_342, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[430], [buf_232, buf_342, buf_79, buf_147, buf_508, buf_509], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[431], [buf_322, buf_232, buf_510], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[432], [buf_331, buf_297, buf_511, buf_512, buf_322, buf_513], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[433], [buf_79, buf_331], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[434], [buf_147, buf_331, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[435], [buf_338, buf_331, buf_79, buf_147, buf_514, buf_515], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[436], [buf_381, buf_338, buf_516, buf_517], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[437], [buf_334, buf_381], [256, 2, 1]);
        addComputePass(device, commandEncoder, piplines[438], [buf_335, buf_381, buf_334], [256, 2, 1]);
        addComputePass(device, commandEncoder, piplines[439], [buf_342, buf_381, buf_334, buf_335, buf_518, buf_519], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[440], [buf_232, buf_342, buf_520], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[441], [buf_322, buf_342, buf_521], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[442], [buf_338, buf_342, buf_522], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[443], [buf_344, buf_232, buf_322], [32, 8, 2]);
        addComputePass(device, commandEncoder, piplines[444], [buf_345, buf_344], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[445], [buf_346, buf_344, buf_345], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[446], [buf_347, buf_344, buf_345, buf_346], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[447], [buf_342, buf_347, buf_338], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[448], [buf_232, buf_381, buf_342, buf_523, buf_524], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[449], [buf_334, buf_232], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[450], [buf_335, buf_232, buf_334], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[451], [buf_381, buf_232, buf_334, buf_335, buf_525, buf_526], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[452], [buf_322, buf_381, buf_527], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[453], [buf_353, buf_322, buf_39], [77, 4, 2]);
        addComputePass(device, commandEncoder, piplines[454], [buf_345, buf_353], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[455], [buf_346, buf_353, buf_345], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[456], [buf_354, buf_353, buf_345, buf_346], [77, 32, 1]);
        addComputePass(device, commandEncoder, piplines[457], [buf_338, buf_354, buf_41], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[458], [buf_342, buf_232, buf_338, buf_528, buf_529], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[459], [buf_334, buf_342], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[460], [buf_335, buf_342, buf_334], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[461], [buf_232, buf_342, buf_334, buf_335, buf_530, buf_531], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[462], [buf_276, buf_232, buf_532, buf_533], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[463], [buf_171, buf_276], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[464], [buf_381, buf_342, buf_171, buf_534, buf_535], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[465], [buf_322, buf_381, buf_536, buf_537, buf_331], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[466], [buf_235, buf_322, buf_340], [4, 320, 2]);
        addComputePass(device, commandEncoder, piplines[467], [buf_79, buf_235], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[468], [buf_147, buf_235, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[469], [buf_238, buf_235, buf_79, buf_147, buf_538, buf_539], [4, 320, 2]);
        addComputePass(device, commandEncoder, piplines[470], [buf_340, buf_238, buf_540, buf_541, buf_123], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[471], [buf_79, buf_340], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[472], [buf_147, buf_340, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[473], [buf_331, buf_340, buf_79, buf_147, buf_542, buf_543], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[474], [buf_338, buf_331, buf_544], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[475], [buf_342, buf_235, buf_545, buf_546, buf_338, buf_547], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[476], [buf_79, buf_342], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[477], [buf_147, buf_342, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[478], [buf_232, buf_342, buf_79, buf_147, buf_548, buf_549], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[479], [buf_381, buf_232, buf_550, buf_551], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[480], [buf_334, buf_381], [256, 2, 1]);
        addComputePass(device, commandEncoder, piplines[481], [buf_335, buf_381, buf_334], [256, 2, 1]);
        addComputePass(device, commandEncoder, piplines[482], [buf_322, buf_381, buf_334, buf_335, buf_552, buf_553], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[483], [buf_340, buf_322, buf_554], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[484], [buf_331, buf_322, buf_555], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[485], [buf_338, buf_322, buf_556], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[486], [buf_344, buf_340, buf_331], [32, 8, 2]);
        addComputePass(device, commandEncoder, piplines[487], [buf_345, buf_344], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[488], [buf_346, buf_344, buf_345], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[489], [buf_347, buf_344, buf_345, buf_346], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[490], [buf_232, buf_347, buf_338], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[491], [buf_322, buf_381, buf_232, buf_557, buf_558], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[492], [buf_334, buf_322], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[493], [buf_335, buf_322, buf_334], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[494], [buf_381, buf_322, buf_334, buf_335, buf_559, buf_560], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[495], [buf_340, buf_381, buf_561], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[496], [buf_353, buf_340, buf_43], [77, 4, 2]);
        addComputePass(device, commandEncoder, piplines[497], [buf_345, buf_353], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[498], [buf_346, buf_353, buf_345], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[499], [buf_354, buf_353, buf_345, buf_346], [77, 32, 1]);
        addComputePass(device, commandEncoder, piplines[500], [buf_331, buf_354, buf_45], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[501], [buf_338, buf_322, buf_331, buf_562, buf_563], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[502], [buf_334, buf_338], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[503], [buf_335, buf_338, buf_334], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[504], [buf_232, buf_338, buf_334, buf_335, buf_564, buf_565], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[505], [buf_276, buf_232, buf_566, buf_567], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[506], [buf_148, buf_276], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[507], [buf_322, buf_338, buf_148, buf_568, buf_569], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[508], [buf_381, buf_322, buf_570, buf_571, buf_342], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[509], [buf_572, buf_381, buf_314], [4, 240, 2]);
        addComputePass(device, commandEncoder, piplines[510], [buf_79, buf_572], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[511], [buf_147, buf_572, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[512], [buf_573, buf_572, buf_79, buf_147, buf_574, buf_575], [4, 240, 2]);
        addComputePass(device, commandEncoder, piplines[513], [buf_342, buf_573, buf_576, buf_577, buf_126], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[514], [buf_79, buf_342], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[515], [buf_147, buf_342, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[516], [buf_340, buf_342, buf_79, buf_147, buf_578, buf_579], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[517], [buf_331, buf_340, buf_580], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[518], [buf_338, buf_572, buf_581, buf_582, buf_331, buf_583], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[519], [buf_79, buf_338], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[520], [buf_147, buf_338, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[521], [buf_232, buf_338, buf_79, buf_147, buf_584, buf_585], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[522], [buf_322, buf_232, buf_586, buf_587], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[523], [buf_334, buf_322], [256, 2, 1]);
        addComputePass(device, commandEncoder, piplines[524], [buf_335, buf_322, buf_334], [256, 2, 1]);
        addComputePass(device, commandEncoder, piplines[525], [buf_381, buf_322, buf_334, buf_335, buf_588, buf_589], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[526], [buf_342, buf_381, buf_590], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[527], [buf_340, buf_381, buf_591], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[528], [buf_331, buf_381, buf_592], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[529], [buf_344, buf_342, buf_340], [32, 8, 2]);
        addComputePass(device, commandEncoder, piplines[530], [buf_345, buf_344], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[531], [buf_346, buf_344, buf_345], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[532], [buf_347, buf_344, buf_345, buf_346], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[533], [buf_232, buf_347, buf_331], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[534], [buf_381, buf_322, buf_232, buf_593, buf_594], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[535], [buf_334, buf_381], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[536], [buf_335, buf_381, buf_334], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[537], [buf_322, buf_381, buf_334, buf_335, buf_595, buf_596], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[538], [buf_342, buf_322, buf_597], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[539], [buf_353, buf_342, buf_47], [77, 4, 2]);
        addComputePass(device, commandEncoder, piplines[540], [buf_345, buf_353], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[541], [buf_346, buf_353, buf_345], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[542], [buf_354, buf_353, buf_345, buf_346], [77, 32, 1]);
        addComputePass(device, commandEncoder, piplines[543], [buf_340, buf_354, buf_49], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[544], [buf_331, buf_381, buf_340, buf_598, buf_599], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[545], [buf_334, buf_331], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[546], [buf_335, buf_331, buf_334], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[547], [buf_232, buf_331, buf_334, buf_335, buf_600, buf_601], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[548], [buf_276, buf_232, buf_602, buf_603], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[549], [buf_151, buf_276], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[550], [buf_381, buf_331, buf_151, buf_604, buf_605], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[551], [buf_322, buf_381, buf_606, buf_607, buf_338], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[552], [buf_167, buf_322, buf_608, buf_609], [2, 320, 2]);
        addComputePass(device, commandEncoder, piplines[553], [buf_610, buf_167, buf_247], [16, 240, 2]);
        addComputePass(device, commandEncoder, piplines[554], [buf_75, buf_610], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[555], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[556], [buf_261, buf_610, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[557], [buf_147, buf_261], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[558], [buf_611, buf_610, buf_79, buf_147, buf_612, buf_613], [16, 240, 2]);
        addComputePass(device, commandEncoder, piplines[559], [buf_247, buf_611, buf_614, buf_615, buf_129], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[560], [buf_79, buf_247], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[561], [buf_147, buf_247, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[562], [buf_254, buf_247, buf_79, buf_147, buf_616, buf_617], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[563], [buf_297, buf_254, buf_618], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[564], [buf_258, buf_610, buf_619, buf_620, buf_297, buf_621], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[565], [buf_79, buf_258], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[566], [buf_147, buf_258, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[567], [buf_235, buf_258, buf_79, buf_147, buf_622, buf_623], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[568], [buf_238, buf_235, buf_624, buf_625], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[569], [buf_250, buf_238], [1024, 2, 1]);
        addComputePass(device, commandEncoder, piplines[570], [buf_251, buf_238, buf_250], [1024, 2, 1]);
        addComputePass(device, commandEncoder, piplines[571], [buf_247, buf_238, buf_250, buf_251, buf_626, buf_627], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[572], [buf_254, buf_247, buf_628], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[573], [buf_297, buf_247, buf_629], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[574], [buf_235, buf_247, buf_630], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[575], [buf_260, buf_254, buf_297], [512, 8, 2]);
        addComputePass(device, commandEncoder, piplines[576], [buf_75, buf_260], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[577], [buf_261, buf_260, buf_75], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[578], [buf_262, buf_260, buf_75, buf_261], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[579], [buf_247, buf_262, buf_235], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[580], [buf_254, buf_238, buf_247, buf_631, buf_632], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[581], [buf_250, buf_254], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[582], [buf_251, buf_254, buf_250], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[583], [buf_238, buf_254, buf_250, buf_251, buf_633, buf_634], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[584], [buf_297, buf_238, buf_635], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[585], [buf_268, buf_297, buf_51], [77, 16, 2]);
        addComputePass(device, commandEncoder, piplines[586], [buf_75, buf_268], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[587], [buf_261, buf_268, buf_75], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[588], [buf_269, buf_268, buf_75, buf_261], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[589], [buf_235, buf_269, buf_53], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[590], [buf_247, buf_254, buf_235, buf_636, buf_637], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[591], [buf_250, buf_247], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[592], [buf_251, buf_247, buf_250], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[593], [buf_254, buf_247, buf_250, buf_251, buf_638, buf_639], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[594], [buf_191, buf_254, buf_640, buf_641], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[595], [buf_276, buf_191], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[596], [buf_238, buf_247, buf_276, buf_642, buf_643], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[597], [buf_297, buf_238, buf_644, buf_645, buf_258], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[598], [buf_212, buf_297, buf_256], [16, 160, 2]);
        addComputePass(device, commandEncoder, piplines[599], [buf_75, buf_212], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[600], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[601], [buf_261, buf_212, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[602], [buf_147, buf_261], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[603], [buf_171, buf_212, buf_79, buf_147, buf_646, buf_647], [16, 160, 2]);
        addComputePass(device, commandEncoder, piplines[604], [buf_256, buf_171, buf_648, buf_649, buf_132], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[605], [buf_79, buf_256], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[606], [buf_147, buf_256, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[607], [buf_258, buf_256, buf_79, buf_147, buf_650, buf_651], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[608], [buf_235, buf_258, buf_652], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[609], [buf_247, buf_212, buf_653, buf_654, buf_235, buf_655], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[610], [buf_79, buf_247], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[611], [buf_147, buf_247, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[612], [buf_254, buf_247, buf_79, buf_147, buf_656, buf_657], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[613], [buf_238, buf_254, buf_658, buf_659], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[614], [buf_250, buf_238], [1024, 2, 1]);
        addComputePass(device, commandEncoder, piplines[615], [buf_251, buf_238, buf_250], [1024, 2, 1]);
        addComputePass(device, commandEncoder, piplines[616], [buf_297, buf_238, buf_250, buf_251, buf_660, buf_661], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[617], [buf_256, buf_297, buf_662], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[618], [buf_258, buf_297, buf_663], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[619], [buf_235, buf_297, buf_664], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[620], [buf_260, buf_256, buf_258], [512, 8, 2]);
        addComputePass(device, commandEncoder, piplines[621], [buf_75, buf_260], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[622], [buf_261, buf_260, buf_75], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[623], [buf_262, buf_260, buf_75, buf_261], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[624], [buf_254, buf_262, buf_235], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[625], [buf_297, buf_238, buf_254, buf_665, buf_666], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[626], [buf_250, buf_297], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[627], [buf_251, buf_297, buf_250], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[628], [buf_238, buf_297, buf_250, buf_251, buf_667, buf_668], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[629], [buf_256, buf_238, buf_669], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[630], [buf_268, buf_256, buf_55], [77, 16, 2]);
        addComputePass(device, commandEncoder, piplines[631], [buf_75, buf_268], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[632], [buf_261, buf_268, buf_75], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[633], [buf_269, buf_268, buf_75, buf_261], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[634], [buf_258, buf_269, buf_57], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[635], [buf_235, buf_297, buf_258, buf_670, buf_671], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[636], [buf_250, buf_235], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[637], [buf_251, buf_235, buf_250], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[638], [buf_254, buf_235, buf_250, buf_251, buf_672, buf_673], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[639], [buf_191, buf_254, buf_674, buf_675], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[640], [buf_276, buf_191], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[641], [buf_297, buf_235, buf_276, buf_676, buf_677], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[642], [buf_238, buf_297, buf_678, buf_679, buf_247], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[643], [buf_680, buf_238, buf_229], [16, 120, 2]);
        addComputePass(device, commandEncoder, piplines[644], [buf_79, buf_680], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[645], [buf_147, buf_680, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[646], [buf_681, buf_680, buf_79, buf_147, buf_682, buf_683], [16, 120, 2]);
        addComputePass(device, commandEncoder, piplines[647], [buf_247, buf_681, buf_684, buf_685, buf_135], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[648], [buf_79, buf_247], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[649], [buf_147, buf_247, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[650], [buf_256, buf_247, buf_79, buf_147, buf_686, buf_687], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[651], [buf_258, buf_256, buf_688], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[652], [buf_235, buf_680, buf_689, buf_690, buf_258, buf_691], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[653], [buf_79, buf_235], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[654], [buf_147, buf_235, buf_79], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[655], [buf_254, buf_235, buf_79, buf_147, buf_692, buf_693], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[656], [buf_297, buf_254, buf_694, buf_695], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[657], [buf_250, buf_297], [1024, 2, 1]);
        addComputePass(device, commandEncoder, piplines[658], [buf_251, buf_297, buf_250], [1024, 2, 1]);
        addComputePass(device, commandEncoder, piplines[659], [buf_238, buf_297, buf_250, buf_251, buf_696, buf_697], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[660], [buf_247, buf_238, buf_698], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[661], [buf_256, buf_238, buf_699], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[662], [buf_258, buf_238, buf_700], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[663], [buf_260, buf_247, buf_256], [512, 8, 2]);
        addComputePass(device, commandEncoder, piplines[664], [buf_75, buf_260], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[665], [buf_261, buf_260, buf_75], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[666], [buf_262, buf_260, buf_75, buf_261], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[667], [buf_254, buf_262, buf_258], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[668], [buf_238, buf_297, buf_254, buf_701, buf_702], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[669], [buf_250, buf_238], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[670], [buf_251, buf_238, buf_250], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[671], [buf_297, buf_238, buf_250, buf_251, buf_703, buf_704], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[672], [buf_247, buf_297, buf_705], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[673], [buf_268, buf_247, buf_59], [77, 16, 2]);
        addComputePass(device, commandEncoder, piplines[674], [buf_75, buf_268], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[675], [buf_261, buf_268, buf_75], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[676], [buf_269, buf_268, buf_75, buf_261], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[677], [buf_256, buf_269, buf_61], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[678], [buf_258, buf_238, buf_256, buf_706, buf_707], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[679], [buf_250, buf_258], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[680], [buf_251, buf_258, buf_250], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[681], [buf_254, buf_258, buf_250, buf_251, buf_708, buf_709], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[682], [buf_191, buf_254, buf_710, buf_711], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[683], [buf_276, buf_191], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[684], [buf_238, buf_258, buf_276, buf_712, buf_713], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[685], [buf_297, buf_238, buf_714, buf_715, buf_235], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[686], [buf_276, buf_297, buf_716, buf_717], [8, 160, 2]);
        addComputePass(device, commandEncoder, piplines[687], [buf_718, buf_276, buf_160], [64, 120, 2]);
        addComputePass(device, commandEncoder, piplines[688], [buf_75, buf_718], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[689], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[690], [buf_261, buf_718, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[691], [buf_147, buf_261], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[692], [buf_719, buf_718, buf_79, buf_147, buf_720, buf_721], [64, 120, 2]);
        addComputePass(device, commandEncoder, piplines[693], [buf_160, buf_719, buf_722, buf_723, buf_138], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[694], [buf_75, buf_160], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[695], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[696], [buf_261, buf_160, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[697], [buf_147, buf_261], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[698], [buf_148, buf_160, buf_79, buf_147, buf_724, buf_725], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[699], [buf_151, buf_148, buf_726], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[700], [buf_167, buf_718, buf_727, buf_728, buf_151, buf_729], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[701], [buf_75, buf_167], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[702], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[703], [buf_261, buf_167, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[704], [buf_147, buf_261], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[705], [buf_212, buf_167, buf_79, buf_147, buf_730, buf_731], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[706], [buf_171, buf_212, buf_732, buf_733], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[707], [buf_163, buf_171], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[708], [buf_164, buf_171, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[709], [buf_160, buf_171, buf_163, buf_164, buf_734, buf_735], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[710], [buf_148, buf_160, buf_736], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[711], [buf_151, buf_160, buf_737], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[712], [buf_212, buf_160, buf_738], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[713], [buf_173, buf_148, buf_151], [8192, 8, 2]);
        addComputePass(device, commandEncoder, piplines[714], [buf_174, buf_173], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[715], [buf_175, buf_173, buf_174], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[716], [buf_176, buf_173, buf_174, buf_175], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[717], [buf_160, buf_176, buf_212], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[718], [buf_148, buf_171, buf_160, buf_739, buf_740], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[719], [buf_163, buf_148], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[720], [buf_164, buf_148, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[721], [buf_171, buf_148, buf_163, buf_164, buf_741, buf_742], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[722], [buf_151, buf_171, buf_743], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[723], [buf_182, buf_151, buf_63], [77, 64, 2]);
        addComputePass(device, commandEncoder, piplines[724], [buf_174, buf_182], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[725], [buf_175, buf_182, buf_174], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[726], [buf_183, buf_182, buf_174, buf_175], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[727], [buf_212, buf_183, buf_65], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[728], [buf_160, buf_148, buf_212, buf_744, buf_745], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[729], [buf_163, buf_160], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[730], [buf_164, buf_160, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[731], [buf_148, buf_160, buf_163, buf_164, buf_746, buf_747], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[732], [buf_188, buf_148, buf_748, buf_749], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[733], [buf_191, buf_188], [20, 1024, 1]);
        addComputePass(device, commandEncoder, piplines[734], [buf_171, buf_160, buf_191, buf_750, buf_751], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[735], [buf_151, buf_171, buf_752, buf_753, buf_167], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[736], [buf_276, buf_151, buf_169], [64, 80, 2]);
        addComputePass(device, commandEncoder, piplines[737], [buf_75, buf_276], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[738], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[739], [buf_261, buf_276, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[740], [buf_147, buf_261], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[741], [buf_754, buf_276, buf_79, buf_147, buf_755, buf_756], [64, 80, 2]);
        addComputePass(device, commandEncoder, piplines[742], [buf_169, buf_754, buf_757, buf_758, buf_141], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[743], [buf_75, buf_169], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[744], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[745], [buf_261, buf_169, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[746], [buf_147, buf_261], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[747], [buf_167, buf_169, buf_79, buf_147, buf_759, buf_760], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[748], [buf_212, buf_167, buf_761], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[749], [buf_160, buf_276, buf_762, buf_763, buf_212, buf_764], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[750], [buf_75, buf_160], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[751], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[752], [buf_261, buf_160, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[753], [buf_147, buf_261], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[754], [buf_148, buf_160, buf_79, buf_147, buf_765, buf_766], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[755], [buf_171, buf_148, buf_767, buf_768], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[756], [buf_163, buf_171], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[757], [buf_164, buf_171, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[758], [buf_151, buf_171, buf_163, buf_164, buf_769, buf_770], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[759], [buf_169, buf_151, buf_771], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[760], [buf_167, buf_151, buf_772], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[761], [buf_212, buf_151, buf_773], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[762], [buf_173, buf_169, buf_167], [8192, 8, 2]);
        addComputePass(device, commandEncoder, piplines[763], [buf_174, buf_173], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[764], [buf_175, buf_173, buf_174], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[765], [buf_176, buf_173, buf_174, buf_175], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[766], [buf_148, buf_176, buf_212], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[767], [buf_151, buf_171, buf_148, buf_774, buf_775], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[768], [buf_163, buf_151], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[769], [buf_164, buf_151, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[770], [buf_171, buf_151, buf_163, buf_164, buf_776, buf_777], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[771], [buf_169, buf_171, buf_778], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[772], [buf_182, buf_169, buf_67], [77, 64, 2]);
        addComputePass(device, commandEncoder, piplines[773], [buf_174, buf_182], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[774], [buf_175, buf_182, buf_174], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[775], [buf_183, buf_182, buf_174, buf_175], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[776], [buf_167, buf_183, buf_69], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[777], [buf_212, buf_151, buf_167, buf_779, buf_780], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[778], [buf_163, buf_212], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[779], [buf_164, buf_212, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[780], [buf_148, buf_212, buf_163, buf_164, buf_781, buf_782], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[781], [buf_188, buf_148, buf_783, buf_784], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[782], [buf_191, buf_188], [20, 1024, 1]);
        addComputePass(device, commandEncoder, piplines[783], [buf_151, buf_212, buf_191, buf_785, buf_786], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[784], [buf_171, buf_151, buf_787, buf_788, buf_160], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[785], [buf_276, buf_171, buf_7], [64, 80, 2]);
        addComputePass(device, commandEncoder, piplines[786], [buf_75, buf_276], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[787], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[788], [buf_261, buf_276, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[789], [buf_147, buf_261], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[790], [buf_754, buf_276, buf_79, buf_147, buf_789, buf_790], [64, 80, 2]);
        addComputePass(device, commandEncoder, piplines[791], [buf_7, buf_754, buf_791, buf_792, buf_144], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[792], [buf_75, buf_7], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[793], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[794], [buf_261, buf_7, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[795], [buf_147, buf_261], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[796], [buf_160, buf_7, buf_79, buf_147, buf_793, buf_794], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[797], [buf_169, buf_160, buf_795], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[798], [buf_167, buf_276, buf_796, buf_797, buf_169, buf_798], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[799], [buf_75, buf_167], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[800], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[801], [buf_261, buf_167, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[802], [buf_147, buf_261], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[803], [buf_212, buf_167, buf_79, buf_147, buf_799, buf_800], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[804], [buf_148, buf_212, buf_801, buf_802], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[805], [buf_163, buf_148], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[806], [buf_164, buf_148, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[807], [buf_151, buf_148, buf_163, buf_164, buf_803, buf_804], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[808], [buf_171, buf_151, buf_805], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[809], [buf_7, buf_151, buf_806], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[810], [buf_160, buf_151, buf_807], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[811], [buf_173, buf_171, buf_7], [8192, 8, 2]);
        addComputePass(device, commandEncoder, piplines[812], [buf_174, buf_173], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[813], [buf_175, buf_173, buf_174], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[814], [buf_176, buf_173, buf_174, buf_175], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[815], [buf_169, buf_176, buf_160], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[816], [buf_212, buf_148, buf_169, buf_808, buf_809], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[817], [buf_163, buf_212], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[818], [buf_164, buf_212, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[819], [buf_148, buf_212, buf_163, buf_164, buf_810, buf_811], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[820], [buf_151, buf_148, buf_812], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[821], [buf_182, buf_151, buf_71], [77, 64, 2]);
        addComputePass(device, commandEncoder, piplines[822], [buf_174, buf_182], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[823], [buf_175, buf_182, buf_174], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[824], [buf_183, buf_182, buf_174, buf_175], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[825], [buf_171, buf_183, buf_73], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[826], [buf_7, buf_212, buf_171, buf_813, buf_814], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[827], [buf_163, buf_7], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[828], [buf_164, buf_7, buf_163], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[829], [buf_160, buf_7, buf_163, buf_164, buf_815, buf_816], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[830], [buf_188, buf_160, buf_817, buf_818], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[831], [buf_191, buf_188], [20, 1024, 1]);
        addComputePass(device, commandEncoder, piplines[832], [buf_169, buf_7, buf_191, buf_819, buf_820], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[833], [buf_212, buf_169, buf_821, buf_822, buf_167], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[834], [buf_75, buf_212], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[835], [buf_79, buf_75], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[836], [buf_261, buf_212, buf_79], [4, 8, 1]);
        addComputePass(device, commandEncoder, piplines[837], [buf_147, buf_261], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[838], [buf_167, buf_212, buf_79, buf_147, buf_823, buf_824], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[839], [buf_825, buf_167, buf_826, buf_827], [8, 2, 1]);
        addComputePass(device, commandEncoder, piplines[840], [output0, buf_0, input2, buf_1, buf_825, input6, buf_5, buf_6], [128, 1, 1]);
            commandEncoder.copyBufferToBuffer(output0, 0, gpuReadBuffer, 0, output0.size);
            const gpuCommands = commandEncoder.finish();
            device.queue.submit([gpuCommands]);

            await gpuReadBuffer.mapAsync(GPUMapMode.READ);
            const resultBuffer = new Float32Array(gpuReadBuffer.size/4);
            resultBuffer.set(new Float32Array(gpuReadBuffer.getMappedRange()));
            gpuReadBuffer.unmap();
            return resultBuffer;
        }
      }
    }
  }
  
    var decoder = function() {

    const E_128_32_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 128 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (alu0+3);
  var val0 = data1[alu1];
  data0[alu1] = (val0*5.489980785067252f);
  var val1 = data1[alu2];
  data0[alu2] = (val1*5.489980785067252f);
  var val2 = data1[alu3];
  data0[alu3] = (val2*5.489980785067252f);
  var val3 = data1[alu0];
  data0[alu0] = (val3*5.489980785067252f);
}`;

const r_32_32_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (alu0+3);
  var alu4 = (alu0+4096);
  var alu5 = (alu0+4097);
  var alu6 = (alu0+4098);
  var alu7 = (alu0+4099);
  var alu8 = (alu0+8192);
  var alu9 = (alu0+8193);
  var alu10 = (alu0+8194);
  var alu11 = (alu0+8195);
  var alu12 = (alu0+12288);
  var alu13 = (alu0+12289);
  var alu14 = (alu0+12290);
  var alu15 = (alu0+12291);
  var val0 = data1[alu1];
  var val1 = data1[alu2];
  var val2 = data1[alu3];
  var val3 = data1[alu4];
  var val4 = data1[alu5];
  var val5 = data1[alu6];
  var val6 = data1[alu7];
  var val7 = data1[alu8];
  var val8 = data1[alu9];
  var val9 = data1[alu10];
  var val10 = data1[alu11];
  var val11 = data1[alu12];
  var val12 = data1[alu13];
  var val13 = data1[alu14];
  var val14 = data1[alu15];
  var val15 = data1[alu0];
  var val16 = data2[0];
  var val17 = data2[1];
  var val18 = data2[2];
  var val19 = data2[3];
  var val20 = data2[4];
  var val21 = data2[5];
  var val22 = data2[6];
  var val23 = data2[7];
  var val24 = data2[8];
  var val25 = data2[9];
  var val26 = data2[10];
  var val27 = data2[11];
  var val28 = data2[12];
  var val29 = data2[13];
  var val30 = data2[14];
  var val31 = data2[15];
  var val32 = data3[0];
  data0[alu1] = (val32+(val0*val16)+(val4*val17)+(val8*val18)+(val12*val19));
  data0[alu2] = (val32+(val1*val16)+(val5*val17)+(val9*val18)+(val13*val19));
  data0[alu3] = (val32+(val2*val16)+(val6*val17)+(val10*val18)+(val14*val19));
  data0[alu0] = (val32+(val3*val17)+(val15*val16)+(val7*val18)+(val11*val19));
  var val33 = data3[1];
  data0[alu4] = (val33+(val3*val21)+(val15*val20)+(val7*val22)+(val11*val23));
  data0[alu5] = (val33+(val0*val20)+(val4*val21)+(val8*val22)+(val12*val23));
  data0[alu6] = (val33+(val1*val20)+(val5*val21)+(val9*val22)+(val13*val23));
  data0[alu7] = (val33+(val2*val20)+(val6*val21)+(val10*val22)+(val14*val23));
  var val34 = data3[2];
  data0[alu8] = (val34+(val3*val25)+(val15*val24)+(val7*val26)+(val11*val27));
  data0[alu9] = (val34+(val0*val24)+(val4*val25)+(val8*val26)+(val12*val27));
  data0[alu10] = (val34+(val1*val24)+(val5*val25)+(val9*val26)+(val13*val27));
  data0[alu11] = (val34+(val2*val24)+(val6*val25)+(val10*val26)+(val14*val27));
  var val35 = data3[3];
  data0[alu12] = (val35+(val3*val29)+(val15*val28)+(val7*val30)+(val11*val31));
  data0[alu13] = (val35+(val0*val28)+(val4*val29)+(val8*val30)+(val12*val31));
  data0[alu14] = (val35+(val1*val28)+(val5*val29)+(val9*val30)+(val13*val31));
  data0[alu15] = (val35+(val2*val28)+(val6*val29)+(val10*val30)+(val14*val31));
}`;

const r_128_8_8_16_4_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 128 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<9);
  var alu1 = (lidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = (lidx1<15);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = (((gidx0+lidx0)<1)!=true);
  var alu6 = ((lidx0+(gidx0<<3))<63);
  var alu7 = (gidx1<<2);
  var alu8 = (alu0+(gidx1<<14)+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 4; ridx0++) {
    var alu9 = ((gidx1*144)+(ridx0*9));
    var alu10 = (alu0+alu1+(ridx0<<12)+alu2);
    var val0 = select(0.0f, data1[(alu10+-65)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu10+-64)], alu5);
    var val2 = select(0.0f, data1[(alu10+-63)], alu5);
    var val3 = select(0.0f, data1[(alu10+-62)], alu5);
    var val4 = select(0.0f, data1[(alu10+-61)], alu5);
    var val5 = select(0.0f, data1[(alu10+-60)], (alu3&alu5));
    var val6 = select(0.0f, data1[(alu10+-1)], alu4);
    var val7 = data1[(alu10+1)];
    var val8 = data1[(alu10+2)];
    var val9 = data1[(alu10+3)];
    var val10 = select(0.0f, data1[(alu10+4)], alu3);
    var val11 = select(0.0f, data1[(alu10+63)], (alu6&alu4));
    var val12 = select(0.0f, data1[(alu10+64)], alu6);
    var val13 = select(0.0f, data1[(alu10+65)], alu6);
    var val14 = select(0.0f, data1[(alu10+66)], alu6);
    var val15 = select(0.0f, data1[(alu10+67)], alu6);
    var val16 = select(0.0f, data1[(alu10+68)], (alu3&alu6));
    var val17 = data1[alu10];
    var val18 = data2[(alu9+1)];
    var val19 = data2[(alu9+2)];
    var val20 = data2[(alu9+3)];
    var val21 = data2[(alu9+4)];
    var val22 = data2[(alu9+5)];
    var val23 = data2[(alu9+6)];
    var val24 = data2[(alu9+7)];
    var val25 = data2[(alu9+8)];
    var val26 = data2[(alu9+36)];
    var val27 = data2[(alu9+37)];
    var val28 = data2[(alu9+38)];
    var val29 = data2[(alu9+39)];
    var val30 = data2[(alu9+40)];
    var val31 = data2[(alu9+41)];
    var val32 = data2[(alu9+42)];
    var val33 = data2[(alu9+43)];
    var val34 = data2[(alu9+44)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu9+72)];
    var val36 = data2[(alu9+73)];
    var val37 = data2[(alu9+74)];
    var val38 = data2[(alu9+75)];
    var val39 = data2[(alu9+76)];
    var val40 = data2[(alu9+77)];
    var val41 = data2[(alu9+78)];
    var val42 = data2[(alu9+79)];
    var val43 = data2[(alu9+80)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu9+108)];
    var val45 = data2[(alu9+109)];
    var val46 = data2[(alu9+110)];
    var val47 = data2[(alu9+111)];
    var val48 = data2[(alu9+112)];
    var val49 = data2[(alu9+113)];
    var val50 = data2[(alu9+114)];
    var val51 = data2[(alu9+115)];
    var val52 = data2[(alu9+116)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu9];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[(alu7+1)];
  data0[(alu8+4096)] = (val54+acc1);
  data0[(alu8+4097)] = (val54+acc5);
  data0[(alu8+4098)] = (val54+acc9);
  data0[(alu8+4099)] = (val54+acc13);
  var val55 = data3[(alu7+2)];
  data0[(alu8+8192)] = (val55+acc2);
  data0[(alu8+8193)] = (val55+acc6);
  data0[(alu8+8194)] = (val55+acc10);
  data0[(alu8+8195)] = (val55+acc14);
  var val56 = data3[(alu7+3)];
  data0[(alu8+12288)] = (val56+acc3);
  data0[(alu8+12289)] = (val56+acc7);
  data0[(alu8+12290)] = (val56+acc11);
  data0[(alu8+12291)] = (val56+acc15);
  var val57 = data3[alu7];
  data0[(alu8+1)] = (val57+acc4);
  data0[(alu8+2)] = (val57+acc8);
  data0[(alu8+3)] = (val57+acc12);
  data0[alu8] = (val57+acc0);
}`;

const r_256_32_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 256 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 64; ridx0++) {
    var alu0 = ((gidx0<<13)+(lidx0<<8)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    acc0 = (acc0+val2+val1+val0+val3);
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_32_256 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 256>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 256 */
  var val0 = data1[(lidx0+(gidx0<<8))];
  temp0[lidx0] = val0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc0 = 0.0f;
    for (var ridx0 = 0; ridx0 < 256; ridx0++) {
      var val1 = temp0[ridx0];
      acc0 = (acc0+val1);
    }
    data0[gidx0] = (acc0*1.52587890625e-05f);
  }
}`;

const r_4_4_8_16_64_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 4 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1<<11)+(lidx0<<8)+(lidx1<<2));
  var val0 = data2[(lidx0+(gidx1<<3))];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 64; ridx0++) {
    var alu1 = ((gidx0<<14)+(gidx1<<19)+(lidx0<<16)+(lidx1<<10)+(ridx0<<2));
    var val1 = data1[(alu1+1)];
    var alu2 = (val1-val0);
    var val2 = data1[(alu1+2)];
    var alu3 = (val2-val0);
    var val3 = data1[(alu1+3)];
    var alu4 = (val3-val0);
    var val4 = data1[(alu1+256)];
    var alu5 = (val4-val0);
    var val5 = data1[(alu1+257)];
    var alu6 = (val5-val0);
    var val6 = data1[(alu1+258)];
    var alu7 = (val6-val0);
    var val7 = data1[(alu1+259)];
    var alu8 = (val7-val0);
    acc1 = (acc1+(alu5*alu5)+(alu6*alu6)+(alu7*alu7)+(alu8*alu8));
    var val8 = data1[(alu1+512)];
    var alu10 = (val8-val0);
    var val9 = data1[(alu1+513)];
    var alu11 = (val9-val0);
    var val10 = data1[(alu1+514)];
    var alu12 = (val10-val0);
    var val11 = data1[(alu1+515)];
    var alu13 = (val11-val0);
    acc2 = (acc2+(alu10*alu10)+(alu11*alu11)+(alu12*alu12)+(alu13*alu13));
    var val12 = data1[(alu1+768)];
    var alu15 = (val12-val0);
    var val13 = data1[(alu1+769)];
    var alu16 = (val13-val0);
    var val14 = data1[(alu1+770)];
    var alu17 = (val14-val0);
    var val15 = data1[(alu1+771)];
    var alu18 = (val15-val0);
    acc3 = (acc3+(alu15*alu15)+(alu16*alu16)+(alu17*alu17)+(alu18*alu18));
    var val16 = data1[alu1];
    var alu20 = (val16-val0);
    acc0 = (acc0+(alu2*alu2)+(alu20*alu20)+(alu3*alu3)+(alu4*alu4));
  }
  data0[(alu0+1)] = acc1;
  data0[(alu0+2)] = acc2;
  data0[(alu0+3)] = acc3;
  data0[alu0] = acc0;
}`;

const r_32_256n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 256>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 256 */
  var val0 = data1[(lidx0+(gidx0<<8))];
  temp0[lidx0] = val0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc0 = 0.0f;
    for (var ridx0 = 0; ridx0 < 256; ridx0++) {
      var val1 = temp0[ridx0];
      acc0 = (acc0+val1);
    }
    data0[gidx0] = sqrt((1/((acc0*1.52587890625e-05f)+1e-05f)));
  }
}`;

const E_64_64_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx0<<6)+(gidx1<<15)+(lidx0<<12)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var alu5 = (gidx1>>1);
  var val0 = data1[alu2];
  var val1 = data1[alu3];
  var val2 = data1[alu4];
  var val3 = data1[alu1];
  var val4 = data2[alu5];
  var val5 = data3[alu5];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu2] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu3] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu4] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu1] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_128_8_8_16_512_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 128 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<9);
  var alu1 = (lidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = (lidx1<15);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = (((gidx0+lidx0)<1)!=true);
  var alu6 = ((lidx0+(gidx0<<3))<63);
  var alu7 = (gidx1<<2);
  var alu8 = (alu0+(gidx1<<14)+alu1+alu2);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 512; ridx0++) {
    var alu9 = ((gidx1*18432)+(ridx0*9));
    var alu10 = (alu0+alu1+(ridx0<<12)+alu2);
    var val0 = select(0.0f, data1[(alu10+-65)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu10+-64)], alu5);
    var val2 = select(0.0f, data1[(alu10+-63)], alu5);
    var val3 = select(0.0f, data1[(alu10+-62)], alu5);
    var val4 = select(0.0f, data1[(alu10+-61)], alu5);
    var val5 = select(0.0f, data1[(alu10+-60)], (alu3&alu5));
    var val6 = select(0.0f, data1[(alu10+-1)], alu4);
    var val7 = data1[(alu10+1)];
    var val8 = data1[(alu10+2)];
    var val9 = data1[(alu10+3)];
    var val10 = select(0.0f, data1[(alu10+4)], alu3);
    var val11 = select(0.0f, data1[(alu10+63)], (alu6&alu4));
    var val12 = select(0.0f, data1[(alu10+64)], alu6);
    var val13 = select(0.0f, data1[(alu10+65)], alu6);
    var val14 = select(0.0f, data1[(alu10+66)], alu6);
    var val15 = select(0.0f, data1[(alu10+67)], alu6);
    var val16 = select(0.0f, data1[(alu10+68)], (alu3&alu6));
    var val17 = data1[alu10];
    var val18 = data2[(alu9+1)];
    var val19 = data2[(alu9+2)];
    var val20 = data2[(alu9+3)];
    var val21 = data2[(alu9+4)];
    var val22 = data2[(alu9+5)];
    var val23 = data2[(alu9+6)];
    var val24 = data2[(alu9+7)];
    var val25 = data2[(alu9+8)];
    var val26 = data2[(alu9+4608)];
    var val27 = data2[(alu9+4609)];
    var val28 = data2[(alu9+4610)];
    var val29 = data2[(alu9+4611)];
    var val30 = data2[(alu9+4612)];
    var val31 = data2[(alu9+4613)];
    var val32 = data2[(alu9+4614)];
    var val33 = data2[(alu9+4615)];
    var val34 = data2[(alu9+4616)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu9+9216)];
    var val36 = data2[(alu9+9217)];
    var val37 = data2[(alu9+9218)];
    var val38 = data2[(alu9+9219)];
    var val39 = data2[(alu9+9220)];
    var val40 = data2[(alu9+9221)];
    var val41 = data2[(alu9+9222)];
    var val42 = data2[(alu9+9223)];
    var val43 = data2[(alu9+9224)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu9+13824)];
    var val45 = data2[(alu9+13825)];
    var val46 = data2[(alu9+13826)];
    var val47 = data2[(alu9+13827)];
    var val48 = data2[(alu9+13828)];
    var val49 = data2[(alu9+13829)];
    var val50 = data2[(alu9+13830)];
    var val51 = data2[(alu9+13831)];
    var val52 = data2[(alu9+13832)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu9];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[(alu7+1)];
  data0[(alu8+4096)] = (val54+acc1);
  data0[(alu8+4097)] = (val54+acc5);
  data0[(alu8+4098)] = (val54+acc9);
  data0[(alu8+4099)] = (val54+acc13);
  var val55 = data3[(alu7+2)];
  data0[(alu8+8192)] = (val55+acc2);
  data0[(alu8+8193)] = (val55+acc6);
  data0[(alu8+8194)] = (val55+acc10);
  data0[(alu8+8195)] = (val55+acc14);
  var val56 = data3[(alu7+3)];
  data0[(alu8+12288)] = (val56+acc3);
  data0[(alu8+12289)] = (val56+acc7);
  data0[(alu8+12290)] = (val56+acc11);
  data0[(alu8+12291)] = (val56+acc15);
  var val57 = data3[alu7];
  data0[(alu8+1)] = (val57+acc4);
  data0[(alu8+2)] = (val57+acc8);
  data0[(alu8+3)] = (val57+acc12);
  data0[alu8] = (val57+acc0);
}`;

const r_128_8_8_16_512_4_4_3_3n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 128 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<9);
  var alu1 = (lidx0<<6);
  var alu2 = (lidx1<<2);
  var alu3 = (lidx1<15);
  var alu4 = ((lidx1<1)!=true);
  var alu5 = (((gidx0+lidx0)<1)!=true);
  var alu6 = ((lidx0+(gidx0<<3))<63);
  var alu7 = (gidx1<<2);
  var alu8 = (alu0+(gidx1<<14)+alu1+alu2);
  var alu9 = (alu8+1);
  var alu10 = (alu8+2);
  var alu11 = (alu8+3);
  var alu12 = (alu8+4096);
  var alu13 = (alu8+4097);
  var alu14 = (alu8+4098);
  var alu15 = (alu8+4099);
  var alu16 = (alu8+8192);
  var alu17 = (alu8+8193);
  var alu18 = (alu8+8194);
  var alu19 = (alu8+8195);
  var alu20 = (alu8+12288);
  var alu21 = (alu8+12289);
  var alu22 = (alu8+12290);
  var alu23 = (alu8+12291);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 512; ridx0++) {
    var alu24 = ((gidx1*18432)+(ridx0*9));
    var alu25 = (alu0+alu1+(ridx0<<12)+alu2);
    var val0 = select(0.0f, data2[(alu25+-65)], (alu4&alu5));
    var val1 = select(0.0f, data2[(alu25+-64)], alu5);
    var val2 = select(0.0f, data2[(alu25+-63)], alu5);
    var val3 = select(0.0f, data2[(alu25+-62)], alu5);
    var val4 = select(0.0f, data2[(alu25+-61)], alu5);
    var val5 = select(0.0f, data2[(alu25+-60)], (alu3&alu5));
    var val6 = select(0.0f, data2[(alu25+-1)], alu4);
    var val7 = data2[(alu25+1)];
    var val8 = data2[(alu25+2)];
    var val9 = data2[(alu25+3)];
    var val10 = select(0.0f, data2[(alu25+4)], alu3);
    var val11 = select(0.0f, data2[(alu25+63)], (alu6&alu4));
    var val12 = select(0.0f, data2[(alu25+64)], alu6);
    var val13 = select(0.0f, data2[(alu25+65)], alu6);
    var val14 = select(0.0f, data2[(alu25+66)], alu6);
    var val15 = select(0.0f, data2[(alu25+67)], alu6);
    var val16 = select(0.0f, data2[(alu25+68)], (alu3&alu6));
    var val17 = data2[alu25];
    var val18 = data3[(alu24+1)];
    var val19 = data3[(alu24+2)];
    var val20 = data3[(alu24+3)];
    var val21 = data3[(alu24+4)];
    var val22 = data3[(alu24+5)];
    var val23 = data3[(alu24+6)];
    var val24 = data3[(alu24+7)];
    var val25 = data3[(alu24+8)];
    var val26 = data3[(alu24+4608)];
    var val27 = data3[(alu24+4609)];
    var val28 = data3[(alu24+4610)];
    var val29 = data3[(alu24+4611)];
    var val30 = data3[(alu24+4612)];
    var val31 = data3[(alu24+4613)];
    var val32 = data3[(alu24+4614)];
    var val33 = data3[(alu24+4615)];
    var val34 = data3[(alu24+4616)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data3[(alu24+9216)];
    var val36 = data3[(alu24+9217)];
    var val37 = data3[(alu24+9218)];
    var val38 = data3[(alu24+9219)];
    var val39 = data3[(alu24+9220)];
    var val40 = data3[(alu24+9221)];
    var val41 = data3[(alu24+9222)];
    var val42 = data3[(alu24+9223)];
    var val43 = data3[(alu24+9224)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data3[(alu24+13824)];
    var val45 = data3[(alu24+13825)];
    var val46 = data3[(alu24+13826)];
    var val47 = data3[(alu24+13827)];
    var val48 = data3[(alu24+13828)];
    var val49 = data3[(alu24+13829)];
    var val50 = data3[(alu24+13830)];
    var val51 = data3[(alu24+13831)];
    var val52 = data3[(alu24+13832)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data3[alu24];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data1[alu9];
  var val55 = data1[alu10];
  var val56 = data1[alu11];
  var val57 = data1[alu12];
  var val58 = data1[alu13];
  var val59 = data1[alu14];
  var val60 = data1[alu15];
  var val61 = data1[alu16];
  var val62 = data1[alu17];
  var val63 = data1[alu18];
  var val64 = data1[alu19];
  var val65 = data1[alu20];
  var val66 = data1[alu21];
  var val67 = data1[alu22];
  var val68 = data1[alu23];
  var val69 = data1[alu8];
  var val70 = data4[(alu7+1)];
  data0[alu12] = (val57+val70+acc1);
  data0[alu13] = (val58+val70+acc5);
  data0[alu14] = (val59+val70+acc9);
  data0[alu15] = (val60+val70+acc13);
  var val71 = data4[(alu7+2)];
  data0[alu16] = (val61+val71+acc2);
  data0[alu17] = (val62+val71+acc6);
  data0[alu18] = (val63+val71+acc10);
  data0[alu19] = (val64+val71+acc14);
  var val72 = data4[(alu7+3)];
  data0[alu20] = (val65+val72+acc3);
  data0[alu21] = (val66+val72+acc7);
  data0[alu22] = (val67+val72+acc11);
  data0[alu23] = (val68+val72+acc15);
  var val73 = data4[alu7];
  data0[alu9] = (val54+val73+acc4);
  data0[alu10] = (val55+val73+acc8);
  data0[alu11] = (val56+val73+acc12);
  data0[alu8] = (val69+val73+acc0);
}`;

const E_64_64_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx0<<6)+(gidx1<<15)+(lidx0<<12)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var alu5 = (gidx1>>1);
  var val0 = data1[alu2];
  var val1 = data1[alu3];
  var val2 = data1[alu4];
  var val3 = data1[alu1];
  var val4 = data2[alu5];
  var val5 = data3[alu5];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  data0[alu2] = (val7+(val6*val5*(val0-val4)));
  data0[alu3] = (val7+(val6*val5*(val1-val4)));
  data0[alu4] = (val7+(val6*val5*(val2-val4)));
  data0[alu1] = (val7+(val6*val5*(val3-val4)));
}`;

const r_16_64_8_16_128_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 16 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1<<5)+(lidx0<<2));
  var alu3 = (alu0+(gidx1<<17)+(lidx0<<14)+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 128; ridx0++) {
    var alu4 = ((gidx1<<14)+(lidx0<<11)+(ridx0<<2));
    var alu5 = (alu0+alu1+(ridx0<<14));
    var val0 = data1[(alu5+1)];
    var val1 = data1[(alu5+2)];
    var val2 = data1[(alu5+3)];
    var val3 = data1[(alu5+4096)];
    var val4 = data1[(alu5+4097)];
    var val5 = data1[(alu5+4098)];
    var val6 = data1[(alu5+4099)];
    var val7 = data1[(alu5+8192)];
    var val8 = data1[(alu5+8193)];
    var val9 = data1[(alu5+8194)];
    var val10 = data1[(alu5+8195)];
    var val11 = data1[(alu5+12288)];
    var val12 = data1[(alu5+12289)];
    var val13 = data1[(alu5+12290)];
    var val14 = data1[(alu5+12291)];
    var val15 = data1[alu5];
    var val16 = data2[(alu4+1)];
    var val17 = data2[(alu4+2)];
    var val18 = data2[(alu4+3)];
    var val19 = data2[(alu4+512)];
    var val20 = data2[(alu4+513)];
    var val21 = data2[(alu4+514)];
    var val22 = data2[(alu4+515)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu4+1024)];
    var val24 = data2[(alu4+1025)];
    var val25 = data2[(alu4+1026)];
    var val26 = data2[(alu4+1027)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu4+1536)];
    var val28 = data2[(alu4+1537)];
    var val29 = data2[(alu4+1538)];
    var val30 = data2[(alu4+1539)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu4];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[(alu2+1)];
  data0[(alu3+4096)] = (val32+acc1);
  data0[(alu3+4097)] = (val32+acc5);
  data0[(alu3+4098)] = (val32+acc9);
  data0[(alu3+4099)] = (val32+acc13);
  var val33 = data3[(alu2+2)];
  data0[(alu3+8192)] = (val33+acc2);
  data0[(alu3+8193)] = (val33+acc6);
  data0[(alu3+8194)] = (val33+acc10);
  data0[(alu3+8195)] = (val33+acc14);
  var val34 = data3[(alu2+3)];
  data0[(alu3+12288)] = (val34+acc3);
  data0[(alu3+12289)] = (val34+acc7);
  data0[(alu3+12290)] = (val34+acc11);
  data0[(alu3+12291)] = (val34+acc15);
  var val35 = data3[alu2];
  data0[(alu3+1)] = (val35+acc4);
  data0[(alu3+2)] = (val35+acc8);
  data0[(alu3+3)] = (val35+acc12);
  data0[alu3] = (val35+acc0);
}`;

const r_128_64_8_16_128_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 128 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = (alu0+(gidx1<<17)+(lidx0<<14)+alu1);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 128; ridx0++) {
    var alu3 = (ridx0<<14);
    var alu4 = (alu0+alu1+alu3);
    var alu5 = ((gidx1<<5)+(lidx0<<2)+alu3);
    var val0 = data1[(alu5+1)];
    var val1 = data1[(alu5+2)];
    var val2 = data1[(alu5+3)];
    var val3 = data1[(alu5+4096)];
    var val4 = data1[(alu5+4097)];
    var val5 = data1[(alu5+4098)];
    var val6 = data1[(alu5+4099)];
    var val7 = data1[(alu5+8192)];
    var val8 = data1[(alu5+8193)];
    var val9 = data1[(alu5+8194)];
    var val10 = data1[(alu5+8195)];
    var val11 = data1[(alu5+12288)];
    var val12 = data1[(alu5+12289)];
    var val13 = data1[(alu5+12290)];
    var val14 = data1[(alu5+12291)];
    var val15 = data1[alu5];
    var val16 = data2[(alu4+1)];
    var val17 = data2[(alu4+2)];
    var val18 = data2[(alu4+3)];
    var val19 = data2[(alu4+4096)];
    var val20 = data2[(alu4+4097)];
    var val21 = data2[(alu4+4098)];
    var val22 = data2[(alu4+4099)];
    var val23 = data2[(alu4+8192)];
    var val24 = data2[(alu4+8193)];
    var val25 = data2[(alu4+8194)];
    var val26 = data2[(alu4+8195)];
    var val27 = data2[(alu4+12288)];
    var val28 = data2[(alu4+12289)];
    acc4 = (acc4+(val3*val20)+(val15*val16)+(val7*val24)+(val11*val28));
    acc5 = (acc5+(val0*val16)+(val4*val20)+(val8*val24)+(val12*val28));
    acc6 = (acc6+(val1*val16)+(val5*val20)+(val9*val24)+(val13*val28));
    acc7 = (acc7+(val2*val16)+(val6*val20)+(val10*val24)+(val14*val28));
    var val29 = data2[(alu4+12290)];
    acc8 = (acc8+(val3*val21)+(val15*val17)+(val7*val25)+(val11*val29));
    acc9 = (acc9+(val0*val17)+(val4*val21)+(val8*val25)+(val12*val29));
    acc10 = (acc10+(val1*val17)+(val5*val21)+(val9*val25)+(val13*val29));
    acc11 = (acc11+(val2*val17)+(val6*val21)+(val10*val25)+(val14*val29));
    var val30 = data2[(alu4+12291)];
    acc12 = (acc12+(val3*val22)+(val15*val18)+(val7*val26)+(val11*val30));
    acc13 = (acc13+(val0*val18)+(val4*val22)+(val8*val26)+(val12*val30));
    acc14 = (acc14+(val1*val18)+(val5*val22)+(val9*val26)+(val13*val30));
    acc15 = (acc15+(val2*val18)+(val6*val22)+(val10*val26)+(val14*val30));
    var val31 = data2[alu4];
    acc0 = (acc0+(val3*val19)+(val15*val31)+(val7*val23)+(val11*val27));
    acc1 = (acc1+(val0*val31)+(val4*val19)+(val8*val23)+(val12*val27));
    acc2 = (acc2+(val1*val31)+(val5*val19)+(val9*val23)+(val13*val27));
    acc3 = (acc3+(val2*val31)+(val6*val19)+(val10*val23)+(val14*val27));
  }
  data0[(alu2+1)] = (acc4*0.04419417306780815f);
  data0[(alu2+2)] = (acc8*0.04419417306780815f);
  data0[(alu2+3)] = (acc12*0.04419417306780815f);
  data0[(alu2+4096)] = (acc1*0.04419417306780815f);
  data0[(alu2+4097)] = (acc5*0.04419417306780815f);
  data0[(alu2+4098)] = (acc9*0.04419417306780815f);
  data0[(alu2+4099)] = (acc13*0.04419417306780815f);
  data0[(alu2+8192)] = (acc2*0.04419417306780815f);
  data0[(alu2+8193)] = (acc6*0.04419417306780815f);
  data0[(alu2+8194)] = (acc10*0.04419417306780815f);
  data0[(alu2+8195)] = (acc14*0.04419417306780815f);
  data0[(alu2+12288)] = (acc3*0.04419417306780815f);
  data0[(alu2+12289)] = (acc7*0.04419417306780815f);
  data0[(alu2+12290)] = (acc11*0.04419417306780815f);
  data0[(alu2+12291)] = (acc15*0.04419417306780815f);
  data0[alu2] = (acc0*0.04419417306780815f);
}`;

const r_128_32_1024_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 128 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = (f32(-inf(1.0)));
  for (var ridx0 = 0; ridx0 < 1024; ridx0++) {
    var alu0 = ((gidx0<<17)+(lidx0<<12)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    var alu1 = select(val0,val3,(val0<val3));
    var alu2 = select(val1,alu1,(val1<alu1));
    var alu3 = select(val2,alu2,(val2<alu2));
    acc0 = select(acc0,alu3,(acc0<alu3));
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_32_32_1024_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 32 */
  var alu0 = ((gidx0<<7)+(lidx0<<2));
  var alu1 = (alu0+1);
  var alu2 = (alu0+2);
  var alu3 = (alu0+3);
  var val0 = data2[alu1];
  var val1 = data2[alu2];
  var val2 = data2[alu3];
  var val3 = data2[alu0];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1024; ridx0++) {
    var alu4 = ((gidx0<<19)+(lidx0<<14)+(ridx0<<2));
    var val4 = data1[(alu4+1)];
    var val5 = data1[(alu4+2)];
    var val6 = data1[(alu4+3)];
    var val7 = data1[(alu4+4096)];
    var val8 = data1[(alu4+4097)];
    var val9 = data1[(alu4+4098)];
    var val10 = data1[(alu4+4099)];
    acc1 = (acc1+exp2(((val10-val0)*1.4426950408889634f))+exp2(((val9-val0)*1.4426950408889634f))+exp2(((val7-val0)*1.4426950408889634f))+exp2(((val8-val0)*1.4426950408889634f)));
    var val11 = data1[(alu4+8192)];
    var val12 = data1[(alu4+8193)];
    var val13 = data1[(alu4+8194)];
    var val14 = data1[(alu4+8195)];
    acc2 = (acc2+exp2(((val14-val1)*1.4426950408889634f))+exp2(((val13-val1)*1.4426950408889634f))+exp2(((val11-val1)*1.4426950408889634f))+exp2(((val12-val1)*1.4426950408889634f)));
    var val15 = data1[(alu4+12288)];
    var val16 = data1[(alu4+12289)];
    var val17 = data1[(alu4+12290)];
    var val18 = data1[(alu4+12291)];
    acc3 = (acc3+exp2(((val18-val2)*1.4426950408889634f))+exp2(((val17-val2)*1.4426950408889634f))+exp2(((val15-val2)*1.4426950408889634f))+exp2(((val16-val2)*1.4426950408889634f)));
    var val19 = data1[alu4];
    acc0 = (acc0+exp2(((val6-val3)*1.4426950408889634f))+exp2(((val5-val3)*1.4426950408889634f))+exp2(((val4-val3)*1.4426950408889634f))+exp2(((val19-val3)*1.4426950408889634f)));
  }
  data0[alu1] = acc1;
  data0[alu2] = acc2;
  data0[alu3] = acc3;
  data0[alu0] = acc0;
}`;

const E_512_64_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 512 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx0<<6)+(gidx1<<15)+(lidx0<<12)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var val0 = data1[alu2];
  var val1 = data1[alu3];
  var val2 = data1[alu4];
  var val3 = data1[alu1];
  var val4 = data2[alu0];
  var val5 = data3[alu0];
  var alu5 = (1/val5);
  data0[alu2] = (exp2(((val0-val4)*1.4426950408889634f))*alu5);
  data0[alu3] = (exp2(((val1-val4)*1.4426950408889634f))*alu5);
  data0[alu4] = (exp2(((val2-val4)*1.4426950408889634f))*alu5);
  data0[alu1] = (exp2(((val3-val4)*1.4426950408889634f))*alu5);
}`;

const r_128_8_8_16_1024_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 128 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1<<14)+(lidx0<<11)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1024; ridx0++) {
    var alu1 = (ridx0<<2);
    var alu2 = ((gidx0<<18)+(lidx1<<14)+alu1);
    var alu3 = ((gidx1<<17)+(lidx0<<14)+alu1);
    var val0 = data1[(alu3+1)];
    var val1 = data1[(alu3+2)];
    var val2 = data1[(alu3+3)];
    var val3 = data1[(alu3+4096)];
    var val4 = data1[(alu3+4097)];
    var val5 = data1[(alu3+4098)];
    var val6 = data1[(alu3+4099)];
    var val7 = data1[(alu3+8192)];
    var val8 = data1[(alu3+8193)];
    var val9 = data1[(alu3+8194)];
    var val10 = data1[(alu3+8195)];
    var val11 = data1[(alu3+12288)];
    var val12 = data1[(alu3+12289)];
    var val13 = data1[(alu3+12290)];
    var val14 = data1[(alu3+12291)];
    var val15 = data1[alu3];
    var val16 = data2[(alu2+1)];
    var val17 = data2[(alu2+2)];
    var val18 = data2[(alu2+3)];
    var val19 = data2[(alu2+4096)];
    var val20 = data2[(alu2+4097)];
    var val21 = data2[(alu2+4098)];
    var val22 = data2[(alu2+4099)];
    acc4 = (acc4+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc6 = (acc6+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc7 = (acc7+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data2[(alu2+8192)];
    var val24 = data2[(alu2+8193)];
    var val25 = data2[(alu2+8194)];
    var val26 = data2[(alu2+8195)];
    acc8 = (acc8+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc9 = (acc9+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc11 = (acc11+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data2[(alu2+12288)];
    var val28 = data2[(alu2+12289)];
    var val29 = data2[(alu2+12290)];
    var val30 = data2[(alu2+12291)];
    acc12 = (acc12+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc13 = (acc13+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc14 = (acc14+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data2[alu2];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc1 = (acc1+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc2 = (acc2+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc3 = (acc3+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  data0[(alu0+1)] = acc4;
  data0[(alu0+2)] = acc8;
  data0[(alu0+3)] = acc12;
  data0[(alu0+512)] = acc1;
  data0[(alu0+513)] = acc5;
  data0[(alu0+514)] = acc9;
  data0[(alu0+515)] = acc13;
  data0[(alu0+1024)] = acc2;
  data0[(alu0+1025)] = acc6;
  data0[(alu0+1026)] = acc10;
  data0[(alu0+1027)] = acc14;
  data0[(alu0+1536)] = acc3;
  data0[(alu0+1537)] = acc7;
  data0[(alu0+1538)] = acc11;
  data0[(alu0+1539)] = acc15;
  data0[alu0] = acc0;
}`;

const r_16_64_8_16_128_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 64 */
  var gidx1 = i32(gindex.y); /* 16 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx1<<5)+(lidx0<<2));
  var alu1 = ((gidx0<<6)+(gidx1<<17)+(lidx0<<14)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var alu5 = (alu1+4096);
  var alu6 = (alu1+4097);
  var alu7 = (alu1+4098);
  var alu8 = (alu1+4099);
  var alu9 = (alu1+8192);
  var alu10 = (alu1+8193);
  var alu11 = (alu1+8194);
  var alu12 = (alu1+8195);
  var alu13 = (alu1+12288);
  var alu14 = (alu1+12289);
  var alu15 = (alu1+12290);
  var alu16 = (alu1+12291);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 128; ridx0++) {
    var alu17 = (ridx0<<2);
    var alu18 = ((gidx0<<15)+(lidx1<<11)+alu17);
    var alu19 = ((gidx1<<14)+(lidx0<<11)+alu17);
    var val0 = data2[(alu18+1)];
    var val1 = data2[(alu18+2)];
    var val2 = data2[(alu18+3)];
    var val3 = data2[(alu18+512)];
    var val4 = data2[(alu18+513)];
    var val5 = data2[(alu18+514)];
    var val6 = data2[(alu18+515)];
    var val7 = data2[(alu18+1024)];
    var val8 = data2[(alu18+1025)];
    var val9 = data2[(alu18+1026)];
    var val10 = data2[(alu18+1027)];
    var val11 = data2[(alu18+1536)];
    var val12 = data2[(alu18+1537)];
    var val13 = data2[(alu18+1538)];
    var val14 = data2[(alu18+1539)];
    var val15 = data2[alu18];
    var val16 = data3[(alu19+1)];
    var val17 = data3[(alu19+2)];
    var val18 = data3[(alu19+3)];
    var val19 = data3[(alu19+512)];
    var val20 = data3[(alu19+513)];
    var val21 = data3[(alu19+514)];
    var val22 = data3[(alu19+515)];
    acc1 = (acc1+(val0*val20)+(val15*val19)+(val1*val21)+(val2*val22));
    acc5 = (acc5+(val3*val19)+(val4*val20)+(val5*val21)+(val6*val22));
    acc9 = (acc9+(val7*val19)+(val8*val20)+(val9*val21)+(val10*val22));
    acc13 = (acc13+(val11*val19)+(val12*val20)+(val13*val21)+(val14*val22));
    var val23 = data3[(alu19+1024)];
    var val24 = data3[(alu19+1025)];
    var val25 = data3[(alu19+1026)];
    var val26 = data3[(alu19+1027)];
    acc2 = (acc2+(val0*val24)+(val15*val23)+(val1*val25)+(val2*val26));
    acc6 = (acc6+(val3*val23)+(val4*val24)+(val5*val25)+(val6*val26));
    acc10 = (acc10+(val7*val23)+(val8*val24)+(val9*val25)+(val10*val26));
    acc14 = (acc14+(val11*val23)+(val12*val24)+(val13*val25)+(val14*val26));
    var val27 = data3[(alu19+1536)];
    var val28 = data3[(alu19+1537)];
    var val29 = data3[(alu19+1538)];
    var val30 = data3[(alu19+1539)];
    acc3 = (acc3+(val0*val28)+(val15*val27)+(val1*val29)+(val2*val30));
    acc7 = (acc7+(val3*val27)+(val4*val28)+(val5*val29)+(val6*val30));
    acc11 = (acc11+(val7*val27)+(val8*val28)+(val9*val29)+(val10*val30));
    acc15 = (acc15+(val11*val27)+(val12*val28)+(val13*val29)+(val14*val30));
    var val31 = data3[alu19];
    acc0 = (acc0+(val0*val16)+(val15*val31)+(val1*val17)+(val2*val18));
    acc4 = (acc4+(val3*val31)+(val4*val16)+(val5*val17)+(val6*val18));
    acc8 = (acc8+(val7*val31)+(val8*val16)+(val9*val17)+(val10*val18));
    acc12 = (acc12+(val11*val31)+(val12*val16)+(val13*val17)+(val14*val18));
  }
  var val32 = data1[alu2];
  var val33 = data1[alu3];
  var val34 = data1[alu4];
  var val35 = data1[alu5];
  var val36 = data1[alu6];
  var val37 = data1[alu7];
  var val38 = data1[alu8];
  var val39 = data1[alu9];
  var val40 = data1[alu10];
  var val41 = data1[alu11];
  var val42 = data1[alu12];
  var val43 = data1[alu13];
  var val44 = data1[alu14];
  var val45 = data1[alu15];
  var val46 = data1[alu16];
  var val47 = data1[alu1];
  var val48 = data4[(alu0+1)];
  data0[alu5] = (val35+val48+acc1);
  data0[alu6] = (val36+val48+acc5);
  data0[alu7] = (val37+val48+acc9);
  data0[alu8] = (val38+val48+acc13);
  var val49 = data4[(alu0+2)];
  data0[alu9] = (val39+val49+acc2);
  data0[alu10] = (val40+val49+acc6);
  data0[alu11] = (val41+val49+acc10);
  data0[alu12] = (val42+val49+acc14);
  var val50 = data4[(alu0+3)];
  data0[alu13] = (val43+val50+acc3);
  data0[alu14] = (val44+val50+acc7);
  data0[alu15] = (val45+val50+acc11);
  data0[alu16] = (val46+val50+acc15);
  var val51 = data4[alu0];
  data0[alu2] = (val32+val51+acc4);
  data0[alu3] = (val33+val51+acc8);
  data0[alu4] = (val34+val51+acc12);
  data0[alu1] = (val47+val51+acc0);
}`;

const r_128_16_2_8_16_512_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 16 */
  var gidx2 = i32(gindex.z); /* 128 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<5)+(lidx1<<1));
  var alu1 = ((lidx0+1)>>1);
  var alu2 = (lidx0+((gidx0+((lidx1+1)>>4))>>1));
  var alu3 = (lidx0+((gidx0+((lidx1+15)>>4)+1)>>1));
  var alu4 = ((alu2+1)>>1);
  var alu5 = ((alu0+2)&63);
  var alu6 = ((alu0+63)&63);
  var alu7 = (((gidx0+lidx1)<1)!=true);
  var alu8 = (((gidx1+lidx0)<1)!=true);
  var alu9 = ((lidx1+(gidx0<<4))<31);
  var alu10 = ((lidx0+(gidx1<<3))<127);
  var alu11 = (gidx2<<2);
  var alu12 = ((gidx1<<10)+(gidx2<<16)+(gidx0<<6)+(lidx0<<7)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 512; ridx0++) {
    var alu13 = ((gidx2*18432)+(ridx0*9));
    var alu14 = ((gidx1<<2)+(ridx0<<6));
    var alu15 = (alu14+(alu3>>1));
    var alu16 = ((gidx1<<8)+(ridx0<<12));
    var alu17 = (alu16+((lidx0>>1)<<6)+alu0);
    var alu18 = (alu16+(alu1<<6)+alu0);
    var alu19 = (alu0+(((alu14+alu1)&32767)<<6));
    var val0 = data1[(alu17+1)];
    var val1 = select(0.0f, data1[(alu18+-64)], alu8);
    var val2 = select(0.0f, data1[(alu18+-63)], alu8);
    var val3 = select(0.0f, data1[(alu16+(alu4<<6)+alu5+-64)], (alu9&alu8));
    var val4 = select(0.0f, data1[(alu19+1)], alu10);
    var val5 = data1[alu17];
    var val6 = select(0.0f, data1[alu19], alu10);
    var val7 = select(0.0f, data1[((((alu15+32767)&32767)<<6)+alu6)], (alu7&alu8));
    var val8 = select(0.0f, data1[((((alu14+((alu3+1)>>1)+32767)&32767)<<6)+alu6)], alu7);
    var val9 = select(0.0f, data1[((((alu14+(alu2>>1))&32767)<<6)+alu5)], alu9);
    var val10 = select(0.0f, data1[(((alu15&32767)<<6)+alu6)], (alu10&alu7));
    var val11 = select(0.0f, data1[((((alu14+alu4)&32767)<<6)+alu5)], (alu10&alu9));
    var val12 = data2[(alu13+1)];
    var alu20 = (val1*val12);
    var alu21 = (val2*val12);
    var val13 = data2[(alu13+2)];
    var alu22 = (val2*val13);
    var val14 = data2[(alu13+3)];
    var val15 = data2[(alu13+4)];
    var alu23 = (val0*val15);
    var alu24 = (val5*val15);
    var val16 = data2[(alu13+5)];
    var alu25 = (val0*val16);
    var val17 = data2[(alu13+6)];
    var val18 = data2[(alu13+7)];
    var alu26 = (val4*val18);
    var alu27 = (val6*val18);
    var val19 = data2[(alu13+8)];
    var alu28 = (val4*val19);
    var val20 = data2[(alu13+4608)];
    var val21 = data2[(alu13+4609)];
    var alu29 = (val1*val21);
    var alu30 = (val2*val21);
    var val22 = data2[(alu13+4610)];
    var alu31 = (val2*val22);
    var val23 = data2[(alu13+4611)];
    var val24 = data2[(alu13+4612)];
    var alu32 = (val0*val24);
    var alu33 = (val5*val24);
    var val25 = data2[(alu13+4613)];
    var alu34 = (val0*val25);
    var val26 = data2[(alu13+4614)];
    var alu35 = ((val1*val20)+(val5*val23)+(val6*val26));
    var val27 = data2[(alu13+4615)];
    var alu36 = (val4*val27);
    var alu37 = (val6*val27);
    var val28 = data2[(alu13+4616)];
    var alu38 = (val4*val28);
    acc1 = (acc1+(val7*val20)+(val8*val23)+(val10*val26)+alu29+alu33+alu37+(val1*val22)+(val5*val25)+(val6*val28));
    acc5 = (acc5+alu35+alu29+alu33+alu37+alu31+alu34+alu38);
    acc9 = (acc9+alu35+alu30+alu32+alu36+alu31+alu34+alu38);
    acc13 = (acc13+(val0*val23)+(val2*val20)+(val4*val26)+alu30+alu32+alu36+(val3*val22)+(val9*val25)+(val11*val28));
    var val29 = data2[(alu13+9216)];
    var val30 = data2[(alu13+9217)];
    var alu43 = (val1*val30);
    var alu44 = (val2*val30);
    var val31 = data2[(alu13+9218)];
    var alu45 = (val2*val31);
    var val32 = data2[(alu13+9219)];
    var val33 = data2[(alu13+9220)];
    var alu46 = (val0*val33);
    var alu47 = (val5*val33);
    var val34 = data2[(alu13+9221)];
    var alu48 = (val0*val34);
    var val35 = data2[(alu13+9222)];
    var alu49 = ((val1*val29)+(val5*val32)+(val6*val35));
    var val36 = data2[(alu13+9223)];
    var alu50 = (val4*val36);
    var alu51 = (val6*val36);
    var val37 = data2[(alu13+9224)];
    var alu52 = (val4*val37);
    acc2 = (acc2+(val7*val29)+(val8*val32)+(val10*val35)+alu43+alu47+alu51+(val1*val31)+(val5*val34)+(val6*val37));
    acc6 = (acc6+alu49+alu43+alu47+alu51+alu45+alu48+alu52);
    acc10 = (acc10+alu49+alu44+alu46+alu50+alu45+alu48+alu52);
    acc14 = (acc14+(val0*val32)+(val2*val29)+(val4*val35)+alu44+alu46+alu50+(val3*val31)+(val9*val34)+(val11*val37));
    var val38 = data2[(alu13+13824)];
    var val39 = data2[(alu13+13825)];
    var alu57 = (val1*val39);
    var alu58 = (val2*val39);
    var val40 = data2[(alu13+13826)];
    var alu59 = (val2*val40);
    var val41 = data2[(alu13+13827)];
    var val42 = data2[(alu13+13828)];
    var alu60 = (val0*val42);
    var alu61 = (val5*val42);
    var val43 = data2[(alu13+13829)];
    var alu62 = (val0*val43);
    var val44 = data2[(alu13+13830)];
    var alu63 = ((val1*val38)+(val5*val41)+(val6*val44));
    var val45 = data2[(alu13+13831)];
    var alu64 = (val4*val45);
    var alu65 = (val6*val45);
    var val46 = data2[(alu13+13832)];
    var alu66 = (val4*val46);
    acc3 = (acc3+(val7*val38)+(val8*val41)+(val10*val44)+alu57+alu61+alu65+(val1*val40)+(val5*val43)+(val6*val46));
    acc7 = (acc7+alu63+alu57+alu61+alu65+alu59+alu62+alu66);
    acc11 = (acc11+alu63+alu58+alu60+alu64+alu59+alu62+alu66);
    acc15 = (acc15+(val0*val41)+(val2*val38)+(val4*val44)+alu58+alu60+alu64+(val3*val40)+(val9*val43)+(val11*val46));
    var val47 = data2[alu13];
    var alu71 = ((val1*val47)+(val5*val14)+(val6*val17));
    acc0 = (acc0+(val7*val47)+(val8*val14)+(val10*val17)+alu20+alu24+alu27+(val1*val13)+(val5*val16)+(val6*val19));
    acc4 = (acc4+alu71+alu20+alu24+alu27+alu22+alu25+alu28);
    acc8 = (acc8+alu71+alu21+alu23+alu26+alu22+alu25+alu28);
    acc12 = (acc12+(val0*val14)+(val2*val47)+(val4*val17)+alu21+alu23+alu26+(val3*val13)+(val9*val16)+(val11*val19));
  }
  var val48 = data3[(alu11+1)];
  data0[(alu12+16384)] = (val48+acc1);
  data0[(alu12+16385)] = (val48+acc5);
  data0[(alu12+16386)] = (val48+acc9);
  data0[(alu12+16387)] = (val48+acc13);
  var val49 = data3[(alu11+2)];
  data0[(alu12+32768)] = (val49+acc2);
  data0[(alu12+32769)] = (val49+acc6);
  data0[(alu12+32770)] = (val49+acc10);
  data0[(alu12+32771)] = (val49+acc14);
  var val50 = data3[(alu11+3)];
  data0[(alu12+49152)] = (val50+acc3);
  data0[(alu12+49153)] = (val50+acc7);
  data0[(alu12+49154)] = (val50+acc11);
  data0[(alu12+49155)] = (val50+acc15);
  var val51 = data3[alu11];
  data0[(alu12+1)] = (val51+acc4);
  data0[(alu12+2)] = (val51+acc8);
  data0[(alu12+3)] = (val51+acc12);
  data0[alu12] = (val51+acc0);
}`;

const r_256_32_256_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 256 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 256; ridx0++) {
    var alu0 = ((gidx0<<15)+(lidx0<<10)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    acc0 = (acc0+val2+val1+val0+val3);
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_32_256n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 256>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 256 */
  var val0 = data1[(lidx0+(gidx0<<8))];
  temp0[lidx0] = val0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc0 = 0.0f;
    for (var ridx0 = 0; ridx0 < 256; ridx0++) {
      var val1 = temp0[ridx0];
      acc0 = (acc0+val1);
    }
    data0[gidx0] = (acc0*3.814697265625e-06f);
  }
}`;

const r_4_4_8_16_256_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 4 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1<<11)+(lidx0<<8)+(lidx1<<2));
  var val0 = data2[(lidx0+(gidx1<<3))];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 256; ridx0++) {
    var alu1 = ((gidx0<<16)+(gidx1<<21)+(lidx0<<18)+(lidx1<<12)+(ridx0<<2));
    var val1 = data1[(alu1+1)];
    var alu2 = (val1-val0);
    var val2 = data1[(alu1+2)];
    var alu3 = (val2-val0);
    var val3 = data1[(alu1+3)];
    var alu4 = (val3-val0);
    var val4 = data1[(alu1+1024)];
    var alu5 = (val4-val0);
    var val5 = data1[(alu1+1025)];
    var alu6 = (val5-val0);
    var val6 = data1[(alu1+1026)];
    var alu7 = (val6-val0);
    var val7 = data1[(alu1+1027)];
    var alu8 = (val7-val0);
    acc1 = (acc1+(alu5*alu5)+(alu6*alu6)+(alu7*alu7)+(alu8*alu8));
    var val8 = data1[(alu1+2048)];
    var alu10 = (val8-val0);
    var val9 = data1[(alu1+2049)];
    var alu11 = (val9-val0);
    var val10 = data1[(alu1+2050)];
    var alu12 = (val10-val0);
    var val11 = data1[(alu1+2051)];
    var alu13 = (val11-val0);
    acc2 = (acc2+(alu10*alu10)+(alu11*alu11)+(alu12*alu12)+(alu13*alu13));
    var val12 = data1[(alu1+3072)];
    var alu15 = (val12-val0);
    var val13 = data1[(alu1+3073)];
    var alu16 = (val13-val0);
    var val14 = data1[(alu1+3074)];
    var alu17 = (val14-val0);
    var val15 = data1[(alu1+3075)];
    var alu18 = (val15-val0);
    acc3 = (acc3+(alu15*alu15)+(alu16*alu16)+(alu17*alu17)+(alu18*alu18));
    var val16 = data1[alu1];
    var alu20 = (val16-val0);
    acc0 = (acc0+(alu2*alu2)+(alu20*alu20)+(alu3*alu3)+(alu4*alu4));
  }
  data0[(alu0+1)] = acc1;
  data0[(alu0+2)] = acc2;
  data0[(alu0+3)] = acc3;
  data0[alu0] = acc0;
}`;

const r_32_256n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 256>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 256 */
  var val0 = data1[(lidx0+(gidx0<<8))];
  temp0[lidx0] = val0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc0 = 0.0f;
    for (var ridx0 = 0; ridx0 < 256; ridx0++) {
      var val1 = temp0[ridx0];
      acc0 = (acc0+val1);
    }
    data0[gidx0] = sqrt((1/((acc0*3.814697265625e-06f)+1e-05f)));
  }
}`;

const E_64_256_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 256 */
  var gidx1 = i32(gindex.y); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx0<<6)+(gidx1<<17)+(lidx0<<14)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var alu5 = (gidx1>>1);
  var val0 = data1[alu2];
  var val1 = data1[alu3];
  var val2 = data1[alu4];
  var val3 = data1[alu1];
  var val4 = data2[alu5];
  var val5 = data3[alu5];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu2] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu3] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu4] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu1] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_128_16_2_8_16_512_4_4_3_3n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 16 */
  var gidx2 = i32(gindex.z); /* 128 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (gidx1<<10);
  var alu2 = (lidx0<<7);
  var alu3 = (lidx1<<2);
  var alu4 = (((gidx0+lidx1)<1)!=true);
  var alu5 = (((gidx1+lidx0)<1)!=true);
  var alu6 = ((lidx1+(gidx0<<4))<31);
  var alu7 = ((lidx0+(gidx1<<3))<127);
  var alu8 = (gidx2<<2);
  var alu9 = (alu1+(gidx2<<16)+alu0+alu2+alu3);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 512; ridx0++) {
    var alu10 = ((gidx2*18432)+(ridx0*9));
    var alu11 = (alu1+alu2+(ridx0<<14)+alu0+alu3);
    var val0 = select(0.0f, data1[(alu11+-129)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu11+-128)], alu5);
    var val2 = select(0.0f, data1[(alu11+-127)], alu5);
    var val3 = select(0.0f, data1[(alu11+-126)], alu5);
    var val4 = select(0.0f, data1[(alu11+-125)], alu5);
    var val5 = select(0.0f, data1[(alu11+-124)], (alu6&alu5));
    var val6 = select(0.0f, data1[(alu11+-1)], alu4);
    var val7 = data1[(alu11+1)];
    var val8 = data1[(alu11+2)];
    var val9 = data1[(alu11+3)];
    var val10 = select(0.0f, data1[(alu11+4)], alu6);
    var val11 = select(0.0f, data1[(alu11+127)], (alu7&alu4));
    var val12 = select(0.0f, data1[(alu11+128)], alu7);
    var val13 = select(0.0f, data1[(alu11+129)], alu7);
    var val14 = select(0.0f, data1[(alu11+130)], alu7);
    var val15 = select(0.0f, data1[(alu11+131)], alu7);
    var val16 = select(0.0f, data1[(alu11+132)], (alu7&alu6));
    var val17 = data1[alu11];
    var val18 = data2[(alu10+1)];
    var val19 = data2[(alu10+2)];
    var val20 = data2[(alu10+3)];
    var val21 = data2[(alu10+4)];
    var val22 = data2[(alu10+5)];
    var val23 = data2[(alu10+6)];
    var val24 = data2[(alu10+7)];
    var val25 = data2[(alu10+8)];
    var val26 = data2[(alu10+4608)];
    var val27 = data2[(alu10+4609)];
    var val28 = data2[(alu10+4610)];
    var val29 = data2[(alu10+4611)];
    var val30 = data2[(alu10+4612)];
    var val31 = data2[(alu10+4613)];
    var val32 = data2[(alu10+4614)];
    var val33 = data2[(alu10+4615)];
    var val34 = data2[(alu10+4616)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu10+9216)];
    var val36 = data2[(alu10+9217)];
    var val37 = data2[(alu10+9218)];
    var val38 = data2[(alu10+9219)];
    var val39 = data2[(alu10+9220)];
    var val40 = data2[(alu10+9221)];
    var val41 = data2[(alu10+9222)];
    var val42 = data2[(alu10+9223)];
    var val43 = data2[(alu10+9224)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu10+13824)];
    var val45 = data2[(alu10+13825)];
    var val46 = data2[(alu10+13826)];
    var val47 = data2[(alu10+13827)];
    var val48 = data2[(alu10+13828)];
    var val49 = data2[(alu10+13829)];
    var val50 = data2[(alu10+13830)];
    var val51 = data2[(alu10+13831)];
    var val52 = data2[(alu10+13832)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu10];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[(alu8+1)];
  data0[(alu9+16384)] = (val54+acc1);
  data0[(alu9+16385)] = (val54+acc5);
  data0[(alu9+16386)] = (val54+acc9);
  data0[(alu9+16387)] = (val54+acc13);
  var val55 = data3[(alu8+2)];
  data0[(alu9+32768)] = (val55+acc2);
  data0[(alu9+32769)] = (val55+acc6);
  data0[(alu9+32770)] = (val55+acc10);
  data0[(alu9+32771)] = (val55+acc14);
  var val56 = data3[(alu8+3)];
  data0[(alu9+49152)] = (val56+acc3);
  data0[(alu9+49153)] = (val56+acc7);
  data0[(alu9+49154)] = (val56+acc11);
  data0[(alu9+49155)] = (val56+acc15);
  var val57 = data3[alu8];
  data0[(alu9+1)] = (val57+acc4);
  data0[(alu9+2)] = (val57+acc8);
  data0[(alu9+3)] = (val57+acc12);
  data0[alu9] = (val57+acc0);
}`;

const r_128_16_2_8_16_512_4_4_3_3n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2 */
  var gidx1 = i32(gindex.y); /* 16 */
  var gidx2 = i32(gindex.z); /* 128 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (gidx1<<10);
  var alu2 = (lidx0<<7);
  var alu3 = (lidx1<<2);
  var alu4 = (((gidx0+lidx1)<1)!=true);
  var alu5 = (((gidx1+lidx0)<1)!=true);
  var alu6 = ((lidx1+(gidx0<<4))<31);
  var alu7 = ((lidx0+(gidx1<<3))<127);
  var alu8 = (gidx2<<2);
  var alu9 = (alu1+(gidx2<<16)+alu0+alu2+alu3);
  var alu10 = (alu9+1);
  var alu11 = (alu9+2);
  var alu12 = (alu9+3);
  var alu13 = (alu9+16384);
  var alu14 = (alu9+16385);
  var alu15 = (alu9+16386);
  var alu16 = (alu9+16387);
  var alu17 = (alu9+32768);
  var alu18 = (alu9+32769);
  var alu19 = (alu9+32770);
  var alu20 = (alu9+32771);
  var alu21 = (alu9+49152);
  var alu22 = (alu9+49153);
  var alu23 = (alu9+49154);
  var alu24 = (alu9+49155);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 512; ridx0++) {
    var alu25 = ((gidx2*18432)+(ridx0*9));
    var alu26 = (alu1+alu2+(ridx0<<14)+alu0+alu3);
    var val0 = select(0.0f, data2[(alu26+-129)], (alu4&alu5));
    var val1 = select(0.0f, data2[(alu26+-128)], alu5);
    var val2 = select(0.0f, data2[(alu26+-127)], alu5);
    var val3 = select(0.0f, data2[(alu26+-126)], alu5);
    var val4 = select(0.0f, data2[(alu26+-125)], alu5);
    var val5 = select(0.0f, data2[(alu26+-124)], (alu6&alu5));
    var val6 = select(0.0f, data2[(alu26+-1)], alu4);
    var val7 = data2[(alu26+1)];
    var val8 = data2[(alu26+2)];
    var val9 = data2[(alu26+3)];
    var val10 = select(0.0f, data2[(alu26+4)], alu6);
    var val11 = select(0.0f, data2[(alu26+127)], (alu7&alu4));
    var val12 = select(0.0f, data2[(alu26+128)], alu7);
    var val13 = select(0.0f, data2[(alu26+129)], alu7);
    var val14 = select(0.0f, data2[(alu26+130)], alu7);
    var val15 = select(0.0f, data2[(alu26+131)], alu7);
    var val16 = select(0.0f, data2[(alu26+132)], (alu7&alu6));
    var val17 = data2[alu26];
    var val18 = data3[(alu25+1)];
    var val19 = data3[(alu25+2)];
    var val20 = data3[(alu25+3)];
    var val21 = data3[(alu25+4)];
    var val22 = data3[(alu25+5)];
    var val23 = data3[(alu25+6)];
    var val24 = data3[(alu25+7)];
    var val25 = data3[(alu25+8)];
    var val26 = data3[(alu25+4608)];
    var val27 = data3[(alu25+4609)];
    var val28 = data3[(alu25+4610)];
    var val29 = data3[(alu25+4611)];
    var val30 = data3[(alu25+4612)];
    var val31 = data3[(alu25+4613)];
    var val32 = data3[(alu25+4614)];
    var val33 = data3[(alu25+4615)];
    var val34 = data3[(alu25+4616)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data3[(alu25+9216)];
    var val36 = data3[(alu25+9217)];
    var val37 = data3[(alu25+9218)];
    var val38 = data3[(alu25+9219)];
    var val39 = data3[(alu25+9220)];
    var val40 = data3[(alu25+9221)];
    var val41 = data3[(alu25+9222)];
    var val42 = data3[(alu25+9223)];
    var val43 = data3[(alu25+9224)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data3[(alu25+13824)];
    var val45 = data3[(alu25+13825)];
    var val46 = data3[(alu25+13826)];
    var val47 = data3[(alu25+13827)];
    var val48 = data3[(alu25+13828)];
    var val49 = data3[(alu25+13829)];
    var val50 = data3[(alu25+13830)];
    var val51 = data3[(alu25+13831)];
    var val52 = data3[(alu25+13832)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data3[alu25];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data1[alu10];
  var val55 = data1[alu11];
  var val56 = data1[alu12];
  var val57 = data1[alu13];
  var val58 = data1[alu14];
  var val59 = data1[alu15];
  var val60 = data1[alu16];
  var val61 = data1[alu17];
  var val62 = data1[alu18];
  var val63 = data1[alu19];
  var val64 = data1[alu20];
  var val65 = data1[alu21];
  var val66 = data1[alu22];
  var val67 = data1[alu23];
  var val68 = data1[alu24];
  var val69 = data1[alu9];
  var val70 = data4[(alu8+1)];
  data0[alu13] = (val57+val70+acc1);
  data0[alu14] = (val58+val70+acc5);
  data0[alu15] = (val59+val70+acc9);
  data0[alu16] = (val60+val70+acc13);
  var val71 = data4[(alu8+2)];
  data0[alu17] = (val61+val71+acc2);
  data0[alu18] = (val62+val71+acc6);
  data0[alu19] = (val63+val71+acc10);
  data0[alu20] = (val64+val71+acc14);
  var val72 = data4[(alu8+3)];
  data0[alu21] = (val65+val72+acc3);
  data0[alu22] = (val66+val72+acc7);
  data0[alu23] = (val67+val72+acc11);
  data0[alu24] = (val68+val72+acc15);
  var val73 = data4[alu8];
  data0[alu10] = (val54+val73+acc4);
  data0[alu11] = (val55+val73+acc8);
  data0[alu12] = (val56+val73+acc12);
  data0[alu9] = (val69+val73+acc0);
}`;

const r_128_32_4_8_16_512_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 32 */
  var gidx2 = i32(gindex.z); /* 128 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<5)+(lidx1<<1));
  var alu1 = ((lidx0+1)>>1);
  var alu2 = (lidx0+((gidx0+((lidx1+1)>>4))>>2));
  var alu3 = ((alu2+1)>>1);
  var alu4 = ((alu0+2)&127);
  var alu5 = (((gidx0+lidx1)<1)!=true);
  var alu6 = (((gidx1+lidx0)<1)!=true);
  var alu7 = ((lidx1+(gidx0<<4))<63);
  var alu8 = ((lidx0+(gidx1<<3))<255);
  var alu9 = (gidx2<<2);
  var alu10 = ((gidx1<<11)+(gidx2<<18)+(gidx0<<6)+(lidx0<<8)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 512; ridx0++) {
    var alu11 = ((gidx2*18432)+(ridx0*9));
    var alu12 = ((gidx1<<2)+(ridx0<<7));
    var alu13 = ((gidx1<<9)+(ridx0<<14));
    var alu14 = (alu13+((lidx0>>1)<<7)+alu0);
    var alu15 = (alu13+(alu1<<7)+alu0);
    var alu16 = (alu0+(((alu12+alu1)&65535)<<7));
    var val0 = select(0.0f, data1[(alu14+-1)], alu5);
    var val1 = data1[(alu14+1)];
    var val2 = select(0.0f, data1[(alu15+-129)], (alu5&alu6));
    var val3 = select(0.0f, data1[(alu15+-128)], alu6);
    var val4 = select(0.0f, data1[(alu15+-127)], alu6);
    var val5 = select(0.0f, data1[(alu13+(alu3<<7)+alu4+-128)], (alu7&alu6));
    var val6 = select(0.0f, data1[(alu16+-1)], (alu8&alu5));
    var val7 = select(0.0f, data1[(alu16+1)], alu8);
    var val8 = data1[alu14];
    var val9 = select(0.0f, data1[alu16], alu8);
    var val10 = select(0.0f, data1[((((alu12+(alu2>>1))&65535)<<7)+alu4)], alu7);
    var val11 = select(0.0f, data1[((((alu12+alu3)&65535)<<7)+alu4)], (alu8&alu7));
    var val12 = data2[(alu11+1)];
    var alu17 = (val3*val12);
    var alu18 = (val4*val12);
    var val13 = data2[(alu11+2)];
    var alu19 = (val4*val13);
    var val14 = data2[(alu11+3)];
    var val15 = data2[(alu11+4)];
    var alu20 = (val1*val15);
    var alu21 = (val8*val15);
    var val16 = data2[(alu11+5)];
    var alu22 = (val1*val16);
    var val17 = data2[(alu11+6)];
    var val18 = data2[(alu11+7)];
    var alu23 = (val7*val18);
    var alu24 = (val9*val18);
    var val19 = data2[(alu11+8)];
    var alu25 = (val7*val19);
    var val20 = data2[(alu11+4608)];
    var val21 = data2[(alu11+4609)];
    var alu26 = (val3*val21);
    var alu27 = (val4*val21);
    var val22 = data2[(alu11+4610)];
    var alu28 = (val4*val22);
    var val23 = data2[(alu11+4611)];
    var val24 = data2[(alu11+4612)];
    var alu29 = (val1*val24);
    var alu30 = (val8*val24);
    var val25 = data2[(alu11+4613)];
    var alu31 = (val1*val25);
    var val26 = data2[(alu11+4614)];
    var alu32 = ((val3*val20)+(val8*val23)+(val9*val26));
    var val27 = data2[(alu11+4615)];
    var alu33 = (val7*val27);
    var alu34 = (val9*val27);
    var val28 = data2[(alu11+4616)];
    var alu35 = (val7*val28);
    acc1 = (acc1+(val0*val23)+(val2*val20)+(val6*val26)+alu26+alu30+alu34+(val3*val22)+(val8*val25)+(val9*val28));
    acc5 = (acc5+alu32+alu26+alu30+alu34+alu28+alu31+alu35);
    acc9 = (acc9+alu32+alu27+alu29+alu33+alu28+alu31+alu35);
    acc13 = (acc13+(val1*val23)+(val4*val20)+(val7*val26)+alu27+alu29+alu33+(val5*val22)+(val10*val25)+(val11*val28));
    var val29 = data2[(alu11+9216)];
    var val30 = data2[(alu11+9217)];
    var alu40 = (val3*val30);
    var alu41 = (val4*val30);
    var val31 = data2[(alu11+9218)];
    var alu42 = (val4*val31);
    var val32 = data2[(alu11+9219)];
    var val33 = data2[(alu11+9220)];
    var alu43 = (val1*val33);
    var alu44 = (val8*val33);
    var val34 = data2[(alu11+9221)];
    var alu45 = (val1*val34);
    var val35 = data2[(alu11+9222)];
    var alu46 = ((val3*val29)+(val8*val32)+(val9*val35));
    var val36 = data2[(alu11+9223)];
    var alu47 = (val7*val36);
    var alu48 = (val9*val36);
    var val37 = data2[(alu11+9224)];
    var alu49 = (val7*val37);
    acc2 = (acc2+(val0*val32)+(val2*val29)+(val6*val35)+alu40+alu44+alu48+(val3*val31)+(val8*val34)+(val9*val37));
    acc6 = (acc6+alu46+alu40+alu44+alu48+alu42+alu45+alu49);
    acc10 = (acc10+alu46+alu41+alu43+alu47+alu42+alu45+alu49);
    acc14 = (acc14+(val1*val32)+(val4*val29)+(val7*val35)+alu41+alu43+alu47+(val5*val31)+(val10*val34)+(val11*val37));
    var val38 = data2[(alu11+13824)];
    var val39 = data2[(alu11+13825)];
    var alu54 = (val3*val39);
    var alu55 = (val4*val39);
    var val40 = data2[(alu11+13826)];
    var alu56 = (val4*val40);
    var val41 = data2[(alu11+13827)];
    var val42 = data2[(alu11+13828)];
    var alu57 = (val1*val42);
    var alu58 = (val8*val42);
    var val43 = data2[(alu11+13829)];
    var alu59 = (val1*val43);
    var val44 = data2[(alu11+13830)];
    var alu60 = ((val3*val38)+(val8*val41)+(val9*val44));
    var val45 = data2[(alu11+13831)];
    var alu61 = (val7*val45);
    var alu62 = (val9*val45);
    var val46 = data2[(alu11+13832)];
    var alu63 = (val7*val46);
    acc3 = (acc3+(val0*val41)+(val2*val38)+(val6*val44)+alu54+alu58+alu62+(val3*val40)+(val8*val43)+(val9*val46));
    acc7 = (acc7+alu60+alu54+alu58+alu62+alu56+alu59+alu63);
    acc11 = (acc11+alu60+alu55+alu57+alu61+alu56+alu59+alu63);
    acc15 = (acc15+(val1*val41)+(val4*val38)+(val7*val44)+alu55+alu57+alu61+(val5*val40)+(val10*val43)+(val11*val46));
    var val47 = data2[alu11];
    var alu68 = ((val3*val47)+(val8*val14)+(val9*val17));
    acc0 = (acc0+(val0*val14)+(val2*val47)+(val6*val17)+alu17+alu21+alu24+(val3*val13)+(val8*val16)+(val9*val19));
    acc4 = (acc4+alu68+alu17+alu21+alu24+alu19+alu22+alu25);
    acc8 = (acc8+alu68+alu18+alu20+alu23+alu19+alu22+alu25);
    acc12 = (acc12+(val1*val14)+(val4*val47)+(val7*val17)+alu18+alu20+alu23+(val5*val13)+(val10*val16)+(val11*val19));
  }
  var val48 = data3[(alu9+1)];
  data0[(alu10+65536)] = (val48+acc1);
  data0[(alu10+65537)] = (val48+acc5);
  data0[(alu10+65538)] = (val48+acc9);
  data0[(alu10+65539)] = (val48+acc13);
  var val49 = data3[(alu9+2)];
  data0[(alu10+131072)] = (val49+acc2);
  data0[(alu10+131073)] = (val49+acc6);
  data0[(alu10+131074)] = (val49+acc10);
  data0[(alu10+131075)] = (val49+acc14);
  var val50 = data3[(alu9+3)];
  data0[(alu10+196608)] = (val50+acc3);
  data0[(alu10+196609)] = (val50+acc7);
  data0[(alu10+196610)] = (val50+acc11);
  data0[(alu10+196611)] = (val50+acc15);
  var val51 = data3[alu9];
  data0[(alu10+1)] = (val51+acc4);
  data0[(alu10+2)] = (val51+acc8);
  data0[(alu10+3)] = (val51+acc12);
  data0[alu10] = (val51+acc0);
}`;

const r_256_32_1024_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 256 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1024; ridx0++) {
    var alu0 = ((gidx0<<17)+(lidx0<<12)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    acc0 = (acc0+val2+val1+val0+val3);
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_32_256n4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 256>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 256 */
  var val0 = data1[(lidx0+(gidx0<<8))];
  temp0[lidx0] = val0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc0 = 0.0f;
    for (var ridx0 = 0; ridx0 < 256; ridx0++) {
      var val1 = temp0[ridx0];
      acc0 = (acc0+val1);
    }
    data0[gidx0] = (acc0*9.5367431640625e-07f);
  }
}`;

const r_4_4_8_16_1024_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 4 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1<<11)+(lidx0<<8)+(lidx1<<2));
  var val0 = data2[(lidx0+(gidx1<<3))];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 1024; ridx0++) {
    var alu1 = ((gidx0<<18)+(gidx1<<23)+(lidx0<<20)+(lidx1<<14)+(ridx0<<2));
    var val1 = data1[(alu1+1)];
    var alu2 = (val1-val0);
    var val2 = data1[(alu1+2)];
    var alu3 = (val2-val0);
    var val3 = data1[(alu1+3)];
    var alu4 = (val3-val0);
    var val4 = data1[(alu1+4096)];
    var alu5 = (val4-val0);
    var val5 = data1[(alu1+4097)];
    var alu6 = (val5-val0);
    var val6 = data1[(alu1+4098)];
    var alu7 = (val6-val0);
    var val7 = data1[(alu1+4099)];
    var alu8 = (val7-val0);
    acc1 = (acc1+(alu5*alu5)+(alu6*alu6)+(alu7*alu7)+(alu8*alu8));
    var val8 = data1[(alu1+8192)];
    var alu10 = (val8-val0);
    var val9 = data1[(alu1+8193)];
    var alu11 = (val9-val0);
    var val10 = data1[(alu1+8194)];
    var alu12 = (val10-val0);
    var val11 = data1[(alu1+8195)];
    var alu13 = (val11-val0);
    acc2 = (acc2+(alu10*alu10)+(alu11*alu11)+(alu12*alu12)+(alu13*alu13));
    var val12 = data1[(alu1+12288)];
    var alu15 = (val12-val0);
    var val13 = data1[(alu1+12289)];
    var alu16 = (val13-val0);
    var val14 = data1[(alu1+12290)];
    var alu17 = (val14-val0);
    var val15 = data1[(alu1+12291)];
    var alu18 = (val15-val0);
    acc3 = (acc3+(alu15*alu15)+(alu16*alu16)+(alu17*alu17)+(alu18*alu18));
    var val16 = data1[alu1];
    var alu20 = (val16-val0);
    acc0 = (acc0+(alu2*alu2)+(alu20*alu20)+(alu3*alu3)+(alu4*alu4));
  }
  data0[(alu0+1)] = acc1;
  data0[(alu0+2)] = acc2;
  data0[(alu0+3)] = acc3;
  data0[alu0] = acc0;
}`;

const r_32_256n5 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 256>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 256 */
  var val0 = data1[(lidx0+(gidx0<<8))];
  temp0[lidx0] = val0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc0 = 0.0f;
    for (var ridx0 = 0; ridx0 < 256; ridx0++) {
      var val1 = temp0[ridx0];
      acc0 = (acc0+val1);
    }
    data0[gidx0] = sqrt((1/((acc0*9.5367431640625e-07f)+1e-05f)));
  }
}`;

const E_64_1024_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 1024 */
  var gidx1 = i32(gindex.y); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx0<<6)+(gidx1<<19)+(lidx0<<16)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var alu5 = (gidx1>>1);
  var val0 = data1[alu2];
  var val1 = data1[alu3];
  var val2 = data1[alu4];
  var val3 = data1[alu1];
  var val4 = data2[alu5];
  var val5 = data3[alu5];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu2] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu3] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu4] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu1] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_64_32_4_8_16_512_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 32 */
  var gidx2 = i32(gindex.z); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (gidx1<<11);
  var alu2 = (lidx0<<8);
  var alu3 = (lidx1<<2);
  var alu4 = (((gidx0+lidx1)<1)!=true);
  var alu5 = (((gidx1+lidx0)<1)!=true);
  var alu6 = ((lidx1+(gidx0<<4))<63);
  var alu7 = ((lidx0+(gidx1<<3))<255);
  var alu8 = (gidx2<<2);
  var alu9 = (alu1+(gidx2<<18)+alu0+alu2+alu3);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 512; ridx0++) {
    var alu10 = ((gidx2*18432)+(ridx0*9));
    var alu11 = (alu1+alu2+(ridx0<<16)+alu0+alu3);
    var val0 = select(0.0f, data1[(alu11+-257)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu11+-256)], alu5);
    var val2 = select(0.0f, data1[(alu11+-255)], alu5);
    var val3 = select(0.0f, data1[(alu11+-254)], alu5);
    var val4 = select(0.0f, data1[(alu11+-253)], alu5);
    var val5 = select(0.0f, data1[(alu11+-252)], (alu6&alu5));
    var val6 = select(0.0f, data1[(alu11+-1)], alu4);
    var val7 = data1[(alu11+1)];
    var val8 = data1[(alu11+2)];
    var val9 = data1[(alu11+3)];
    var val10 = select(0.0f, data1[(alu11+4)], alu6);
    var val11 = select(0.0f, data1[(alu11+255)], (alu7&alu4));
    var val12 = select(0.0f, data1[(alu11+256)], alu7);
    var val13 = select(0.0f, data1[(alu11+257)], alu7);
    var val14 = select(0.0f, data1[(alu11+258)], alu7);
    var val15 = select(0.0f, data1[(alu11+259)], alu7);
    var val16 = select(0.0f, data1[(alu11+260)], (alu7&alu6));
    var val17 = data1[alu11];
    var val18 = data2[(alu10+1)];
    var val19 = data2[(alu10+2)];
    var val20 = data2[(alu10+3)];
    var val21 = data2[(alu10+4)];
    var val22 = data2[(alu10+5)];
    var val23 = data2[(alu10+6)];
    var val24 = data2[(alu10+7)];
    var val25 = data2[(alu10+8)];
    var val26 = data2[(alu10+4608)];
    var val27 = data2[(alu10+4609)];
    var val28 = data2[(alu10+4610)];
    var val29 = data2[(alu10+4611)];
    var val30 = data2[(alu10+4612)];
    var val31 = data2[(alu10+4613)];
    var val32 = data2[(alu10+4614)];
    var val33 = data2[(alu10+4615)];
    var val34 = data2[(alu10+4616)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu10+9216)];
    var val36 = data2[(alu10+9217)];
    var val37 = data2[(alu10+9218)];
    var val38 = data2[(alu10+9219)];
    var val39 = data2[(alu10+9220)];
    var val40 = data2[(alu10+9221)];
    var val41 = data2[(alu10+9222)];
    var val42 = data2[(alu10+9223)];
    var val43 = data2[(alu10+9224)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu10+13824)];
    var val45 = data2[(alu10+13825)];
    var val46 = data2[(alu10+13826)];
    var val47 = data2[(alu10+13827)];
    var val48 = data2[(alu10+13828)];
    var val49 = data2[(alu10+13829)];
    var val50 = data2[(alu10+13830)];
    var val51 = data2[(alu10+13831)];
    var val52 = data2[(alu10+13832)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu10];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[(alu8+1)];
  data0[(alu9+65536)] = (val54+acc1);
  data0[(alu9+65537)] = (val54+acc5);
  data0[(alu9+65538)] = (val54+acc9);
  data0[(alu9+65539)] = (val54+acc13);
  var val55 = data3[(alu8+2)];
  data0[(alu9+131072)] = (val55+acc2);
  data0[(alu9+131073)] = (val55+acc6);
  data0[(alu9+131074)] = (val55+acc10);
  data0[(alu9+131075)] = (val55+acc14);
  var val56 = data3[(alu8+3)];
  data0[(alu9+196608)] = (val56+acc3);
  data0[(alu9+196609)] = (val56+acc7);
  data0[(alu9+196610)] = (val56+acc11);
  data0[(alu9+196611)] = (val56+acc15);
  var val57 = data3[alu8];
  data0[(alu9+1)] = (val57+acc4);
  data0[(alu9+2)] = (val57+acc8);
  data0[(alu9+3)] = (val57+acc12);
  data0[alu9] = (val57+acc0);
}`;

const r_256_32_512_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 256 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 512; ridx0++) {
    var alu0 = ((gidx0<<16)+(lidx0<<11)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    acc0 = (acc0+val2+val1+val0+val3);
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_32_256n6 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 256>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 256 */
  var val0 = data1[(lidx0+(gidx0<<8))];
  temp0[lidx0] = val0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc0 = 0.0f;
    for (var ridx0 = 0; ridx0 < 256; ridx0++) {
      var val1 = temp0[ridx0];
      acc0 = (acc0+val1);
    }
    data0[gidx0] = (acc0*1.9073486328125e-06f);
  }
}`;

const r_4_4_8_16_512_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 4 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1<<11)+(lidx0<<8)+(lidx1<<2));
  var val0 = data2[(lidx0+(gidx1<<3))];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 512; ridx0++) {
    var alu1 = ((gidx0<<17)+(gidx1<<22)+(lidx0<<19)+(lidx1<<13)+(ridx0<<2));
    var val1 = data1[(alu1+1)];
    var alu2 = (val1-val0);
    var val2 = data1[(alu1+2)];
    var alu3 = (val2-val0);
    var val3 = data1[(alu1+3)];
    var alu4 = (val3-val0);
    var val4 = data1[(alu1+2048)];
    var alu5 = (val4-val0);
    var val5 = data1[(alu1+2049)];
    var alu6 = (val5-val0);
    var val6 = data1[(alu1+2050)];
    var alu7 = (val6-val0);
    var val7 = data1[(alu1+2051)];
    var alu8 = (val7-val0);
    acc1 = (acc1+(alu5*alu5)+(alu6*alu6)+(alu7*alu7)+(alu8*alu8));
    var val8 = data1[(alu1+4096)];
    var alu10 = (val8-val0);
    var val9 = data1[(alu1+4097)];
    var alu11 = (val9-val0);
    var val10 = data1[(alu1+4098)];
    var alu12 = (val10-val0);
    var val11 = data1[(alu1+4099)];
    var alu13 = (val11-val0);
    acc2 = (acc2+(alu10*alu10)+(alu11*alu11)+(alu12*alu12)+(alu13*alu13));
    var val12 = data1[(alu1+6144)];
    var alu15 = (val12-val0);
    var val13 = data1[(alu1+6145)];
    var alu16 = (val13-val0);
    var val14 = data1[(alu1+6146)];
    var alu17 = (val14-val0);
    var val15 = data1[(alu1+6147)];
    var alu18 = (val15-val0);
    acc3 = (acc3+(alu15*alu15)+(alu16*alu16)+(alu17*alu17)+(alu18*alu18));
    var val16 = data1[alu1];
    var alu20 = (val16-val0);
    acc0 = (acc0+(alu2*alu2)+(alu20*alu20)+(alu3*alu3)+(alu4*alu4));
  }
  data0[(alu0+1)] = acc1;
  data0[(alu0+2)] = acc2;
  data0[(alu0+3)] = acc3;
  data0[alu0] = acc0;
}`;

const r_32_256n7 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 256>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 256 */
  var val0 = data1[(lidx0+(gidx0<<8))];
  temp0[lidx0] = val0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc0 = 0.0f;
    for (var ridx0 = 0; ridx0 < 256; ridx0++) {
      var val1 = temp0[ridx0];
      acc0 = (acc0+val1);
    }
    data0[gidx0] = sqrt((1/((acc0*1.9073486328125e-06f)+1e-05f)));
  }
}`;

const E_32_1024_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 1024 */
  var gidx1 = i32(gindex.y); /* 32 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx0<<6)+(gidx1<<19)+(lidx0<<16)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var val0 = data1[alu2];
  var val1 = data1[alu3];
  var val2 = data1[alu4];
  var val3 = data1[alu1];
  var val4 = data2[gidx1];
  var val5 = data3[gidx1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu5 = (val7+(val6*val5*(val0-val4)));
  var alu6 = (val7+(val6*val5*(val1-val4)));
  var alu7 = (val7+(val6*val5*(val2-val4)));
  var alu8 = (val7+(val6*val5*(val3-val4)));
  data0[alu2] = ((1/(exp2((alu5*-1.4426950408889634f))+1.0f))*alu5);
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu1] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
}`;

const r_64_32_4_8_16_256_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 32 */
  var gidx2 = i32(gindex.z); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (gidx1<<11);
  var alu2 = (lidx0<<8);
  var alu3 = (lidx1<<2);
  var alu4 = (((gidx0+lidx1)<1)!=true);
  var alu5 = (((gidx1+lidx0)<1)!=true);
  var alu6 = ((lidx1+(gidx0<<4))<63);
  var alu7 = ((lidx0+(gidx1<<3))<255);
  var alu8 = (alu1+(gidx2<<18)+alu0+alu2+alu3);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 256; ridx0++) {
    var alu9 = ((gidx2*9216)+(ridx0*9));
    var alu10 = (alu1+alu2+(ridx0<<16)+alu0+alu3);
    var val0 = select(0.0f, data1[(alu10+-257)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu10+-256)], alu5);
    var val2 = select(0.0f, data1[(alu10+-255)], alu5);
    var val3 = select(0.0f, data1[(alu10+-254)], alu5);
    var val4 = select(0.0f, data1[(alu10+-253)], alu5);
    var val5 = select(0.0f, data1[(alu10+-252)], (alu6&alu5));
    var val6 = select(0.0f, data1[(alu10+-1)], alu4);
    var val7 = data1[(alu10+1)];
    var val8 = data1[(alu10+2)];
    var val9 = data1[(alu10+3)];
    var val10 = select(0.0f, data1[(alu10+4)], alu6);
    var val11 = select(0.0f, data1[(alu10+255)], (alu7&alu4));
    var val12 = select(0.0f, data1[(alu10+256)], alu7);
    var val13 = select(0.0f, data1[(alu10+257)], alu7);
    var val14 = select(0.0f, data1[(alu10+258)], alu7);
    var val15 = select(0.0f, data1[(alu10+259)], alu7);
    var val16 = select(0.0f, data1[(alu10+260)], (alu7&alu6));
    var val17 = data1[alu10];
    var val18 = data2[(alu9+1)];
    var val19 = data2[(alu9+2)];
    var val20 = data2[(alu9+3)];
    var val21 = data2[(alu9+4)];
    var val22 = data2[(alu9+5)];
    var val23 = data2[(alu9+6)];
    var val24 = data2[(alu9+7)];
    var val25 = data2[(alu9+8)];
    var val26 = data2[(alu9+2304)];
    var val27 = data2[(alu9+2305)];
    var val28 = data2[(alu9+2306)];
    var val29 = data2[(alu9+2307)];
    var val30 = data2[(alu9+2308)];
    var val31 = data2[(alu9+2309)];
    var val32 = data2[(alu9+2310)];
    var val33 = data2[(alu9+2311)];
    var val34 = data2[(alu9+2312)];
    acc4 = (acc4+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc6 = (acc6+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc7 = (acc7+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu9+4608)];
    var val36 = data2[(alu9+4609)];
    var val37 = data2[(alu9+4610)];
    var val38 = data2[(alu9+4611)];
    var val39 = data2[(alu9+4612)];
    var val40 = data2[(alu9+4613)];
    var val41 = data2[(alu9+4614)];
    var val42 = data2[(alu9+4615)];
    var val43 = data2[(alu9+4616)];
    acc8 = (acc8+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc9 = (acc9+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc11 = (acc11+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu9+6912)];
    var val45 = data2[(alu9+6913)];
    var val46 = data2[(alu9+6914)];
    var val47 = data2[(alu9+6915)];
    var val48 = data2[(alu9+6916)];
    var val49 = data2[(alu9+6917)];
    var val50 = data2[(alu9+6918)];
    var val51 = data2[(alu9+6919)];
    var val52 = data2[(alu9+6920)];
    acc12 = (acc12+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc13 = (acc13+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc14 = (acc14+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu9];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc1 = (acc1+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc2 = (acc2+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc3 = (acc3+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  data0[(alu8+1)] = acc1;
  data0[(alu8+2)] = acc2;
  data0[(alu8+3)] = acc3;
  data0[(alu8+65536)] = acc4;
  data0[(alu8+65537)] = acc5;
  data0[(alu8+65538)] = acc6;
  data0[(alu8+65539)] = acc7;
  data0[(alu8+131072)] = acc8;
  data0[(alu8+131073)] = acc9;
  data0[(alu8+131074)] = acc10;
  data0[(alu8+131075)] = acc11;
  data0[(alu8+196608)] = acc12;
  data0[(alu8+196609)] = acc13;
  data0[(alu8+196610)] = acc14;
  data0[(alu8+196611)] = acc15;
  data0[alu8] = acc0;
}`;

const r_8_1024_8_16_128_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 1024 */
  var gidx1 = i32(gindex.y); /* 8 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1<<5)+(lidx0<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = (alu0+(gidx1<<21)+(lidx0<<18)+alu1);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+65536);
  var alu11 = (alu6+65537);
  var alu12 = (alu6+65538);
  var alu13 = (alu6+65539);
  var alu14 = (alu6+131072);
  var alu15 = (alu6+131073);
  var alu16 = (alu6+131074);
  var alu17 = (alu6+131075);
  var alu18 = (alu6+196608);
  var alu19 = (alu6+196609);
  var alu20 = (alu6+196610);
  var alu21 = (alu6+196611);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 128; ridx0++) {
    var alu22 = ((gidx1<<14)+(lidx0<<11)+(ridx0<<2));
    var alu23 = (alu0+alu1+(ridx0<<18));
    var val0 = data1[(alu23+1)];
    var val1 = data1[(alu23+2)];
    var val2 = data1[(alu23+3)];
    var val3 = data1[(alu23+65536)];
    var val4 = data1[(alu23+65537)];
    var val5 = data1[(alu23+65538)];
    var val6 = data1[(alu23+65539)];
    var val7 = data1[(alu23+131072)];
    var val8 = data1[(alu23+131073)];
    var val9 = data1[(alu23+131074)];
    var val10 = data1[(alu23+131075)];
    var val11 = data1[(alu23+196608)];
    var val12 = data1[(alu23+196609)];
    var val13 = data1[(alu23+196610)];
    var val14 = data1[(alu23+196611)];
    var val15 = data1[alu23];
    var val16 = data2[(alu22+1)];
    var val17 = data2[(alu22+2)];
    var val18 = data2[(alu22+3)];
    var val19 = data2[(alu22+512)];
    var val20 = data2[(alu22+513)];
    var val21 = data2[(alu22+514)];
    var val22 = data2[(alu22+515)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu22+1024)];
    var val24 = data2[(alu22+1025)];
    var val25 = data2[(alu22+1026)];
    var val26 = data2[(alu22+1027)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu22+1536)];
    var val28 = data2[(alu22+1537)];
    var val29 = data2[(alu22+1538)];
    var val30 = data2[(alu22+1539)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu22];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[alu3];
  var val33 = data3[alu4];
  var val34 = data3[alu5];
  var val35 = data3[alu2];
  var val36 = data4[alu7];
  var val37 = data4[alu8];
  var val38 = data4[alu9];
  var val39 = data4[alu10];
  var val40 = data4[alu11];
  var val41 = data4[alu12];
  var val42 = data4[alu13];
  var val43 = data4[alu14];
  var val44 = data4[alu15];
  var val45 = data4[alu16];
  var val46 = data4[alu17];
  var val47 = data4[alu18];
  var val48 = data4[alu19];
  var val49 = data4[alu20];
  var val50 = data4[alu21];
  var val51 = data4[alu6];
  var val52 = data5[alu3];
  data0[alu10] = (val32+acc1+val39+val52);
  data0[alu11] = (val32+acc5+val40+val52);
  data0[alu12] = (val32+acc9+val41+val52);
  data0[alu13] = (val32+acc13+val42+val52);
  var val53 = data5[alu4];
  data0[alu14] = (val33+acc2+val43+val53);
  data0[alu15] = (val33+acc6+val44+val53);
  data0[alu16] = (val33+acc10+val45+val53);
  data0[alu17] = (val33+acc14+val46+val53);
  var val54 = data5[alu5];
  data0[alu18] = (val34+acc3+val47+val54);
  data0[alu19] = (val34+acc7+val48+val54);
  data0[alu20] = (val34+acc11+val49+val54);
  data0[alu21] = (val34+acc15+val50+val54);
  var val55 = data5[alu2];
  data0[alu7] = (val35+acc4+val36+val55);
  data0[alu8] = (val35+acc8+val37+val55);
  data0[alu9] = (val35+acc12+val38+val55);
  data0[alu6] = (val35+acc0+val51+val55);
}`;

const r_64_32_4_8_16_256_4_4_3_3n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 32 */
  var gidx2 = i32(gindex.z); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (gidx1<<11);
  var alu2 = (lidx0<<8);
  var alu3 = (lidx1<<2);
  var alu4 = (((gidx0+lidx1)<1)!=true);
  var alu5 = (((gidx1+lidx0)<1)!=true);
  var alu6 = ((lidx1+(gidx0<<4))<63);
  var alu7 = ((lidx0+(gidx1<<3))<255);
  var alu8 = (gidx2<<2);
  var alu9 = (alu1+(gidx2<<18)+alu0+alu2+alu3);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 256; ridx0++) {
    var alu10 = ((gidx2*9216)+(ridx0*9));
    var alu11 = (alu1+alu2+(ridx0<<16)+alu0+alu3);
    var val0 = select(0.0f, data1[(alu11+-257)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu11+-256)], alu5);
    var val2 = select(0.0f, data1[(alu11+-255)], alu5);
    var val3 = select(0.0f, data1[(alu11+-254)], alu5);
    var val4 = select(0.0f, data1[(alu11+-253)], alu5);
    var val5 = select(0.0f, data1[(alu11+-252)], (alu6&alu5));
    var val6 = select(0.0f, data1[(alu11+-1)], alu4);
    var val7 = data1[(alu11+1)];
    var val8 = data1[(alu11+2)];
    var val9 = data1[(alu11+3)];
    var val10 = select(0.0f, data1[(alu11+4)], alu6);
    var val11 = select(0.0f, data1[(alu11+255)], (alu7&alu4));
    var val12 = select(0.0f, data1[(alu11+256)], alu7);
    var val13 = select(0.0f, data1[(alu11+257)], alu7);
    var val14 = select(0.0f, data1[(alu11+258)], alu7);
    var val15 = select(0.0f, data1[(alu11+259)], alu7);
    var val16 = select(0.0f, data1[(alu11+260)], (alu7&alu6));
    var val17 = data1[alu11];
    var val18 = data2[(alu10+1)];
    var val19 = data2[(alu10+2)];
    var val20 = data2[(alu10+3)];
    var val21 = data2[(alu10+4)];
    var val22 = data2[(alu10+5)];
    var val23 = data2[(alu10+6)];
    var val24 = data2[(alu10+7)];
    var val25 = data2[(alu10+8)];
    var val26 = data2[(alu10+2304)];
    var val27 = data2[(alu10+2305)];
    var val28 = data2[(alu10+2306)];
    var val29 = data2[(alu10+2307)];
    var val30 = data2[(alu10+2308)];
    var val31 = data2[(alu10+2309)];
    var val32 = data2[(alu10+2310)];
    var val33 = data2[(alu10+2311)];
    var val34 = data2[(alu10+2312)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu10+4608)];
    var val36 = data2[(alu10+4609)];
    var val37 = data2[(alu10+4610)];
    var val38 = data2[(alu10+4611)];
    var val39 = data2[(alu10+4612)];
    var val40 = data2[(alu10+4613)];
    var val41 = data2[(alu10+4614)];
    var val42 = data2[(alu10+4615)];
    var val43 = data2[(alu10+4616)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu10+6912)];
    var val45 = data2[(alu10+6913)];
    var val46 = data2[(alu10+6914)];
    var val47 = data2[(alu10+6915)];
    var val48 = data2[(alu10+6916)];
    var val49 = data2[(alu10+6917)];
    var val50 = data2[(alu10+6918)];
    var val51 = data2[(alu10+6919)];
    var val52 = data2[(alu10+6920)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu10];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[(alu8+1)];
  data0[(alu9+65536)] = (val54+acc1);
  data0[(alu9+65537)] = (val54+acc5);
  data0[(alu9+65538)] = (val54+acc9);
  data0[(alu9+65539)] = (val54+acc13);
  var val55 = data3[(alu8+2)];
  data0[(alu9+131072)] = (val55+acc2);
  data0[(alu9+131073)] = (val55+acc6);
  data0[(alu9+131074)] = (val55+acc10);
  data0[(alu9+131075)] = (val55+acc14);
  var val56 = data3[(alu8+3)];
  data0[(alu9+196608)] = (val56+acc3);
  data0[(alu9+196609)] = (val56+acc7);
  data0[(alu9+196610)] = (val56+acc11);
  data0[(alu9+196611)] = (val56+acc15);
  var val57 = data3[alu8];
  data0[(alu9+1)] = (val57+acc4);
  data0[(alu9+2)] = (val57+acc8);
  data0[(alu9+3)] = (val57+acc12);
  data0[alu9] = (val57+acc0);
}`;

const r_64_32_4_8_16_256_4_4_3_3n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 32 */
  var gidx2 = i32(gindex.z); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (gidx1<<11);
  var alu2 = (lidx0<<8);
  var alu3 = (lidx1<<2);
  var alu4 = (((gidx0+lidx1)<1)!=true);
  var alu5 = (((gidx1+lidx0)<1)!=true);
  var alu6 = ((lidx1+(gidx0<<4))<63);
  var alu7 = ((lidx0+(gidx1<<3))<255);
  var alu8 = (gidx2<<2);
  var alu9 = (alu1+(gidx2<<18)+alu0+alu2+alu3);
  var alu10 = (alu9+1);
  var alu11 = (alu9+2);
  var alu12 = (alu9+3);
  var alu13 = (alu9+65536);
  var alu14 = (alu9+65537);
  var alu15 = (alu9+65538);
  var alu16 = (alu9+65539);
  var alu17 = (alu9+131072);
  var alu18 = (alu9+131073);
  var alu19 = (alu9+131074);
  var alu20 = (alu9+131075);
  var alu21 = (alu9+196608);
  var alu22 = (alu9+196609);
  var alu23 = (alu9+196610);
  var alu24 = (alu9+196611);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 256; ridx0++) {
    var alu25 = ((gidx2*9216)+(ridx0*9));
    var alu26 = (alu1+alu2+(ridx0<<16)+alu0+alu3);
    var val0 = select(0.0f, data2[(alu26+-257)], (alu4&alu5));
    var val1 = select(0.0f, data2[(alu26+-256)], alu5);
    var val2 = select(0.0f, data2[(alu26+-255)], alu5);
    var val3 = select(0.0f, data2[(alu26+-254)], alu5);
    var val4 = select(0.0f, data2[(alu26+-253)], alu5);
    var val5 = select(0.0f, data2[(alu26+-252)], (alu6&alu5));
    var val6 = select(0.0f, data2[(alu26+-1)], alu4);
    var val7 = data2[(alu26+1)];
    var val8 = data2[(alu26+2)];
    var val9 = data2[(alu26+3)];
    var val10 = select(0.0f, data2[(alu26+4)], alu6);
    var val11 = select(0.0f, data2[(alu26+255)], (alu7&alu4));
    var val12 = select(0.0f, data2[(alu26+256)], alu7);
    var val13 = select(0.0f, data2[(alu26+257)], alu7);
    var val14 = select(0.0f, data2[(alu26+258)], alu7);
    var val15 = select(0.0f, data2[(alu26+259)], alu7);
    var val16 = select(0.0f, data2[(alu26+260)], (alu7&alu6));
    var val17 = data2[alu26];
    var val18 = data3[(alu25+1)];
    var val19 = data3[(alu25+2)];
    var val20 = data3[(alu25+3)];
    var val21 = data3[(alu25+4)];
    var val22 = data3[(alu25+5)];
    var val23 = data3[(alu25+6)];
    var val24 = data3[(alu25+7)];
    var val25 = data3[(alu25+8)];
    var val26 = data3[(alu25+2304)];
    var val27 = data3[(alu25+2305)];
    var val28 = data3[(alu25+2306)];
    var val29 = data3[(alu25+2307)];
    var val30 = data3[(alu25+2308)];
    var val31 = data3[(alu25+2309)];
    var val32 = data3[(alu25+2310)];
    var val33 = data3[(alu25+2311)];
    var val34 = data3[(alu25+2312)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data3[(alu25+4608)];
    var val36 = data3[(alu25+4609)];
    var val37 = data3[(alu25+4610)];
    var val38 = data3[(alu25+4611)];
    var val39 = data3[(alu25+4612)];
    var val40 = data3[(alu25+4613)];
    var val41 = data3[(alu25+4614)];
    var val42 = data3[(alu25+4615)];
    var val43 = data3[(alu25+4616)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data3[(alu25+6912)];
    var val45 = data3[(alu25+6913)];
    var val46 = data3[(alu25+6914)];
    var val47 = data3[(alu25+6915)];
    var val48 = data3[(alu25+6916)];
    var val49 = data3[(alu25+6917)];
    var val50 = data3[(alu25+6918)];
    var val51 = data3[(alu25+6919)];
    var val52 = data3[(alu25+6920)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data3[alu25];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data1[alu10];
  var val55 = data1[alu11];
  var val56 = data1[alu12];
  var val57 = data1[alu13];
  var val58 = data1[alu14];
  var val59 = data1[alu15];
  var val60 = data1[alu16];
  var val61 = data1[alu17];
  var val62 = data1[alu18];
  var val63 = data1[alu19];
  var val64 = data1[alu20];
  var val65 = data1[alu21];
  var val66 = data1[alu22];
  var val67 = data1[alu23];
  var val68 = data1[alu24];
  var val69 = data1[alu9];
  var val70 = data4[(alu8+1)];
  data0[alu13] = (val57+val70+acc1);
  data0[alu14] = (val58+val70+acc5);
  data0[alu15] = (val59+val70+acc9);
  data0[alu16] = (val60+val70+acc13);
  var val71 = data4[(alu8+2)];
  data0[alu17] = (val61+val71+acc2);
  data0[alu18] = (val62+val71+acc6);
  data0[alu19] = (val63+val71+acc10);
  data0[alu20] = (val64+val71+acc14);
  var val72 = data4[(alu8+3)];
  data0[alu21] = (val65+val72+acc3);
  data0[alu22] = (val66+val72+acc7);
  data0[alu23] = (val67+val72+acc11);
  data0[alu24] = (val68+val72+acc15);
  var val73 = data4[alu8];
  data0[alu10] = (val54+val73+acc4);
  data0[alu11] = (val55+val73+acc8);
  data0[alu12] = (val56+val73+acc12);
  data0[alu9] = (val69+val73+acc0);
}`;

const r_64_64_8_8_16_256_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 64 */
  var gidx2 = i32(gindex.z); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<5)+(lidx1<<1));
  var alu1 = ((lidx0+1)>>1);
  var alu2 = (lidx0+((gidx0+((lidx1+1)>>4))>>3));
  var alu3 = ((alu2+1)>>1);
  var alu4 = ((alu0+2)&255);
  var alu5 = (((gidx0+lidx1)<1)!=true);
  var alu6 = (((gidx1+lidx0)<1)!=true);
  var alu7 = ((lidx1+(gidx0<<4))<127);
  var alu8 = ((lidx0+(gidx1<<3))<511);
  var alu9 = (gidx2<<2);
  var alu10 = ((gidx1<<12)+(gidx2<<20)+(gidx0<<6)+(lidx0<<9)+(lidx1<<2));
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 256; ridx0++) {
    var alu11 = ((gidx2*9216)+(ridx0*9));
    var alu12 = ((gidx1<<2)+(ridx0<<8));
    var alu13 = ((gidx1<<10)+(ridx0<<16));
    var alu14 = (alu13+((lidx0>>1)<<8)+alu0);
    var alu15 = (alu13+(alu1<<8)+alu0);
    var alu16 = (alu0+(((alu12+alu1)&65535)<<8));
    var val0 = select(0.0f, data1[(alu14+-1)], alu5);
    var val1 = data1[(alu14+1)];
    var val2 = select(0.0f, data1[(alu15+-257)], (alu5&alu6));
    var val3 = select(0.0f, data1[(alu15+-256)], alu6);
    var val4 = select(0.0f, data1[(alu15+-255)], alu6);
    var val5 = select(0.0f, data1[(alu13+(alu3<<8)+alu4+-256)], (alu7&alu6));
    var val6 = select(0.0f, data1[(alu16+-1)], (alu8&alu5));
    var val7 = select(0.0f, data1[(alu16+1)], alu8);
    var val8 = data1[alu14];
    var val9 = select(0.0f, data1[alu16], alu8);
    var val10 = select(0.0f, data1[((((alu12+(alu2>>1))&65535)<<8)+alu4)], alu7);
    var val11 = select(0.0f, data1[((((alu12+alu3)&65535)<<8)+alu4)], (alu8&alu7));
    var val12 = data2[(alu11+1)];
    var alu17 = (val3*val12);
    var alu18 = (val4*val12);
    var val13 = data2[(alu11+2)];
    var alu19 = (val4*val13);
    var val14 = data2[(alu11+3)];
    var val15 = data2[(alu11+4)];
    var alu20 = (val1*val15);
    var alu21 = (val8*val15);
    var val16 = data2[(alu11+5)];
    var alu22 = (val1*val16);
    var val17 = data2[(alu11+6)];
    var val18 = data2[(alu11+7)];
    var alu23 = (val7*val18);
    var alu24 = (val9*val18);
    var val19 = data2[(alu11+8)];
    var alu25 = (val7*val19);
    var val20 = data2[(alu11+2304)];
    var val21 = data2[(alu11+2305)];
    var alu26 = (val3*val21);
    var alu27 = (val4*val21);
    var val22 = data2[(alu11+2306)];
    var alu28 = (val4*val22);
    var val23 = data2[(alu11+2307)];
    var val24 = data2[(alu11+2308)];
    var alu29 = (val1*val24);
    var alu30 = (val8*val24);
    var val25 = data2[(alu11+2309)];
    var alu31 = (val1*val25);
    var val26 = data2[(alu11+2310)];
    var alu32 = ((val3*val20)+(val8*val23)+(val9*val26));
    var val27 = data2[(alu11+2311)];
    var alu33 = (val7*val27);
    var alu34 = (val9*val27);
    var val28 = data2[(alu11+2312)];
    var alu35 = (val7*val28);
    acc1 = (acc1+(val0*val23)+(val2*val20)+(val6*val26)+alu26+alu30+alu34+(val3*val22)+(val8*val25)+(val9*val28));
    acc5 = (acc5+alu32+alu26+alu30+alu34+alu28+alu31+alu35);
    acc9 = (acc9+alu32+alu27+alu29+alu33+alu28+alu31+alu35);
    acc13 = (acc13+(val1*val23)+(val4*val20)+(val7*val26)+alu27+alu29+alu33+(val5*val22)+(val10*val25)+(val11*val28));
    var val29 = data2[(alu11+4608)];
    var val30 = data2[(alu11+4609)];
    var alu40 = (val3*val30);
    var alu41 = (val4*val30);
    var val31 = data2[(alu11+4610)];
    var alu42 = (val4*val31);
    var val32 = data2[(alu11+4611)];
    var val33 = data2[(alu11+4612)];
    var alu43 = (val1*val33);
    var alu44 = (val8*val33);
    var val34 = data2[(alu11+4613)];
    var alu45 = (val1*val34);
    var val35 = data2[(alu11+4614)];
    var alu46 = ((val3*val29)+(val8*val32)+(val9*val35));
    var val36 = data2[(alu11+4615)];
    var alu47 = (val7*val36);
    var alu48 = (val9*val36);
    var val37 = data2[(alu11+4616)];
    var alu49 = (val7*val37);
    acc2 = (acc2+(val0*val32)+(val2*val29)+(val6*val35)+alu40+alu44+alu48+(val3*val31)+(val8*val34)+(val9*val37));
    acc6 = (acc6+alu46+alu40+alu44+alu48+alu42+alu45+alu49);
    acc10 = (acc10+alu46+alu41+alu43+alu47+alu42+alu45+alu49);
    acc14 = (acc14+(val1*val32)+(val4*val29)+(val7*val35)+alu41+alu43+alu47+(val5*val31)+(val10*val34)+(val11*val37));
    var val38 = data2[(alu11+6912)];
    var val39 = data2[(alu11+6913)];
    var alu54 = (val3*val39);
    var alu55 = (val4*val39);
    var val40 = data2[(alu11+6914)];
    var alu56 = (val4*val40);
    var val41 = data2[(alu11+6915)];
    var val42 = data2[(alu11+6916)];
    var alu57 = (val1*val42);
    var alu58 = (val8*val42);
    var val43 = data2[(alu11+6917)];
    var alu59 = (val1*val43);
    var val44 = data2[(alu11+6918)];
    var alu60 = ((val3*val38)+(val8*val41)+(val9*val44));
    var val45 = data2[(alu11+6919)];
    var alu61 = (val7*val45);
    var alu62 = (val9*val45);
    var val46 = data2[(alu11+6920)];
    var alu63 = (val7*val46);
    acc3 = (acc3+(val0*val41)+(val2*val38)+(val6*val44)+alu54+alu58+alu62+(val3*val40)+(val8*val43)+(val9*val46));
    acc7 = (acc7+alu60+alu54+alu58+alu62+alu56+alu59+alu63);
    acc11 = (acc11+alu60+alu55+alu57+alu61+alu56+alu59+alu63);
    acc15 = (acc15+(val1*val41)+(val4*val38)+(val7*val44)+alu55+alu57+alu61+(val5*val40)+(val10*val43)+(val11*val46));
    var val47 = data2[alu11];
    var alu68 = ((val3*val47)+(val8*val14)+(val9*val17));
    acc0 = (acc0+(val0*val14)+(val2*val47)+(val6*val17)+alu17+alu21+alu24+(val3*val13)+(val8*val16)+(val9*val19));
    acc4 = (acc4+alu68+alu17+alu21+alu24+alu19+alu22+alu25);
    acc8 = (acc8+alu68+alu18+alu20+alu23+alu19+alu22+alu25);
    acc12 = (acc12+(val1*val14)+(val4*val47)+(val7*val17)+alu18+alu20+alu23+(val5*val13)+(val10*val16)+(val11*val19));
  }
  var val48 = data3[(alu9+1)];
  data0[(alu10+262144)] = (val48+acc1);
  data0[(alu10+262145)] = (val48+acc5);
  data0[(alu10+262146)] = (val48+acc9);
  data0[(alu10+262147)] = (val48+acc13);
  var val49 = data3[(alu9+2)];
  data0[(alu10+524288)] = (val49+acc2);
  data0[(alu10+524289)] = (val49+acc6);
  data0[(alu10+524290)] = (val49+acc10);
  data0[(alu10+524291)] = (val49+acc14);
  var val50 = data3[(alu9+3)];
  data0[(alu10+786432)] = (val50+acc3);
  data0[(alu10+786433)] = (val50+acc7);
  data0[(alu10+786434)] = (val50+acc11);
  data0[(alu10+786435)] = (val50+acc15);
  var val51 = data3[alu9];
  data0[(alu10+1)] = (val51+acc4);
  data0[(alu10+2)] = (val51+acc8);
  data0[(alu10+3)] = (val51+acc12);
  data0[alu10] = (val51+acc0);
}`;

const r_256_32_2048_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 256 */
  var lidx0 = i32(lindex.x); /* 32 */
  var acc0 = 0.0f;
  for (var ridx0 = 0; ridx0 < 2048; ridx0++) {
    var alu0 = ((gidx0<<18)+(lidx0<<13)+(ridx0<<2));
    var val0 = data1[(alu0+1)];
    var val1 = data1[(alu0+2)];
    var val2 = data1[(alu0+3)];
    var val3 = data1[alu0];
    acc0 = (acc0+val2+val1+val0+val3);
  }
  data0[(lidx0+(gidx0<<5))] = acc0;
}`;

const r_32_256n8 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 256>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 256 */
  var val0 = data1[(lidx0+(gidx0<<8))];
  temp0[lidx0] = val0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc0 = 0.0f;
    for (var ridx0 = 0; ridx0 < 256; ridx0++) {
      var val1 = temp0[ridx0];
      acc0 = (acc0+val1);
    }
    data0[gidx0] = (acc0*4.76837158203125e-07f);
  }
}`;

const r_4_4_8_16_2048_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4 */
  var gidx1 = i32(gindex.y); /* 4 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = ((gidx0<<6)+(gidx1<<11)+(lidx0<<8)+(lidx1<<2));
  var val0 = data2[(lidx0+(gidx1<<3))];
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  for (var ridx0 = 0; ridx0 < 2048; ridx0++) {
    var alu1 = ((gidx0<<19)+(gidx1<<24)+(lidx0<<21)+(lidx1<<15)+(ridx0<<2));
    var val1 = data1[(alu1+1)];
    var alu2 = (val1-val0);
    var val2 = data1[(alu1+2)];
    var alu3 = (val2-val0);
    var val3 = data1[(alu1+3)];
    var alu4 = (val3-val0);
    var val4 = data1[(alu1+8192)];
    var alu5 = (val4-val0);
    var val5 = data1[(alu1+8193)];
    var alu6 = (val5-val0);
    var val6 = data1[(alu1+8194)];
    var alu7 = (val6-val0);
    var val7 = data1[(alu1+8195)];
    var alu8 = (val7-val0);
    acc1 = (acc1+(alu5*alu5)+(alu6*alu6)+(alu7*alu7)+(alu8*alu8));
    var val8 = data1[(alu1+16384)];
    var alu10 = (val8-val0);
    var val9 = data1[(alu1+16385)];
    var alu11 = (val9-val0);
    var val10 = data1[(alu1+16386)];
    var alu12 = (val10-val0);
    var val11 = data1[(alu1+16387)];
    var alu13 = (val11-val0);
    acc2 = (acc2+(alu10*alu10)+(alu11*alu11)+(alu12*alu12)+(alu13*alu13));
    var val12 = data1[(alu1+24576)];
    var alu15 = (val12-val0);
    var val13 = data1[(alu1+24577)];
    var alu16 = (val13-val0);
    var val14 = data1[(alu1+24578)];
    var alu17 = (val14-val0);
    var val15 = data1[(alu1+24579)];
    var alu18 = (val15-val0);
    acc3 = (acc3+(alu15*alu15)+(alu16*alu16)+(alu17*alu17)+(alu18*alu18));
    var val16 = data1[alu1];
    var alu20 = (val16-val0);
    acc0 = (acc0+(alu2*alu2)+(alu20*alu20)+(alu3*alu3)+(alu4*alu4));
  }
  data0[(alu0+1)] = acc1;
  data0[(alu0+2)] = acc2;
  data0[(alu0+3)] = acc3;
  data0[alu0] = acc0;
}`;

const r_32_256n9 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
var<workgroup> temp0: array<f32, 256>;
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 32 */
  var lidx0 = i32(lindex.x); /* 256 */
  var val0 = data1[(lidx0+(gidx0<<8))];
  temp0[lidx0] = val0;
  workgroupBarrier();
  if (((bool(lidx0))!=true)) {
    var acc0 = 0.0f;
    for (var ridx0 = 0; ridx0 < 256; ridx0++) {
      var val1 = temp0[ridx0];
      acc0 = (acc0+val1);
    }
    data0[gidx0] = sqrt((1/((acc0*4.76837158203125e-07f)+1e-05f)));
  }
}`;

const E_32_4096_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4096 */
  var gidx1 = i32(gindex.y); /* 32 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx0<<6)+(gidx1<<21)+(lidx0<<18)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var val0 = data1[alu2];
  var val1 = data1[alu3];
  var val2 = data1[alu4];
  var val3 = data1[alu1];
  var val4 = data2[gidx1];
  var val5 = data3[gidx1];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu5 = (val7+(val6*val5*(val0-val4)));
  var alu6 = (val7+(val6*val5*(val1-val4)));
  var alu7 = (val7+(val6*val5*(val2-val4)));
  var alu8 = (val7+(val6*val5*(val3-val4)));
  data0[alu2] = ((1/(exp2((alu5*-1.4426950408889634f))+1.0f))*alu5);
  data0[alu3] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu4] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu1] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
}`;

const r_32_64_8_8_16_256_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 64 */
  var gidx2 = i32(gindex.z); /* 32 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (gidx1<<12);
  var alu2 = (lidx0<<9);
  var alu3 = (lidx1<<2);
  var alu4 = (((gidx0+lidx1)<1)!=true);
  var alu5 = (((gidx1+lidx0)<1)!=true);
  var alu6 = ((lidx1+(gidx0<<4))<127);
  var alu7 = ((lidx0+(gidx1<<3))<511);
  var alu8 = (gidx2<<2);
  var alu9 = (alu1+(gidx2<<20)+alu0+alu2+alu3);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 256; ridx0++) {
    var alu10 = ((gidx2*9216)+(ridx0*9));
    var alu11 = (alu1+alu2+(ridx0<<18)+alu0+alu3);
    var val0 = select(0.0f, data1[(alu11+-513)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu11+-512)], alu5);
    var val2 = select(0.0f, data1[(alu11+-511)], alu5);
    var val3 = select(0.0f, data1[(alu11+-510)], alu5);
    var val4 = select(0.0f, data1[(alu11+-509)], alu5);
    var val5 = select(0.0f, data1[(alu11+-508)], (alu6&alu5));
    var val6 = select(0.0f, data1[(alu11+-1)], alu4);
    var val7 = data1[(alu11+1)];
    var val8 = data1[(alu11+2)];
    var val9 = data1[(alu11+3)];
    var val10 = select(0.0f, data1[(alu11+4)], alu6);
    var val11 = select(0.0f, data1[(alu11+511)], (alu7&alu4));
    var val12 = select(0.0f, data1[(alu11+512)], alu7);
    var val13 = select(0.0f, data1[(alu11+513)], alu7);
    var val14 = select(0.0f, data1[(alu11+514)], alu7);
    var val15 = select(0.0f, data1[(alu11+515)], alu7);
    var val16 = select(0.0f, data1[(alu11+516)], (alu7&alu6));
    var val17 = data1[alu11];
    var val18 = data2[(alu10+1)];
    var val19 = data2[(alu10+2)];
    var val20 = data2[(alu10+3)];
    var val21 = data2[(alu10+4)];
    var val22 = data2[(alu10+5)];
    var val23 = data2[(alu10+6)];
    var val24 = data2[(alu10+7)];
    var val25 = data2[(alu10+8)];
    var val26 = data2[(alu10+2304)];
    var val27 = data2[(alu10+2305)];
    var val28 = data2[(alu10+2306)];
    var val29 = data2[(alu10+2307)];
    var val30 = data2[(alu10+2308)];
    var val31 = data2[(alu10+2309)];
    var val32 = data2[(alu10+2310)];
    var val33 = data2[(alu10+2311)];
    var val34 = data2[(alu10+2312)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu10+4608)];
    var val36 = data2[(alu10+4609)];
    var val37 = data2[(alu10+4610)];
    var val38 = data2[(alu10+4611)];
    var val39 = data2[(alu10+4612)];
    var val40 = data2[(alu10+4613)];
    var val41 = data2[(alu10+4614)];
    var val42 = data2[(alu10+4615)];
    var val43 = data2[(alu10+4616)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu10+6912)];
    var val45 = data2[(alu10+6913)];
    var val46 = data2[(alu10+6914)];
    var val47 = data2[(alu10+6915)];
    var val48 = data2[(alu10+6916)];
    var val49 = data2[(alu10+6917)];
    var val50 = data2[(alu10+6918)];
    var val51 = data2[(alu10+6919)];
    var val52 = data2[(alu10+6920)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu10];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[(alu8+1)];
  data0[(alu9+262144)] = (val54+acc1);
  data0[(alu9+262145)] = (val54+acc5);
  data0[(alu9+262146)] = (val54+acc9);
  data0[(alu9+262147)] = (val54+acc13);
  var val55 = data3[(alu8+2)];
  data0[(alu9+524288)] = (val55+acc2);
  data0[(alu9+524289)] = (val55+acc6);
  data0[(alu9+524290)] = (val55+acc10);
  data0[(alu9+524291)] = (val55+acc14);
  var val56 = data3[(alu8+3)];
  data0[(alu9+786432)] = (val56+acc3);
  data0[(alu9+786433)] = (val56+acc7);
  data0[(alu9+786434)] = (val56+acc11);
  data0[(alu9+786435)] = (val56+acc15);
  var val57 = data3[alu8];
  data0[(alu9+1)] = (val57+acc4);
  data0[(alu9+2)] = (val57+acc8);
  data0[(alu9+3)] = (val57+acc12);
  data0[alu9] = (val57+acc0);
}`;

const E_16_4096_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4096 */
  var gidx1 = i32(gindex.y); /* 16 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (lidx0+(gidx1<<3));
  var alu1 = ((gidx0<<6)+(gidx1<<21)+(lidx0<<18)+(lidx1<<2));
  var alu2 = (alu1+1);
  var alu3 = (alu1+2);
  var alu4 = (alu1+3);
  var alu5 = ((gidx1<<1)+(lidx0>>2));
  var val0 = data1[alu2];
  var val1 = data1[alu3];
  var val2 = data1[alu4];
  var val3 = data1[alu1];
  var val4 = data2[alu5];
  var val5 = data3[alu5];
  var val6 = data4[alu0];
  var val7 = data5[alu0];
  var alu6 = (val7+(val6*val5*(val0-val4)));
  var alu7 = (val7+(val6*val5*(val1-val4)));
  var alu8 = (val7+(val6*val5*(val2-val4)));
  var alu9 = (val7+(val6*val5*(val3-val4)));
  data0[alu2] = ((1/(exp2((alu6*-1.4426950408889634f))+1.0f))*alu6);
  data0[alu3] = ((1/(exp2((alu7*-1.4426950408889634f))+1.0f))*alu7);
  data0[alu4] = ((1/(exp2((alu8*-1.4426950408889634f))+1.0f))*alu8);
  data0[alu1] = ((1/(exp2((alu9*-1.4426950408889634f))+1.0f))*alu9);
}`;

const r_32_64_8_8_16_128_4_4_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 64 */
  var gidx2 = i32(gindex.z); /* 32 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (gidx1<<12);
  var alu2 = (lidx0<<9);
  var alu3 = (lidx1<<2);
  var alu4 = (((gidx0+lidx1)<1)!=true);
  var alu5 = (((gidx1+lidx0)<1)!=true);
  var alu6 = ((lidx1+(gidx0<<4))<127);
  var alu7 = ((lidx0+(gidx1<<3))<511);
  var alu8 = (alu1+(gidx2<<20)+alu0+alu2+alu3);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 128; ridx0++) {
    var alu9 = ((gidx2*4608)+(ridx0*9));
    var alu10 = (alu1+alu2+(ridx0<<18)+alu0+alu3);
    var val0 = select(0.0f, data1[(alu10+-513)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu10+-512)], alu5);
    var val2 = select(0.0f, data1[(alu10+-511)], alu5);
    var val3 = select(0.0f, data1[(alu10+-510)], alu5);
    var val4 = select(0.0f, data1[(alu10+-509)], alu5);
    var val5 = select(0.0f, data1[(alu10+-508)], (alu6&alu5));
    var val6 = select(0.0f, data1[(alu10+-1)], alu4);
    var val7 = data1[(alu10+1)];
    var val8 = data1[(alu10+2)];
    var val9 = data1[(alu10+3)];
    var val10 = select(0.0f, data1[(alu10+4)], alu6);
    var val11 = select(0.0f, data1[(alu10+511)], (alu7&alu4));
    var val12 = select(0.0f, data1[(alu10+512)], alu7);
    var val13 = select(0.0f, data1[(alu10+513)], alu7);
    var val14 = select(0.0f, data1[(alu10+514)], alu7);
    var val15 = select(0.0f, data1[(alu10+515)], alu7);
    var val16 = select(0.0f, data1[(alu10+516)], (alu7&alu6));
    var val17 = data1[alu10];
    var val18 = data2[(alu9+1)];
    var val19 = data2[(alu9+2)];
    var val20 = data2[(alu9+3)];
    var val21 = data2[(alu9+4)];
    var val22 = data2[(alu9+5)];
    var val23 = data2[(alu9+6)];
    var val24 = data2[(alu9+7)];
    var val25 = data2[(alu9+8)];
    var val26 = data2[(alu9+1152)];
    var val27 = data2[(alu9+1153)];
    var val28 = data2[(alu9+1154)];
    var val29 = data2[(alu9+1155)];
    var val30 = data2[(alu9+1156)];
    var val31 = data2[(alu9+1157)];
    var val32 = data2[(alu9+1158)];
    var val33 = data2[(alu9+1159)];
    var val34 = data2[(alu9+1160)];
    acc4 = (acc4+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc6 = (acc6+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc7 = (acc7+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu9+2304)];
    var val36 = data2[(alu9+2305)];
    var val37 = data2[(alu9+2306)];
    var val38 = data2[(alu9+2307)];
    var val39 = data2[(alu9+2308)];
    var val40 = data2[(alu9+2309)];
    var val41 = data2[(alu9+2310)];
    var val42 = data2[(alu9+2311)];
    var val43 = data2[(alu9+2312)];
    acc8 = (acc8+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc9 = (acc9+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc11 = (acc11+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu9+3456)];
    var val45 = data2[(alu9+3457)];
    var val46 = data2[(alu9+3458)];
    var val47 = data2[(alu9+3459)];
    var val48 = data2[(alu9+3460)];
    var val49 = data2[(alu9+3461)];
    var val50 = data2[(alu9+3462)];
    var val51 = data2[(alu9+3463)];
    var val52 = data2[(alu9+3464)];
    acc12 = (acc12+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc13 = (acc13+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc14 = (acc14+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu9];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc1 = (acc1+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc2 = (acc2+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc3 = (acc3+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  data0[(alu8+1)] = acc1;
  data0[(alu8+2)] = acc2;
  data0[(alu8+3)] = acc3;
  data0[(alu8+262144)] = acc4;
  data0[(alu8+262145)] = acc5;
  data0[(alu8+262146)] = acc6;
  data0[(alu8+262147)] = acc7;
  data0[(alu8+524288)] = acc8;
  data0[(alu8+524289)] = acc9;
  data0[(alu8+524290)] = acc10;
  data0[(alu8+524291)] = acc11;
  data0[(alu8+786432)] = acc12;
  data0[(alu8+786433)] = acc13;
  data0[(alu8+786434)] = acc14;
  data0[(alu8+786435)] = acc15;
  data0[alu8] = acc0;
}`;

const r_4_4096_8_16_64_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@group(0) @binding(5)var<storage,read_write>data5:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 4096 */
  var gidx1 = i32(gindex.y); /* 4 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (lidx1<<2);
  var alu2 = ((gidx1<<5)+(lidx0<<2));
  var alu3 = (alu2+1);
  var alu4 = (alu2+2);
  var alu5 = (alu2+3);
  var alu6 = (alu0+(gidx1<<23)+(lidx0<<20)+alu1);
  var alu7 = (alu6+1);
  var alu8 = (alu6+2);
  var alu9 = (alu6+3);
  var alu10 = (alu6+262144);
  var alu11 = (alu6+262145);
  var alu12 = (alu6+262146);
  var alu13 = (alu6+262147);
  var alu14 = (alu6+524288);
  var alu15 = (alu6+524289);
  var alu16 = (alu6+524290);
  var alu17 = (alu6+524291);
  var alu18 = (alu6+786432);
  var alu19 = (alu6+786433);
  var alu20 = (alu6+786434);
  var alu21 = (alu6+786435);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 64; ridx0++) {
    var alu22 = ((gidx1<<13)+(lidx0<<10)+(ridx0<<2));
    var alu23 = (alu0+alu1+(ridx0<<20));
    var val0 = data1[(alu23+1)];
    var val1 = data1[(alu23+2)];
    var val2 = data1[(alu23+3)];
    var val3 = data1[(alu23+262144)];
    var val4 = data1[(alu23+262145)];
    var val5 = data1[(alu23+262146)];
    var val6 = data1[(alu23+262147)];
    var val7 = data1[(alu23+524288)];
    var val8 = data1[(alu23+524289)];
    var val9 = data1[(alu23+524290)];
    var val10 = data1[(alu23+524291)];
    var val11 = data1[(alu23+786432)];
    var val12 = data1[(alu23+786433)];
    var val13 = data1[(alu23+786434)];
    var val14 = data1[(alu23+786435)];
    var val15 = data1[alu23];
    var val16 = data2[(alu22+1)];
    var val17 = data2[(alu22+2)];
    var val18 = data2[(alu22+3)];
    var val19 = data2[(alu22+256)];
    var val20 = data2[(alu22+257)];
    var val21 = data2[(alu22+258)];
    var val22 = data2[(alu22+259)];
    acc1 = (acc1+(val3*val20)+(val15*val19)+(val7*val21)+(val11*val22));
    acc5 = (acc5+(val0*val19)+(val4*val20)+(val8*val21)+(val12*val22));
    acc9 = (acc9+(val1*val19)+(val5*val20)+(val9*val21)+(val13*val22));
    acc13 = (acc13+(val2*val19)+(val6*val20)+(val10*val21)+(val14*val22));
    var val23 = data2[(alu22+512)];
    var val24 = data2[(alu22+513)];
    var val25 = data2[(alu22+514)];
    var val26 = data2[(alu22+515)];
    acc2 = (acc2+(val3*val24)+(val15*val23)+(val7*val25)+(val11*val26));
    acc6 = (acc6+(val0*val23)+(val4*val24)+(val8*val25)+(val12*val26));
    acc10 = (acc10+(val1*val23)+(val5*val24)+(val9*val25)+(val13*val26));
    acc14 = (acc14+(val2*val23)+(val6*val24)+(val10*val25)+(val14*val26));
    var val27 = data2[(alu22+768)];
    var val28 = data2[(alu22+769)];
    var val29 = data2[(alu22+770)];
    var val30 = data2[(alu22+771)];
    acc3 = (acc3+(val3*val28)+(val15*val27)+(val7*val29)+(val11*val30));
    acc7 = (acc7+(val0*val27)+(val4*val28)+(val8*val29)+(val12*val30));
    acc11 = (acc11+(val1*val27)+(val5*val28)+(val9*val29)+(val13*val30));
    acc15 = (acc15+(val2*val27)+(val6*val28)+(val10*val29)+(val14*val30));
    var val31 = data2[alu22];
    acc0 = (acc0+(val3*val16)+(val15*val31)+(val7*val17)+(val11*val18));
    acc4 = (acc4+(val0*val31)+(val4*val16)+(val8*val17)+(val12*val18));
    acc8 = (acc8+(val1*val31)+(val5*val16)+(val9*val17)+(val13*val18));
    acc12 = (acc12+(val2*val31)+(val6*val16)+(val10*val17)+(val14*val18));
  }
  var val32 = data3[alu3];
  var val33 = data3[alu4];
  var val34 = data3[alu5];
  var val35 = data3[alu2];
  var val36 = data4[alu7];
  var val37 = data4[alu8];
  var val38 = data4[alu9];
  var val39 = data4[alu10];
  var val40 = data4[alu11];
  var val41 = data4[alu12];
  var val42 = data4[alu13];
  var val43 = data4[alu14];
  var val44 = data4[alu15];
  var val45 = data4[alu16];
  var val46 = data4[alu17];
  var val47 = data4[alu18];
  var val48 = data4[alu19];
  var val49 = data4[alu20];
  var val50 = data4[alu21];
  var val51 = data4[alu6];
  var val52 = data5[alu3];
  data0[alu10] = (val32+acc1+val39+val52);
  data0[alu11] = (val32+acc5+val40+val52);
  data0[alu12] = (val32+acc9+val41+val52);
  data0[alu13] = (val32+acc13+val42+val52);
  var val53 = data5[alu4];
  data0[alu14] = (val33+acc2+val43+val53);
  data0[alu15] = (val33+acc6+val44+val53);
  data0[alu16] = (val33+acc10+val45+val53);
  data0[alu17] = (val33+acc14+val46+val53);
  var val54 = data5[alu5];
  data0[alu18] = (val34+acc3+val47+val54);
  data0[alu19] = (val34+acc7+val48+val54);
  data0[alu20] = (val34+acc11+val49+val54);
  data0[alu21] = (val34+acc15+val50+val54);
  var val55 = data5[alu2];
  data0[alu7] = (val35+acc4+val36+val55);
  data0[alu8] = (val35+acc8+val37+val55);
  data0[alu9] = (val35+acc12+val38+val55);
  data0[alu6] = (val35+acc0+val51+val55);
}`;

const r_32_64_8_8_16_128_4_4_3_3n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 64 */
  var gidx2 = i32(gindex.z); /* 32 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (gidx1<<12);
  var alu2 = (lidx0<<9);
  var alu3 = (lidx1<<2);
  var alu4 = (((gidx0+lidx1)<1)!=true);
  var alu5 = (((gidx1+lidx0)<1)!=true);
  var alu6 = ((lidx1+(gidx0<<4))<127);
  var alu7 = ((lidx0+(gidx1<<3))<511);
  var alu8 = (gidx2<<2);
  var alu9 = (alu1+(gidx2<<20)+alu0+alu2+alu3);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 128; ridx0++) {
    var alu10 = ((gidx2*4608)+(ridx0*9));
    var alu11 = (alu1+alu2+(ridx0<<18)+alu0+alu3);
    var val0 = select(0.0f, data1[(alu11+-513)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu11+-512)], alu5);
    var val2 = select(0.0f, data1[(alu11+-511)], alu5);
    var val3 = select(0.0f, data1[(alu11+-510)], alu5);
    var val4 = select(0.0f, data1[(alu11+-509)], alu5);
    var val5 = select(0.0f, data1[(alu11+-508)], (alu6&alu5));
    var val6 = select(0.0f, data1[(alu11+-1)], alu4);
    var val7 = data1[(alu11+1)];
    var val8 = data1[(alu11+2)];
    var val9 = data1[(alu11+3)];
    var val10 = select(0.0f, data1[(alu11+4)], alu6);
    var val11 = select(0.0f, data1[(alu11+511)], (alu7&alu4));
    var val12 = select(0.0f, data1[(alu11+512)], alu7);
    var val13 = select(0.0f, data1[(alu11+513)], alu7);
    var val14 = select(0.0f, data1[(alu11+514)], alu7);
    var val15 = select(0.0f, data1[(alu11+515)], alu7);
    var val16 = select(0.0f, data1[(alu11+516)], (alu7&alu6));
    var val17 = data1[alu11];
    var val18 = data2[(alu10+1)];
    var val19 = data2[(alu10+2)];
    var val20 = data2[(alu10+3)];
    var val21 = data2[(alu10+4)];
    var val22 = data2[(alu10+5)];
    var val23 = data2[(alu10+6)];
    var val24 = data2[(alu10+7)];
    var val25 = data2[(alu10+8)];
    var val26 = data2[(alu10+1152)];
    var val27 = data2[(alu10+1153)];
    var val28 = data2[(alu10+1154)];
    var val29 = data2[(alu10+1155)];
    var val30 = data2[(alu10+1156)];
    var val31 = data2[(alu10+1157)];
    var val32 = data2[(alu10+1158)];
    var val33 = data2[(alu10+1159)];
    var val34 = data2[(alu10+1160)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu10+2304)];
    var val36 = data2[(alu10+2305)];
    var val37 = data2[(alu10+2306)];
    var val38 = data2[(alu10+2307)];
    var val39 = data2[(alu10+2308)];
    var val40 = data2[(alu10+2309)];
    var val41 = data2[(alu10+2310)];
    var val42 = data2[(alu10+2311)];
    var val43 = data2[(alu10+2312)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[(alu10+3456)];
    var val45 = data2[(alu10+3457)];
    var val46 = data2[(alu10+3458)];
    var val47 = data2[(alu10+3459)];
    var val48 = data2[(alu10+3460)];
    var val49 = data2[(alu10+3461)];
    var val50 = data2[(alu10+3462)];
    var val51 = data2[(alu10+3463)];
    var val52 = data2[(alu10+3464)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data2[alu10];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data3[(alu8+1)];
  data0[(alu9+262144)] = (val54+acc1);
  data0[(alu9+262145)] = (val54+acc5);
  data0[(alu9+262146)] = (val54+acc9);
  data0[(alu9+262147)] = (val54+acc13);
  var val55 = data3[(alu8+2)];
  data0[(alu9+524288)] = (val55+acc2);
  data0[(alu9+524289)] = (val55+acc6);
  data0[(alu9+524290)] = (val55+acc10);
  data0[(alu9+524291)] = (val55+acc14);
  var val56 = data3[(alu8+3)];
  data0[(alu9+786432)] = (val56+acc3);
  data0[(alu9+786433)] = (val56+acc7);
  data0[(alu9+786434)] = (val56+acc11);
  data0[(alu9+786435)] = (val56+acc15);
  var val57 = data3[alu8];
  data0[(alu9+1)] = (val57+acc4);
  data0[(alu9+2)] = (val57+acc8);
  data0[(alu9+3)] = (val57+acc12);
  data0[alu9] = (val57+acc0);
}`;

const r_32_64_8_8_16_128_4_4_3_3n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@group(0) @binding(4)var<storage,read_write>data4:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 64 */
  var gidx2 = i32(gindex.z); /* 32 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (gidx1<<12);
  var alu2 = (lidx0<<9);
  var alu3 = (lidx1<<2);
  var alu4 = (((gidx0+lidx1)<1)!=true);
  var alu5 = (((gidx1+lidx0)<1)!=true);
  var alu6 = ((lidx1+(gidx0<<4))<127);
  var alu7 = ((lidx0+(gidx1<<3))<511);
  var alu8 = (gidx2<<2);
  var alu9 = (alu1+(gidx2<<20)+alu0+alu2+alu3);
  var alu10 = (alu9+1);
  var alu11 = (alu9+2);
  var alu12 = (alu9+3);
  var alu13 = (alu9+262144);
  var alu14 = (alu9+262145);
  var alu15 = (alu9+262146);
  var alu16 = (alu9+262147);
  var alu17 = (alu9+524288);
  var alu18 = (alu9+524289);
  var alu19 = (alu9+524290);
  var alu20 = (alu9+524291);
  var alu21 = (alu9+786432);
  var alu22 = (alu9+786433);
  var alu23 = (alu9+786434);
  var alu24 = (alu9+786435);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  var acc12 = 0.0f;
  var acc13 = 0.0f;
  var acc14 = 0.0f;
  var acc15 = 0.0f;
  for (var ridx0 = 0; ridx0 < 128; ridx0++) {
    var alu25 = ((gidx2*4608)+(ridx0*9));
    var alu26 = (alu1+alu2+(ridx0<<18)+alu0+alu3);
    var val0 = select(0.0f, data2[(alu26+-513)], (alu4&alu5));
    var val1 = select(0.0f, data2[(alu26+-512)], alu5);
    var val2 = select(0.0f, data2[(alu26+-511)], alu5);
    var val3 = select(0.0f, data2[(alu26+-510)], alu5);
    var val4 = select(0.0f, data2[(alu26+-509)], alu5);
    var val5 = select(0.0f, data2[(alu26+-508)], (alu6&alu5));
    var val6 = select(0.0f, data2[(alu26+-1)], alu4);
    var val7 = data2[(alu26+1)];
    var val8 = data2[(alu26+2)];
    var val9 = data2[(alu26+3)];
    var val10 = select(0.0f, data2[(alu26+4)], alu6);
    var val11 = select(0.0f, data2[(alu26+511)], (alu7&alu4));
    var val12 = select(0.0f, data2[(alu26+512)], alu7);
    var val13 = select(0.0f, data2[(alu26+513)], alu7);
    var val14 = select(0.0f, data2[(alu26+514)], alu7);
    var val15 = select(0.0f, data2[(alu26+515)], alu7);
    var val16 = select(0.0f, data2[(alu26+516)], (alu7&alu6));
    var val17 = data2[alu26];
    var val18 = data3[(alu25+1)];
    var val19 = data3[(alu25+2)];
    var val20 = data3[(alu25+3)];
    var val21 = data3[(alu25+4)];
    var val22 = data3[(alu25+5)];
    var val23 = data3[(alu25+6)];
    var val24 = data3[(alu25+7)];
    var val25 = data3[(alu25+8)];
    var val26 = data3[(alu25+1152)];
    var val27 = data3[(alu25+1153)];
    var val28 = data3[(alu25+1154)];
    var val29 = data3[(alu25+1155)];
    var val30 = data3[(alu25+1156)];
    var val31 = data3[(alu25+1157)];
    var val32 = data3[(alu25+1158)];
    var val33 = data3[(alu25+1159)];
    var val34 = data3[(alu25+1160)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc5 = (acc5+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc9 = (acc9+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc13 = (acc13+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data3[(alu25+2304)];
    var val36 = data3[(alu25+2305)];
    var val37 = data3[(alu25+2306)];
    var val38 = data3[(alu25+2307)];
    var val39 = data3[(alu25+2308)];
    var val40 = data3[(alu25+2309)];
    var val41 = data3[(alu25+2310)];
    var val42 = data3[(alu25+2311)];
    var val43 = data3[(alu25+2312)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc6 = (acc6+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc10 = (acc10+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc14 = (acc14+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data3[(alu25+3456)];
    var val45 = data3[(alu25+3457)];
    var val46 = data3[(alu25+3458)];
    var val47 = data3[(alu25+3459)];
    var val48 = data3[(alu25+3460)];
    var val49 = data3[(alu25+3461)];
    var val50 = data3[(alu25+3462)];
    var val51 = data3[(alu25+3463)];
    var val52 = data3[(alu25+3464)];
    acc3 = (acc3+(val0*val44)+(val6*val47)+(val11*val50)+(val1*val45)+(val17*val48)+(val12*val51)+(val2*val46)+(val7*val49)+(val13*val52));
    acc7 = (acc7+(val1*val44)+(val17*val47)+(val12*val50)+(val2*val45)+(val7*val48)+(val13*val51)+(val3*val46)+(val8*val49)+(val14*val52));
    acc11 = (acc11+(val2*val44)+(val7*val47)+(val13*val50)+(val3*val45)+(val8*val48)+(val14*val51)+(val4*val46)+(val9*val49)+(val15*val52));
    acc15 = (acc15+(val3*val44)+(val8*val47)+(val14*val50)+(val4*val45)+(val9*val48)+(val15*val51)+(val5*val46)+(val10*val49)+(val16*val52));
    var val53 = data3[alu25];
    acc0 = (acc0+(val0*val53)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc4 = (acc4+(val1*val53)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc8 = (acc8+(val2*val53)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc12 = (acc12+(val3*val53)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val54 = data1[alu10];
  var val55 = data1[alu11];
  var val56 = data1[alu12];
  var val57 = data1[alu13];
  var val58 = data1[alu14];
  var val59 = data1[alu15];
  var val60 = data1[alu16];
  var val61 = data1[alu17];
  var val62 = data1[alu18];
  var val63 = data1[alu19];
  var val64 = data1[alu20];
  var val65 = data1[alu21];
  var val66 = data1[alu22];
  var val67 = data1[alu23];
  var val68 = data1[alu24];
  var val69 = data1[alu9];
  var val70 = data4[(alu8+1)];
  data0[alu13] = (val57+val70+acc1);
  data0[alu14] = (val58+val70+acc5);
  data0[alu15] = (val59+val70+acc9);
  data0[alu16] = (val60+val70+acc13);
  var val71 = data4[(alu8+2)];
  data0[alu17] = (val61+val71+acc2);
  data0[alu18] = (val62+val71+acc6);
  data0[alu19] = (val63+val71+acc10);
  data0[alu20] = (val64+val71+acc14);
  var val72 = data4[(alu8+3)];
  data0[alu21] = (val65+val72+acc3);
  data0[alu22] = (val66+val72+acc7);
  data0[alu23] = (val67+val72+acc11);
  data0[alu24] = (val68+val72+acc15);
  var val73 = data4[alu8];
  data0[alu10] = (val54+val73+acc4);
  data0[alu11] = (val55+val73+acc8);
  data0[alu12] = (val56+val73+acc12);
  data0[alu9] = (val69+val73+acc0);
}`;

const r_64_8_8_16_128_4_3_3_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@group(0) @binding(2)var<storage,read_write>data2:array<f32>;
@group(0) @binding(3)var<storage,read_write>data3:array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 8 */
  var gidx1 = i32(gindex.y); /* 64 */
  var lidx0 = i32(lindex.x); /* 8 */
  var lidx1 = i32(lindex.y); /* 16 */
  var alu0 = (gidx0<<6);
  var alu1 = (gidx1<<12);
  var alu2 = (lidx0<<9);
  var alu3 = (lidx1<<2);
  var alu4 = (((gidx0+lidx1)<1)!=true);
  var alu5 = (((gidx1+lidx0)<1)!=true);
  var alu6 = ((lidx1+(gidx0<<4))<127);
  var alu7 = ((lidx0+(gidx1<<3))<511);
  var alu8 = (alu0+alu1+alu2+alu3);
  var acc0 = 0.0f;
  var acc1 = 0.0f;
  var acc2 = 0.0f;
  var acc3 = 0.0f;
  var acc4 = 0.0f;
  var acc5 = 0.0f;
  var acc6 = 0.0f;
  var acc7 = 0.0f;
  var acc8 = 0.0f;
  var acc9 = 0.0f;
  var acc10 = 0.0f;
  var acc11 = 0.0f;
  for (var ridx0 = 0; ridx0 < 128; ridx0++) {
    var alu9 = (ridx0*9);
    var alu10 = (alu1+alu2+(ridx0<<18)+alu0+alu3);
    var val0 = select(0.0f, data1[(alu10+-513)], (alu4&alu5));
    var val1 = select(0.0f, data1[(alu10+-512)], alu5);
    var val2 = select(0.0f, data1[(alu10+-511)], alu5);
    var val3 = select(0.0f, data1[(alu10+-510)], alu5);
    var val4 = select(0.0f, data1[(alu10+-509)], alu5);
    var val5 = select(0.0f, data1[(alu10+-508)], (alu6&alu5));
    var val6 = select(0.0f, data1[(alu10+-1)], alu4);
    var val7 = data1[(alu10+1)];
    var val8 = data1[(alu10+2)];
    var val9 = data1[(alu10+3)];
    var val10 = select(0.0f, data1[(alu10+4)], alu6);
    var val11 = select(0.0f, data1[(alu10+511)], (alu7&alu4));
    var val12 = select(0.0f, data1[(alu10+512)], alu7);
    var val13 = select(0.0f, data1[(alu10+513)], alu7);
    var val14 = select(0.0f, data1[(alu10+514)], alu7);
    var val15 = select(0.0f, data1[(alu10+515)], alu7);
    var val16 = select(0.0f, data1[(alu10+516)], (alu7&alu6));
    var val17 = data1[alu10];
    var val18 = data2[(alu9+1)];
    var val19 = data2[(alu9+2)];
    var val20 = data2[(alu9+3)];
    var val21 = data2[(alu9+4)];
    var val22 = data2[(alu9+5)];
    var val23 = data2[(alu9+6)];
    var val24 = data2[(alu9+7)];
    var val25 = data2[(alu9+8)];
    var val26 = data2[(alu9+1152)];
    var val27 = data2[(alu9+1153)];
    var val28 = data2[(alu9+1154)];
    var val29 = data2[(alu9+1155)];
    var val30 = data2[(alu9+1156)];
    var val31 = data2[(alu9+1157)];
    var val32 = data2[(alu9+1158)];
    var val33 = data2[(alu9+1159)];
    var val34 = data2[(alu9+1160)];
    acc1 = (acc1+(val0*val26)+(val6*val29)+(val11*val32)+(val1*val27)+(val17*val30)+(val12*val33)+(val2*val28)+(val7*val31)+(val13*val34));
    acc4 = (acc4+(val1*val26)+(val17*val29)+(val12*val32)+(val2*val27)+(val7*val30)+(val13*val33)+(val3*val28)+(val8*val31)+(val14*val34));
    acc7 = (acc7+(val2*val26)+(val7*val29)+(val13*val32)+(val3*val27)+(val8*val30)+(val14*val33)+(val4*val28)+(val9*val31)+(val15*val34));
    acc10 = (acc10+(val3*val26)+(val8*val29)+(val14*val32)+(val4*val27)+(val9*val30)+(val15*val33)+(val5*val28)+(val10*val31)+(val16*val34));
    var val35 = data2[(alu9+2304)];
    var val36 = data2[(alu9+2305)];
    var val37 = data2[(alu9+2306)];
    var val38 = data2[(alu9+2307)];
    var val39 = data2[(alu9+2308)];
    var val40 = data2[(alu9+2309)];
    var val41 = data2[(alu9+2310)];
    var val42 = data2[(alu9+2311)];
    var val43 = data2[(alu9+2312)];
    acc2 = (acc2+(val0*val35)+(val6*val38)+(val11*val41)+(val1*val36)+(val17*val39)+(val12*val42)+(val2*val37)+(val7*val40)+(val13*val43));
    acc5 = (acc5+(val1*val35)+(val17*val38)+(val12*val41)+(val2*val36)+(val7*val39)+(val13*val42)+(val3*val37)+(val8*val40)+(val14*val43));
    acc8 = (acc8+(val2*val35)+(val7*val38)+(val13*val41)+(val3*val36)+(val8*val39)+(val14*val42)+(val4*val37)+(val9*val40)+(val15*val43));
    acc11 = (acc11+(val3*val35)+(val8*val38)+(val14*val41)+(val4*val36)+(val9*val39)+(val15*val42)+(val5*val37)+(val10*val40)+(val16*val43));
    var val44 = data2[alu9];
    acc0 = (acc0+(val0*val44)+(val6*val20)+(val11*val23)+(val1*val18)+(val17*val21)+(val12*val24)+(val2*val19)+(val7*val22)+(val13*val25));
    acc3 = (acc3+(val1*val44)+(val17*val20)+(val12*val23)+(val2*val18)+(val7*val21)+(val13*val24)+(val3*val19)+(val8*val22)+(val14*val25));
    acc6 = (acc6+(val2*val44)+(val7*val20)+(val13*val23)+(val3*val18)+(val8*val21)+(val14*val24)+(val4*val19)+(val9*val22)+(val15*val25));
    acc9 = (acc9+(val3*val44)+(val8*val20)+(val14*val23)+(val4*val18)+(val9*val21)+(val15*val24)+(val5*val19)+(val10*val22)+(val16*val25));
  }
  var val45 = data3[0];
  data0[(alu8+1)] = ((val45+acc3+1.0f)*0.5f);
  data0[(alu8+2)] = ((val45+acc6+1.0f)*0.5f);
  data0[(alu8+3)] = ((val45+acc9+1.0f)*0.5f);
  data0[alu8] = ((val45+acc0+1.0f)*0.5f);
  var val46 = data3[1];
  data0[(alu8+262144)] = ((val46+acc1+1.0f)*0.5f);
  data0[(alu8+262145)] = ((val46+acc4+1.0f)*0.5f);
  data0[(alu8+262146)] = ((val46+acc7+1.0f)*0.5f);
  data0[(alu8+262147)] = ((val46+acc10+1.0f)*0.5f);
  var val47 = data3[2];
  data0[(alu8+524288)] = ((val47+acc2+1.0f)*0.5f);
  data0[(alu8+524289)] = ((val47+acc5+1.0f)*0.5f);
  data0[(alu8+524290)] = ((val47+acc8+1.0f)*0.5f);
  data0[(alu8+524291)] = ((val47+acc11+1.0f)*0.5f);
}`;

const E_2048_32_3_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
fn is_nan(v:f32) -> bool { return min(v, 1.0) == 1.0 && max(v, -1.0) == -1.0; }

fn inf(a: f32) -> f32 { return a/0.0; }
@group(0) @binding(0)var<storage,read_write>data0:array<f32>;
@group(0) @binding(1)var<storage,read_write>data1:array<f32>;
@compute @workgroup_size(32,3) fn main(@builtin(workgroup_id) gindex: vec3<u32>,@builtin(local_invocation_id) lindex: vec3<u32>) {
  var gidx0 = i32(gindex.x); /* 2048 */
  var lidx0 = i32(lindex.x); /* 32 */
  var lidx1 = i32(lindex.y); /* 3 */
  var alu0 = (lidx1+(gidx0*384)+(lidx0*12));
  var alu1 = ((gidx0<<7)+(lidx0<<2)+(lidx1<<18));
  var val0 = data1[(alu1+1)];
  var alu2 = select(select(val0,(val0*0.5f),((bool(val0))!=true)),0.0f,(val0<0.0f));
  var alu3 = -alu2;
  data0[(alu0+3)] = (select(select(alu3,((alu2*-0.5f)+-0.5f),((alu3!=-1.0f)!=true)),-1.0f,(alu3<-1.0f))*-255.0f);
  var val1 = data1[(alu1+2)];
  var alu5 = select(select(val1,(val1*0.5f),((bool(val1))!=true)),0.0f,(val1<0.0f));
  var alu6 = -alu5;
  data0[(alu0+6)] = (select(select(alu6,((alu5*-0.5f)+-0.5f),((alu6!=-1.0f)!=true)),-1.0f,(alu6<-1.0f))*-255.0f);
  var val2 = data1[(alu1+3)];
  var alu8 = select(select(val2,(val2*0.5f),((bool(val2))!=true)),0.0f,(val2<0.0f));
  var alu9 = -alu8;
  data0[(alu0+9)] = (select(select(alu9,((alu8*-0.5f)+-0.5f),((alu9!=-1.0f)!=true)),-1.0f,(alu9<-1.0f))*-255.0f);
  var val3 = data1[alu1];
  var alu11 = select(select(val3,(val3*0.5f),((bool(val3))!=true)),0.0f,(val3<0.0f));
  var alu12 = -alu11;
  data0[alu0] = (select(select(alu12,((alu11*-0.5f)+-0.5f),((alu12!=-1.0f)!=true)),-1.0f,(alu12<-1.0f))*-255.0f);
}`;

    return {
      "setup": async (device, safetensor) => {
        const metadata = getTensorMetadata(safetensor[0]);

        const buf_0 = createEmptyBuf(device, 65536);;
    const input0 = createEmptyBuf(device, 65536);;
    const buf_1 = createEmptyBuf(device, 65536);;
    const buf_2 = createWeightBuf(device, 64, getTensorBuffer(safetensor, metadata['first_stage_model.post_quant_conv.weight'], 'first_stage_model.post_quant_conv.weight'));
    const buf_3 = createWeightBuf(device, 16, getTensorBuffer(safetensor, metadata['first_stage_model.post_quant_conv.bias'], 'first_stage_model.post_quant_conv.bias'));
    const buf_4 = createEmptyBuf(device, 8388608);;
    const buf_5 = createWeightBuf(device, 73728, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.conv_in.weight'], 'first_stage_model.decoder.conv_in.weight'));
    const buf_6 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.conv_in.bias'], 'first_stage_model.decoder.conv_in.bias'));
    const buf_7 = createEmptyBuf(device, 32768);;
    const buf_8 = createEmptyBuf(device, 128);;
    const buf_9 = createEmptyBuf(device, 128);;
    const buf_10 = createEmptyBuf(device, 8388608);;
    const buf_11 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.norm1.weight'], 'first_stage_model.decoder.mid.block_1.norm1.weight'));
    const buf_12 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.norm1.bias'], 'first_stage_model.decoder.mid.block_1.norm1.bias'));
    const buf_13 = createEmptyBuf(device, 8388608);;
    const buf_14 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.conv1.weight'], 'first_stage_model.decoder.mid.block_1.conv1.weight'));
    const buf_15 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.conv1.bias'], 'first_stage_model.decoder.mid.block_1.conv1.bias'));
    const buf_16 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.norm2.weight'], 'first_stage_model.decoder.mid.block_1.norm2.weight'));
    const buf_17 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.norm2.bias'], 'first_stage_model.decoder.mid.block_1.norm2.bias'));
    const buf_18 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.conv2.weight'], 'first_stage_model.decoder.mid.block_1.conv2.weight'));
    const buf_19 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.conv2.bias'], 'first_stage_model.decoder.mid.block_1.conv2.bias'));
    const buf_20 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.norm.weight'], 'first_stage_model.decoder.mid.attn_1.norm.weight'));
    const buf_21 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.norm.bias'], 'first_stage_model.decoder.mid.attn_1.norm.bias'));
    const buf_22 = createWeightBuf(device, 1048576, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.q.weight'], 'first_stage_model.decoder.mid.attn_1.q.weight'));
    const buf_23 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.q.bias'], 'first_stage_model.decoder.mid.attn_1.q.bias'));
    const buf_24 = createEmptyBuf(device, 8388608);;
    const buf_25 = createWeightBuf(device, 1048576, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.k.weight'], 'first_stage_model.decoder.mid.attn_1.k.weight'));
    const buf_26 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.k.bias'], 'first_stage_model.decoder.mid.attn_1.k.bias'));
    const buf_27 = createEmptyBuf(device, 8388608);;
    const buf_28 = createWeightBuf(device, 1048576, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.v.weight'], 'first_stage_model.decoder.mid.attn_1.v.weight'));
    const buf_29 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.v.bias'], 'first_stage_model.decoder.mid.attn_1.v.bias'));
    const buf_30 = createEmptyBuf(device, 67108864);;
    const buf_31 = createEmptyBuf(device, 16384);;
    const buf_32 = createEmptyBuf(device, 16384);;
    const buf_33 = createEmptyBuf(device, 67108864);;
    const buf_34 = createWeightBuf(device, 1048576, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.proj_out.weight'], 'first_stage_model.decoder.mid.attn_1.proj_out.weight'));
    const buf_35 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.proj_out.bias'], 'first_stage_model.decoder.mid.attn_1.proj_out.bias'));
    const buf_36 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.norm1.weight'], 'first_stage_model.decoder.mid.block_2.norm1.weight'));
    const buf_37 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.norm1.bias'], 'first_stage_model.decoder.mid.block_2.norm1.bias'));
    const buf_38 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.conv1.weight'], 'first_stage_model.decoder.mid.block_2.conv1.weight'));
    const buf_39 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.conv1.bias'], 'first_stage_model.decoder.mid.block_2.conv1.bias'));
    const buf_40 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.norm2.weight'], 'first_stage_model.decoder.mid.block_2.norm2.weight'));
    const buf_41 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.norm2.bias'], 'first_stage_model.decoder.mid.block_2.norm2.bias'));
    const buf_42 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.conv2.weight'], 'first_stage_model.decoder.mid.block_2.conv2.weight'));
    const buf_43 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.conv2.bias'], 'first_stage_model.decoder.mid.block_2.conv2.bias'));
    const buf_44 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.norm1.weight'], 'first_stage_model.decoder.up.3.block.0.norm1.weight'));
    const buf_45 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.norm1.bias'], 'first_stage_model.decoder.up.3.block.0.norm1.bias'));
    const buf_46 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.conv1.weight'], 'first_stage_model.decoder.up.3.block.0.conv1.weight'));
    const buf_47 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.conv1.bias'], 'first_stage_model.decoder.up.3.block.0.conv1.bias'));
    const buf_48 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.norm2.weight'], 'first_stage_model.decoder.up.3.block.0.norm2.weight'));
    const buf_49 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.norm2.bias'], 'first_stage_model.decoder.up.3.block.0.norm2.bias'));
    const buf_50 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.conv2.weight'], 'first_stage_model.decoder.up.3.block.0.conv2.weight'));
    const buf_51 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.conv2.bias'], 'first_stage_model.decoder.up.3.block.0.conv2.bias'));
    const buf_52 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.norm1.weight'], 'first_stage_model.decoder.up.3.block.1.norm1.weight'));
    const buf_53 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.norm1.bias'], 'first_stage_model.decoder.up.3.block.1.norm1.bias'));
    const buf_54 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.conv1.weight'], 'first_stage_model.decoder.up.3.block.1.conv1.weight'));
    const buf_55 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.conv1.bias'], 'first_stage_model.decoder.up.3.block.1.conv1.bias'));
    const buf_56 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.norm2.weight'], 'first_stage_model.decoder.up.3.block.1.norm2.weight'));
    const buf_57 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.norm2.bias'], 'first_stage_model.decoder.up.3.block.1.norm2.bias'));
    const buf_58 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.conv2.weight'], 'first_stage_model.decoder.up.3.block.1.conv2.weight'));
    const buf_59 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.conv2.bias'], 'first_stage_model.decoder.up.3.block.1.conv2.bias'));
    const buf_60 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.norm1.weight'], 'first_stage_model.decoder.up.3.block.2.norm1.weight'));
    const buf_61 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.norm1.bias'], 'first_stage_model.decoder.up.3.block.2.norm1.bias'));
    const buf_62 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.conv1.weight'], 'first_stage_model.decoder.up.3.block.2.conv1.weight'));
    const buf_63 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.conv1.bias'], 'first_stage_model.decoder.up.3.block.2.conv1.bias'));
    const buf_64 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.norm2.weight'], 'first_stage_model.decoder.up.3.block.2.norm2.weight'));
    const buf_65 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.norm2.bias'], 'first_stage_model.decoder.up.3.block.2.norm2.bias'));
    const buf_66 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.conv2.weight'], 'first_stage_model.decoder.up.3.block.2.conv2.weight'));
    const buf_67 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.conv2.bias'], 'first_stage_model.decoder.up.3.block.2.conv2.bias'));
    const buf_68 = createEmptyBuf(device, 33554432);;
    const buf_69 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.upsample.conv.weight'], 'first_stage_model.decoder.up.3.upsample.conv.weight'));
    const buf_70 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.upsample.conv.bias'], 'first_stage_model.decoder.up.3.upsample.conv.bias'));
    const buf_71 = createEmptyBuf(device, 33554432);;
    const buf_72 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.norm1.weight'], 'first_stage_model.decoder.up.2.block.0.norm1.weight'));
    const buf_73 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.norm1.bias'], 'first_stage_model.decoder.up.2.block.0.norm1.bias'));
    const buf_74 = createEmptyBuf(device, 33554432);;
    const buf_75 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.conv1.weight'], 'first_stage_model.decoder.up.2.block.0.conv1.weight'));
    const buf_76 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.conv1.bias'], 'first_stage_model.decoder.up.2.block.0.conv1.bias'));
    const buf_77 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.norm2.weight'], 'first_stage_model.decoder.up.2.block.0.norm2.weight'));
    const buf_78 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.norm2.bias'], 'first_stage_model.decoder.up.2.block.0.norm2.bias'));
    const buf_79 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.conv2.weight'], 'first_stage_model.decoder.up.2.block.0.conv2.weight'));
    const buf_80 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.conv2.bias'], 'first_stage_model.decoder.up.2.block.0.conv2.bias'));
    const buf_81 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.norm1.weight'], 'first_stage_model.decoder.up.2.block.1.norm1.weight'));
    const buf_82 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.norm1.bias'], 'first_stage_model.decoder.up.2.block.1.norm1.bias'));
    const buf_83 = createEmptyBuf(device, 33554432);;
    const buf_84 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.conv1.weight'], 'first_stage_model.decoder.up.2.block.1.conv1.weight'));
    const buf_85 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.conv1.bias'], 'first_stage_model.decoder.up.2.block.1.conv1.bias'));
    const buf_86 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.norm2.weight'], 'first_stage_model.decoder.up.2.block.1.norm2.weight'));
    const buf_87 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.norm2.bias'], 'first_stage_model.decoder.up.2.block.1.norm2.bias'));
    const buf_88 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.conv2.weight'], 'first_stage_model.decoder.up.2.block.1.conv2.weight'));
    const buf_89 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.conv2.bias'], 'first_stage_model.decoder.up.2.block.1.conv2.bias'));
    const buf_90 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.norm1.weight'], 'first_stage_model.decoder.up.2.block.2.norm1.weight'));
    const buf_91 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.norm1.bias'], 'first_stage_model.decoder.up.2.block.2.norm1.bias'));
    const buf_92 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.conv1.weight'], 'first_stage_model.decoder.up.2.block.2.conv1.weight'));
    const buf_93 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.conv1.bias'], 'first_stage_model.decoder.up.2.block.2.conv1.bias'));
    const buf_94 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.norm2.weight'], 'first_stage_model.decoder.up.2.block.2.norm2.weight'));
    const buf_95 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.norm2.bias'], 'first_stage_model.decoder.up.2.block.2.norm2.bias'));
    const buf_96 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.conv2.weight'], 'first_stage_model.decoder.up.2.block.2.conv2.weight'));
    const buf_97 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.conv2.bias'], 'first_stage_model.decoder.up.2.block.2.conv2.bias'));
    const buf_98 = createEmptyBuf(device, 134217728);;
    const buf_99 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.upsample.conv.weight'], 'first_stage_model.decoder.up.2.upsample.conv.weight'));
    const buf_100 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.upsample.conv.bias'], 'first_stage_model.decoder.up.2.upsample.conv.bias'));
    const buf_101 = createEmptyBuf(device, 134217728);;
    const buf_102 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.norm1.weight'], 'first_stage_model.decoder.up.1.block.0.norm1.weight'));
    const buf_103 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.norm1.bias'], 'first_stage_model.decoder.up.1.block.0.norm1.bias'));
    const buf_104 = createWeightBuf(device, 4718592, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.conv1.weight'], 'first_stage_model.decoder.up.1.block.0.conv1.weight'));
    const buf_105 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.conv1.bias'], 'first_stage_model.decoder.up.1.block.0.conv1.bias'));
    const buf_106 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.norm2.weight'], 'first_stage_model.decoder.up.1.block.0.norm2.weight'));
    const buf_107 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.norm2.bias'], 'first_stage_model.decoder.up.1.block.0.norm2.bias'));
    const buf_108 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.conv2.weight'], 'first_stage_model.decoder.up.1.block.0.conv2.weight'));
    const buf_109 = createWeightBuf(device, 524288, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.nin_shortcut.weight'], 'first_stage_model.decoder.up.1.block.0.nin_shortcut.weight'));
    const buf_110 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.nin_shortcut.bias'], 'first_stage_model.decoder.up.1.block.0.nin_shortcut.bias'));
    const buf_111 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.conv2.bias'], 'first_stage_model.decoder.up.1.block.0.conv2.bias'));
    const buf_112 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.norm1.weight'], 'first_stage_model.decoder.up.1.block.1.norm1.weight'));
    const buf_113 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.norm1.bias'], 'first_stage_model.decoder.up.1.block.1.norm1.bias'));
    const buf_114 = createEmptyBuf(device, 67108864);;
    const buf_115 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.conv1.weight'], 'first_stage_model.decoder.up.1.block.1.conv1.weight'));
    const buf_116 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.conv1.bias'], 'first_stage_model.decoder.up.1.block.1.conv1.bias'));
    const buf_117 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.norm2.weight'], 'first_stage_model.decoder.up.1.block.1.norm2.weight'));
    const buf_118 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.norm2.bias'], 'first_stage_model.decoder.up.1.block.1.norm2.bias'));
    const buf_119 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.conv2.weight'], 'first_stage_model.decoder.up.1.block.1.conv2.weight'));
    const buf_120 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.conv2.bias'], 'first_stage_model.decoder.up.1.block.1.conv2.bias'));
    const buf_121 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.norm1.weight'], 'first_stage_model.decoder.up.1.block.2.norm1.weight'));
    const buf_122 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.norm1.bias'], 'first_stage_model.decoder.up.1.block.2.norm1.bias'));
    const buf_123 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.conv1.weight'], 'first_stage_model.decoder.up.1.block.2.conv1.weight'));
    const buf_124 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.conv1.bias'], 'first_stage_model.decoder.up.1.block.2.conv1.bias'));
    const buf_125 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.norm2.weight'], 'first_stage_model.decoder.up.1.block.2.norm2.weight'));
    const buf_126 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.norm2.bias'], 'first_stage_model.decoder.up.1.block.2.norm2.bias'));
    const buf_127 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.conv2.weight'], 'first_stage_model.decoder.up.1.block.2.conv2.weight'));
    const buf_128 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.conv2.bias'], 'first_stage_model.decoder.up.1.block.2.conv2.bias'));
    const buf_129 = createEmptyBuf(device, 268435456);;
    const buf_130 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.upsample.conv.weight'], 'first_stage_model.decoder.up.1.upsample.conv.weight'));
    const buf_131 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.upsample.conv.bias'], 'first_stage_model.decoder.up.1.upsample.conv.bias'));
    const buf_132 = createEmptyBuf(device, 268435456);;
    const buf_133 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.norm1.weight'], 'first_stage_model.decoder.up.0.block.0.norm1.weight'));
    const buf_134 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.norm1.bias'], 'first_stage_model.decoder.up.0.block.0.norm1.bias'));
    const buf_135 = createWeightBuf(device, 1179648, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.conv1.weight'], 'first_stage_model.decoder.up.0.block.0.conv1.weight'));
    const buf_136 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.conv1.bias'], 'first_stage_model.decoder.up.0.block.0.conv1.bias'));
    const buf_137 = createEmptyBuf(device, 134217728);;
    const buf_138 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.norm2.weight'], 'first_stage_model.decoder.up.0.block.0.norm2.weight'));
    const buf_139 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.norm2.bias'], 'first_stage_model.decoder.up.0.block.0.norm2.bias'));
    const buf_140 = createWeightBuf(device, 589824, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.conv2.weight'], 'first_stage_model.decoder.up.0.block.0.conv2.weight'));
    const buf_141 = createWeightBuf(device, 131072, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.nin_shortcut.weight'], 'first_stage_model.decoder.up.0.block.0.nin_shortcut.weight'));
    const buf_142 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.nin_shortcut.bias'], 'first_stage_model.decoder.up.0.block.0.nin_shortcut.bias'));
    const buf_143 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.conv2.bias'], 'first_stage_model.decoder.up.0.block.0.conv2.bias'));
    const buf_144 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.norm1.weight'], 'first_stage_model.decoder.up.0.block.1.norm1.weight'));
    const buf_145 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.norm1.bias'], 'first_stage_model.decoder.up.0.block.1.norm1.bias'));
    const buf_146 = createEmptyBuf(device, 134217728);;
    const buf_147 = createWeightBuf(device, 589824, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.conv1.weight'], 'first_stage_model.decoder.up.0.block.1.conv1.weight'));
    const buf_148 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.conv1.bias'], 'first_stage_model.decoder.up.0.block.1.conv1.bias'));
    const buf_149 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.norm2.weight'], 'first_stage_model.decoder.up.0.block.1.norm2.weight'));
    const buf_150 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.norm2.bias'], 'first_stage_model.decoder.up.0.block.1.norm2.bias'));
    const buf_151 = createWeightBuf(device, 589824, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.conv2.weight'], 'first_stage_model.decoder.up.0.block.1.conv2.weight'));
    const buf_152 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.conv2.bias'], 'first_stage_model.decoder.up.0.block.1.conv2.bias'));
    const buf_153 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.norm1.weight'], 'first_stage_model.decoder.up.0.block.2.norm1.weight'));
    const buf_154 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.norm1.bias'], 'first_stage_model.decoder.up.0.block.2.norm1.bias'));
    const buf_155 = createWeightBuf(device, 589824, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.conv1.weight'], 'first_stage_model.decoder.up.0.block.2.conv1.weight'));
    const buf_156 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.conv1.bias'], 'first_stage_model.decoder.up.0.block.2.conv1.bias'));
    const buf_157 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.norm2.weight'], 'first_stage_model.decoder.up.0.block.2.norm2.weight'));
    const buf_158 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.norm2.bias'], 'first_stage_model.decoder.up.0.block.2.norm2.bias'));
    const buf_159 = createEmptyBuf(device, 134217728);;
    const buf_160 = createWeightBuf(device, 589824, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.conv2.weight'], 'first_stage_model.decoder.up.0.block.2.conv2.weight'));
    const buf_161 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.conv2.bias'], 'first_stage_model.decoder.up.0.block.2.conv2.bias'));
    const buf_162 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.norm_out.weight'], 'first_stage_model.decoder.norm_out.weight'));
    const buf_163 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.norm_out.bias'], 'first_stage_model.decoder.norm_out.bias'));
    const buf_164 = createEmptyBuf(device, 3145728);;
    const buf_165 = createWeightBuf(device, 13824, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.conv_out.weight'], 'first_stage_model.decoder.conv_out.weight'));
    const buf_166 = createWeightBuf(device, 12, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.conv_out.bias'], 'first_stage_model.decoder.conv_out.bias'));
    const output0 = createEmptyBuf(device, 3145728);;

        const gpuWriteBuffer0 = device.createBuffer({size:input0.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
        const gpuReadBuffer = device.createBuffer({ size: output0.size, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ });

        const kernels = [E_128_32_4n3, r_32_32_4_4_4, r_128_8_8_16_4_4_4_3_3, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, r_128_8_8_16_512_4_4_3_3, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, r_128_8_8_16_512_4_4_3_3n1, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4n1, r_16_64_8_16_128_4_4_4, r_16_64_8_16_128_4_4_4, r_16_64_8_16_128_4_4_4, r_128_64_8_16_128_4_4_4, r_128_32_1024_4, r_32_32_1024_4_4, E_512_64_8_16_4, r_128_8_8_16_1024_4_4_4, r_16_64_8_16_128_4_4_4n1, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, r_128_8_8_16_512_4_4_3_3, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, r_128_8_8_16_512_4_4_3_3n1, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, r_128_8_8_16_512_4_4_3_3, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, r_128_8_8_16_512_4_4_3_3n1, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, r_128_8_8_16_512_4_4_3_3, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, r_128_8_8_16_512_4_4_3_3n1, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, r_128_8_8_16_512_4_4_3_3, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, r_128_8_8_16_512_4_4_3_3n1, r_128_16_2_8_16_512_4_4_3_3, r_256_32_256_4, r_32_256n2, r_4_4_8_16_256_4_4, r_32_256n3, E_64_256_8_16_4, r_128_16_2_8_16_512_4_4_3_3n1, r_256_32_256_4, r_32_256n2, r_4_4_8_16_256_4_4, r_32_256n3, E_64_256_8_16_4, r_128_16_2_8_16_512_4_4_3_3n2, r_256_32_256_4, r_32_256n2, r_4_4_8_16_256_4_4, r_32_256n3, E_64_256_8_16_4, r_128_16_2_8_16_512_4_4_3_3n1, r_256_32_256_4, r_32_256n2, r_4_4_8_16_256_4_4, r_32_256n3, E_64_256_8_16_4, r_128_16_2_8_16_512_4_4_3_3n2, r_256_32_256_4, r_32_256n2, r_4_4_8_16_256_4_4, r_32_256n3, E_64_256_8_16_4, r_128_16_2_8_16_512_4_4_3_3n1, r_256_32_256_4, r_32_256n2, r_4_4_8_16_256_4_4, r_32_256n3, E_64_256_8_16_4, r_128_16_2_8_16_512_4_4_3_3n2, r_128_32_4_8_16_512_4_4_3_3, r_256_32_1024_4, r_32_256n4, r_4_4_8_16_1024_4_4, r_32_256n5, E_64_1024_8_16_4, r_64_32_4_8_16_512_4_4_3_3, r_256_32_512_4, r_32_256n6, r_4_4_8_16_512_4_4, r_32_256n7, E_32_1024_8_16_4, r_64_32_4_8_16_256_4_4_3_3, r_8_1024_8_16_128_4_4_4, r_256_32_512_4, r_32_256n6, r_4_4_8_16_512_4_4, r_32_256n7, E_32_1024_8_16_4, r_64_32_4_8_16_256_4_4_3_3n1, r_256_32_512_4, r_32_256n6, r_4_4_8_16_512_4_4, r_32_256n7, E_32_1024_8_16_4, r_64_32_4_8_16_256_4_4_3_3n2, r_256_32_512_4, r_32_256n6, r_4_4_8_16_512_4_4, r_32_256n7, E_32_1024_8_16_4, r_64_32_4_8_16_256_4_4_3_3n1, r_256_32_512_4, r_32_256n6, r_4_4_8_16_512_4_4, r_32_256n7, E_32_1024_8_16_4, r_64_32_4_8_16_256_4_4_3_3n2, r_64_64_8_8_16_256_4_4_3_3, r_256_32_2048_4, r_32_256n8, r_4_4_8_16_2048_4_4, r_32_256n9, E_32_4096_8_16_4, r_32_64_8_8_16_256_4_4_3_3, r_256_32_1024_4, r_32_256n4, r_4_4_8_16_1024_4_4, r_32_256n5, E_16_4096_8_16_4, r_32_64_8_8_16_128_4_4_3_3, r_4_4096_8_16_64_4_4_4, r_256_32_1024_4, r_32_256n4, r_4_4_8_16_1024_4_4, r_32_256n5, E_16_4096_8_16_4, r_32_64_8_8_16_128_4_4_3_3n1, r_256_32_1024_4, r_32_256n4, r_4_4_8_16_1024_4_4, r_32_256n5, E_16_4096_8_16_4, r_32_64_8_8_16_128_4_4_3_3n2, r_256_32_1024_4, r_32_256n4, r_4_4_8_16_1024_4_4, r_32_256n5, E_16_4096_8_16_4, r_32_64_8_8_16_128_4_4_3_3n1, r_256_32_1024_4, r_32_256n4, r_4_4_8_16_1024_4_4, r_32_256n5, E_16_4096_8_16_4, r_32_64_8_8_16_128_4_4_3_3n2, r_256_32_1024_4, r_32_256n4, r_4_4_8_16_1024_4_4, r_32_256n5, E_16_4096_8_16_4, r_64_8_8_16_128_4_3_3_3, E_2048_32_3_4];
        const piplines = await Promise.all(kernels.map(name => device.createComputePipelineAsync({layout: "auto", compute: { module: device.createShaderModule({ code: name }), entryPoint: "main" }})));

        return async (data0) => {
            const commandEncoder = device.createCommandEncoder();

            await gpuWriteBuffer0.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer0.getMappedRange()).set(data0);
    gpuWriteBuffer0.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer0, 0, input0, 0, gpuWriteBuffer0.size);

            addComputePass(device, commandEncoder, piplines[0], [buf_0, input0], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1], [buf_1, buf_0, buf_2, buf_3], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[2], [buf_4, buf_1, buf_5, buf_6], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[3], [buf_7, buf_4], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[4], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[5], [buf_7, buf_4, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[6], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[7], [buf_10, buf_4, buf_8, buf_9, buf_11, buf_12], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[8], [buf_13, buf_10, buf_14, buf_15], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[9], [buf_7, buf_13], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[10], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[11], [buf_7, buf_13, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[12], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[13], [buf_10, buf_13, buf_8, buf_9, buf_16, buf_17], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[14], [buf_13, buf_4, buf_10, buf_18, buf_19], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[15], [buf_7, buf_13], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[16], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[17], [buf_7, buf_13, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[18], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[19], [buf_4, buf_13, buf_8, buf_9, buf_20, buf_21], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[20], [buf_10, buf_4, buf_22, buf_23], [64, 16, 1]);
        addComputePass(device, commandEncoder, piplines[21], [buf_24, buf_4, buf_25, buf_26], [64, 16, 1]);
        addComputePass(device, commandEncoder, piplines[22], [buf_27, buf_4, buf_28, buf_29], [64, 16, 1]);
        addComputePass(device, commandEncoder, piplines[23], [buf_30, buf_10, buf_24], [64, 128, 1]);
        addComputePass(device, commandEncoder, piplines[24], [buf_31, buf_30], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[25], [buf_32, buf_30, buf_31], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[26], [buf_33, buf_30, buf_31, buf_32], [64, 512, 1]);
        addComputePass(device, commandEncoder, piplines[27], [buf_4, buf_33, buf_27], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[28], [buf_10, buf_13, buf_4, buf_34, buf_35], [64, 16, 1]);
        addComputePass(device, commandEncoder, piplines[29], [buf_7, buf_10], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[30], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[31], [buf_7, buf_10, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[32], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[33], [buf_13, buf_10, buf_8, buf_9, buf_36, buf_37], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[34], [buf_24, buf_13, buf_38, buf_39], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[35], [buf_7, buf_24], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[36], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[37], [buf_7, buf_24, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[38], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[39], [buf_27, buf_24, buf_8, buf_9, buf_40, buf_41], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[40], [buf_4, buf_10, buf_27, buf_42, buf_43], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[41], [buf_7, buf_4], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[42], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[43], [buf_7, buf_4, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[44], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[45], [buf_10, buf_4, buf_8, buf_9, buf_44, buf_45], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[46], [buf_13, buf_10, buf_46, buf_47], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[47], [buf_7, buf_13], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[48], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[49], [buf_7, buf_13, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[50], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[51], [buf_24, buf_13, buf_8, buf_9, buf_48, buf_49], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[52], [buf_27, buf_4, buf_24, buf_50, buf_51], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[53], [buf_7, buf_27], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[54], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[55], [buf_7, buf_27, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[56], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[57], [buf_4, buf_27, buf_8, buf_9, buf_52, buf_53], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[58], [buf_10, buf_4, buf_54, buf_55], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[59], [buf_7, buf_10], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[60], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[61], [buf_7, buf_10, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[62], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[63], [buf_13, buf_10, buf_8, buf_9, buf_56, buf_57], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[64], [buf_24, buf_27, buf_13, buf_58, buf_59], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[65], [buf_7, buf_24], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[66], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[67], [buf_7, buf_24, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[68], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[69], [buf_27, buf_24, buf_8, buf_9, buf_60, buf_61], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[70], [buf_4, buf_27, buf_62, buf_63], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[71], [buf_7, buf_4], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[72], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[73], [buf_7, buf_4, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[74], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[75], [buf_10, buf_4, buf_8, buf_9, buf_64, buf_65], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[76], [buf_13, buf_24, buf_10, buf_66, buf_67], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[77], [buf_68, buf_13, buf_69, buf_70], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[78], [buf_7, buf_68], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[79], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[80], [buf_7, buf_68, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[81], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[82], [buf_71, buf_68, buf_8, buf_9, buf_72, buf_73], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[83], [buf_74, buf_71, buf_75, buf_76], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[84], [buf_7, buf_74], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[85], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[86], [buf_7, buf_74, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[87], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[88], [buf_71, buf_74, buf_8, buf_9, buf_77, buf_78], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[89], [buf_74, buf_68, buf_71, buf_79, buf_80], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[90], [buf_7, buf_74], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[91], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[92], [buf_7, buf_74, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[93], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[94], [buf_71, buf_74, buf_8, buf_9, buf_81, buf_82], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[95], [buf_83, buf_71, buf_84, buf_85], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[96], [buf_7, buf_83], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[97], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[98], [buf_7, buf_83, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[99], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[100], [buf_71, buf_83, buf_8, buf_9, buf_86, buf_87], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[101], [buf_83, buf_74, buf_71, buf_88, buf_89], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[102], [buf_7, buf_83], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[103], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[104], [buf_7, buf_83, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[105], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[106], [buf_74, buf_83, buf_8, buf_9, buf_90, buf_91], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[107], [buf_71, buf_74, buf_92, buf_93], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[108], [buf_7, buf_71], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[109], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[110], [buf_7, buf_71, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[111], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[112], [buf_74, buf_71, buf_8, buf_9, buf_94, buf_95], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[113], [buf_71, buf_83, buf_74, buf_96, buf_97], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[114], [buf_98, buf_71, buf_99, buf_100], [4, 32, 128]);
        addComputePass(device, commandEncoder, piplines[115], [buf_7, buf_98], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[116], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[117], [buf_7, buf_98, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[118], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[119], [buf_101, buf_98, buf_8, buf_9, buf_102, buf_103], [1024, 64, 1]);
        addComputePass(device, commandEncoder, piplines[120], [buf_30, buf_101, buf_104, buf_105], [4, 32, 64]);
        addComputePass(device, commandEncoder, piplines[121], [buf_7, buf_30], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[122], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[123], [buf_7, buf_30, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[124], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[125], [buf_33, buf_30, buf_8, buf_9, buf_106, buf_107], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[126], [buf_30, buf_33, buf_108], [4, 32, 64]);
        addComputePass(device, commandEncoder, piplines[127], [buf_33, buf_98, buf_109, buf_110, buf_30, buf_111], [1024, 8, 1]);
        addComputePass(device, commandEncoder, piplines[128], [buf_7, buf_33], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[129], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[130], [buf_7, buf_33, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[131], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[132], [buf_30, buf_33, buf_8, buf_9, buf_112, buf_113], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[133], [buf_114, buf_30, buf_115, buf_116], [4, 32, 64]);
        addComputePass(device, commandEncoder, piplines[134], [buf_7, buf_114], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[135], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[136], [buf_7, buf_114, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[137], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[138], [buf_30, buf_114, buf_8, buf_9, buf_117, buf_118], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[139], [buf_114, buf_33, buf_30, buf_119, buf_120], [4, 32, 64]);
        addComputePass(device, commandEncoder, piplines[140], [buf_7, buf_114], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[141], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[142], [buf_7, buf_114, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[143], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[144], [buf_33, buf_114, buf_8, buf_9, buf_121, buf_122], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[145], [buf_30, buf_33, buf_123, buf_124], [4, 32, 64]);
        addComputePass(device, commandEncoder, piplines[146], [buf_7, buf_30], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[147], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[148], [buf_7, buf_30, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[149], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[150], [buf_33, buf_30, buf_8, buf_9, buf_125, buf_126], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[151], [buf_30, buf_114, buf_33, buf_127, buf_128], [4, 32, 64]);
        addComputePass(device, commandEncoder, piplines[152], [buf_129, buf_30, buf_130, buf_131], [8, 64, 64]);
        addComputePass(device, commandEncoder, piplines[153], [buf_7, buf_129], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[154], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[155], [buf_7, buf_129, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[156], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[157], [buf_132, buf_129, buf_8, buf_9, buf_133, buf_134], [4096, 32, 1]);
        addComputePass(device, commandEncoder, piplines[158], [buf_101, buf_132, buf_135, buf_136], [8, 64, 32]);
        addComputePass(device, commandEncoder, piplines[159], [buf_7, buf_101], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[160], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[161], [buf_7, buf_101, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[162], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[163], [buf_137, buf_101, buf_8, buf_9, buf_138, buf_139], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[164], [buf_101, buf_137, buf_140], [8, 64, 32]);
        addComputePass(device, commandEncoder, piplines[165], [buf_137, buf_129, buf_141, buf_142, buf_101, buf_143], [4096, 4, 1]);
        addComputePass(device, commandEncoder, piplines[166], [buf_7, buf_137], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[167], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[168], [buf_7, buf_137, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[169], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[170], [buf_101, buf_137, buf_8, buf_9, buf_144, buf_145], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[171], [buf_146, buf_101, buf_147, buf_148], [8, 64, 32]);
        addComputePass(device, commandEncoder, piplines[172], [buf_7, buf_146], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[173], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[174], [buf_7, buf_146, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[175], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[176], [buf_101, buf_146, buf_8, buf_9, buf_149, buf_150], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[177], [buf_146, buf_137, buf_101, buf_151, buf_152], [8, 64, 32]);
        addComputePass(device, commandEncoder, piplines[178], [buf_7, buf_146], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[179], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[180], [buf_7, buf_146, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[181], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[182], [buf_137, buf_146, buf_8, buf_9, buf_153, buf_154], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[183], [buf_101, buf_137, buf_155, buf_156], [8, 64, 32]);
        addComputePass(device, commandEncoder, piplines[184], [buf_7, buf_101], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[185], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[186], [buf_7, buf_101, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[187], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[188], [buf_137, buf_101, buf_8, buf_9, buf_157, buf_158], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[189], [buf_159, buf_146, buf_137, buf_160, buf_161], [8, 64, 32]);
        addComputePass(device, commandEncoder, piplines[190], [buf_7, buf_159], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[191], [buf_8, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[192], [buf_7, buf_159, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[193], [buf_9, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[194], [buf_101, buf_159, buf_8, buf_9, buf_162, buf_163], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[195], [buf_164, buf_101, buf_165, buf_166], [8, 64, 1]);
        addComputePass(device, commandEncoder, piplines[196], [output0, buf_164], [2048, 1, 1]);
            commandEncoder.copyBufferToBuffer(output0, 0, gpuReadBuffer, 0, output0.size);
            const gpuCommands = commandEncoder.finish();
            device.queue.submit([gpuCommands]);

            await gpuReadBuffer.mapAsync(GPUMapMode.READ);
            const resultBuffer = new Float32Array(gpuReadBuffer.size/4);
            resultBuffer.set(new Float32Array(gpuReadBuffer.getMappedRange()));
            gpuReadBuffer.unmap();
            return resultBuffer;
        }
      }
    }
  }
  